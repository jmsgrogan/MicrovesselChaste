// This file has been generated by Py++.

#include "boost/python.hpp"

#include "flow_headers.hpp"

namespace bp = boost::python;

struct AbstractVesselNetworkCalculator_less__2__greater__wrapper : AbstractVesselNetworkCalculator< 2 >, bp::wrapper< AbstractVesselNetworkCalculator< 2 > > {

    AbstractVesselNetworkCalculator_less__2__greater__wrapper( )
    : AbstractVesselNetworkCalculator<2>( )
      , bp::wrapper< AbstractVesselNetworkCalculator< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ){
        bp::override func_Calculate = this->get_override( "Calculate" );
        func_Calculate(  );
    }

};

struct AbstractHaematocritSolver_less__2__greater__wrapper : AbstractHaematocritSolver< 2 >, bp::wrapper< AbstractHaematocritSolver< 2 > > {

    AbstractHaematocritSolver_less__2__greater__wrapper( )
    : AbstractHaematocritSolver<2>( )
      , bp::wrapper< AbstractHaematocritSolver< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ){
        bp::override func_Calculate = this->get_override( "Calculate" );
        func_Calculate(  );
    }

};

struct AbstractVesselNetworkCalculator_less__3__greater__wrapper : AbstractVesselNetworkCalculator< 3 >, bp::wrapper< AbstractVesselNetworkCalculator< 3 > > {

    AbstractVesselNetworkCalculator_less__3__greater__wrapper( )
    : AbstractVesselNetworkCalculator<3>( )
      , bp::wrapper< AbstractVesselNetworkCalculator< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ){
        bp::override func_Calculate = this->get_override( "Calculate" );
        func_Calculate(  );
    }

};

struct AbstractHaematocritSolver_less__3__greater__wrapper : AbstractHaematocritSolver< 3 >, bp::wrapper< AbstractHaematocritSolver< 3 > > {

    AbstractHaematocritSolver_less__3__greater__wrapper( )
    : AbstractHaematocritSolver<3>( )
      , bp::wrapper< AbstractHaematocritSolver< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ){
        bp::override func_Calculate = this->get_override( "Calculate" );
        func_Calculate(  );
    }

};

struct AbstractStructuralAdaptationSolver_less__2__greater__wrapper : AbstractStructuralAdaptationSolver< 2 >, bp::wrapper< AbstractStructuralAdaptationSolver< 2 > > {

    AbstractStructuralAdaptationSolver_less__2__greater__wrapper( )
    : AbstractStructuralAdaptationSolver<2>( )
      , bp::wrapper< AbstractStructuralAdaptationSolver< 2 > >(){
        // null constructor
    
    }

    virtual void Iterate(  ){
        bp::override func_Iterate = this->get_override( "Iterate" );
        func_Iterate(  );
    }

    virtual void Write(  ) {
        if( bp::override func_Write = this->get_override( "Write" ) )
            func_Write(  );
        else{
            this->AbstractStructuralAdaptationSolver< 2 >::Write(  );
        }
    }
    
    void default_Write(  ) {
        AbstractStructuralAdaptationSolver< 2 >::Write( );
    }

};

struct AbstractStructuralAdaptationSolver_less__3__greater__wrapper : AbstractStructuralAdaptationSolver< 3 >, bp::wrapper< AbstractStructuralAdaptationSolver< 3 > > {

    AbstractStructuralAdaptationSolver_less__3__greater__wrapper( )
    : AbstractStructuralAdaptationSolver<3>( )
      , bp::wrapper< AbstractStructuralAdaptationSolver< 3 > >(){
        // null constructor
    
    }

    virtual void Iterate(  ){
        bp::override func_Iterate = this->get_override( "Iterate" );
        func_Iterate(  );
    }

    virtual void Write(  ) {
        if( bp::override func_Write = this->get_override( "Write" ) )
            func_Write(  );
        else{
            this->AbstractStructuralAdaptationSolver< 3 >::Write(  );
        }
    }
    
    void default_Write(  ) {
        AbstractStructuralAdaptationSolver< 3 >::Write( );
    }

};

struct AlarconHaematocritSolver_less__2__greater__wrapper : AlarconHaematocritSolver< 2 >, bp::wrapper< AlarconHaematocritSolver< 2 > > {

    AlarconHaematocritSolver_less__2__greater__wrapper(AlarconHaematocritSolver<2> const & arg )
    : AlarconHaematocritSolver<2>( arg )
      , bp::wrapper< AlarconHaematocritSolver< 2 > >(){
        // copy constructor
        
    }

    AlarconHaematocritSolver_less__2__greater__wrapper( )
    : AlarconHaematocritSolver<2>( )
      , bp::wrapper< AlarconHaematocritSolver< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->AlarconHaematocritSolver< 2 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        AlarconHaematocritSolver< 2 >::Calculate( );
    }

};

struct BetteridgeHaematocritSolver_less__2__greater__wrapper : BetteridgeHaematocritSolver< 2 >, bp::wrapper< BetteridgeHaematocritSolver< 2 > > {

    BetteridgeHaematocritSolver_less__2__greater__wrapper(BetteridgeHaematocritSolver<2> const & arg )
    : BetteridgeHaematocritSolver<2>( arg )
      , bp::wrapper< BetteridgeHaematocritSolver< 2 > >(){
        // copy constructor
        
    }

    BetteridgeHaematocritSolver_less__2__greater__wrapper( )
    : BetteridgeHaematocritSolver<2>( )
      , bp::wrapper< BetteridgeHaematocritSolver< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->BetteridgeHaematocritSolver< 2 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        BetteridgeHaematocritSolver< 2 >::Calculate( );
    }

};

struct BetteridgeHaematocritSolver_less__3__greater__wrapper : BetteridgeHaematocritSolver< 3 >, bp::wrapper< BetteridgeHaematocritSolver< 3 > > {

    BetteridgeHaematocritSolver_less__3__greater__wrapper(BetteridgeHaematocritSolver<3> const & arg )
    : BetteridgeHaematocritSolver<3>( arg )
      , bp::wrapper< BetteridgeHaematocritSolver< 3 > >(){
        // copy constructor
        
    }

    BetteridgeHaematocritSolver_less__3__greater__wrapper( )
    : BetteridgeHaematocritSolver<3>( )
      , bp::wrapper< BetteridgeHaematocritSolver< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->BetteridgeHaematocritSolver< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        BetteridgeHaematocritSolver< 3 >::Calculate( );
    }

};

struct ConstantHaematocritSolver_less__2__greater__wrapper : ConstantHaematocritSolver< 2 >, bp::wrapper< ConstantHaematocritSolver< 2 > > {

    ConstantHaematocritSolver_less__2__greater__wrapper(ConstantHaematocritSolver<2> const & arg )
    : ConstantHaematocritSolver<2>( arg )
      , bp::wrapper< ConstantHaematocritSolver< 2 > >(){
        // copy constructor
        
    }

    ConstantHaematocritSolver_less__2__greater__wrapper( )
    : ConstantHaematocritSolver<2>( )
      , bp::wrapper< ConstantHaematocritSolver< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->ConstantHaematocritSolver< 2 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        ConstantHaematocritSolver< 2 >::Calculate( );
    }

};

struct ConstantHaematocritSolver_less__3__greater__wrapper : ConstantHaematocritSolver< 3 >, bp::wrapper< ConstantHaematocritSolver< 3 > > {

    ConstantHaematocritSolver_less__3__greater__wrapper(ConstantHaematocritSolver<3> const & arg )
    : ConstantHaematocritSolver<3>( arg )
      , bp::wrapper< ConstantHaematocritSolver< 3 > >(){
        // copy constructor
        
    }

    ConstantHaematocritSolver_less__3__greater__wrapper( )
    : ConstantHaematocritSolver<3>( )
      , bp::wrapper< ConstantHaematocritSolver< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->ConstantHaematocritSolver< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        ConstantHaematocritSolver< 3 >::Calculate( );
    }

};

struct MechanicalStimulusCalculator_less__2__greater__wrapper : MechanicalStimulusCalculator< 2 >, bp::wrapper< MechanicalStimulusCalculator< 2 > > {

    MechanicalStimulusCalculator_less__2__greater__wrapper(MechanicalStimulusCalculator<2> const & arg )
    : MechanicalStimulusCalculator<2>( arg )
      , bp::wrapper< MechanicalStimulusCalculator< 2 > >(){
        // copy constructor
        
    }

    MechanicalStimulusCalculator_less__2__greater__wrapper( )
    : MechanicalStimulusCalculator<2>( )
      , bp::wrapper< MechanicalStimulusCalculator< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->MechanicalStimulusCalculator< 2 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        MechanicalStimulusCalculator< 2 >::Calculate( );
    }

};

struct MechanicalStimulusCalculator_less__3__greater__wrapper : MechanicalStimulusCalculator< 3 >, bp::wrapper< MechanicalStimulusCalculator< 3 > > {

    MechanicalStimulusCalculator_less__3__greater__wrapper(MechanicalStimulusCalculator<3> const & arg )
    : MechanicalStimulusCalculator<3>( arg )
      , bp::wrapper< MechanicalStimulusCalculator< 3 > >(){
        // copy constructor
        
    }

    MechanicalStimulusCalculator_less__3__greater__wrapper( )
    : MechanicalStimulusCalculator<3>( )
      , bp::wrapper< MechanicalStimulusCalculator< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->MechanicalStimulusCalculator< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        MechanicalStimulusCalculator< 3 >::Calculate( );
    }

};

struct MetabolicStimulusCalculator_less__2__greater__wrapper : MetabolicStimulusCalculator< 2 >, bp::wrapper< MetabolicStimulusCalculator< 2 > > {

    MetabolicStimulusCalculator_less__2__greater__wrapper(MetabolicStimulusCalculator<2> const & arg )
    : MetabolicStimulusCalculator<2>( arg )
      , bp::wrapper< MetabolicStimulusCalculator< 2 > >(){
        // copy constructor
        
    }

    MetabolicStimulusCalculator_less__2__greater__wrapper( )
    : MetabolicStimulusCalculator<2>( )
      , bp::wrapper< MetabolicStimulusCalculator< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->MetabolicStimulusCalculator< 2 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        MetabolicStimulusCalculator< 2 >::Calculate( );
    }

};

struct MetabolicStimulusCalculator_less__3__greater__wrapper : MetabolicStimulusCalculator< 3 >, bp::wrapper< MetabolicStimulusCalculator< 3 > > {

    MetabolicStimulusCalculator_less__3__greater__wrapper(MetabolicStimulusCalculator<3> const & arg )
    : MetabolicStimulusCalculator<3>( arg )
      , bp::wrapper< MetabolicStimulusCalculator< 3 > >(){
        // copy constructor
        
    }

    MetabolicStimulusCalculator_less__3__greater__wrapper( )
    : MetabolicStimulusCalculator<3>( )
      , bp::wrapper< MetabolicStimulusCalculator< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->MetabolicStimulusCalculator< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        MetabolicStimulusCalculator< 3 >::Calculate( );
    }

};

struct RadiusCalculator_less__2__greater__wrapper : RadiusCalculator< 2 >, bp::wrapper< RadiusCalculator< 2 > > {

    RadiusCalculator_less__2__greater__wrapper(RadiusCalculator<2> const & arg )
    : RadiusCalculator<2>( arg )
      , bp::wrapper< RadiusCalculator< 2 > >(){
        // copy constructor
        
    }

    RadiusCalculator_less__2__greater__wrapper( )
    : RadiusCalculator<2>( )
      , bp::wrapper< RadiusCalculator< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->RadiusCalculator< 2 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        RadiusCalculator< 2 >::Calculate( );
    }

};

struct RadiusCalculator_less__3__greater__wrapper : RadiusCalculator< 3 >, bp::wrapper< RadiusCalculator< 3 > > {

    RadiusCalculator_less__3__greater__wrapper(RadiusCalculator<3> const & arg )
    : RadiusCalculator<3>( arg )
      , bp::wrapper< RadiusCalculator< 3 > >(){
        // copy constructor
        
    }

    RadiusCalculator_less__3__greater__wrapper( )
    : RadiusCalculator<3>( )
      , bp::wrapper< RadiusCalculator< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->RadiusCalculator< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        RadiusCalculator< 3 >::Calculate( );
    }

};

struct ShrinkingStimulusCalculator_less__2__greater__wrapper : ShrinkingStimulusCalculator< 2 >, bp::wrapper< ShrinkingStimulusCalculator< 2 > > {

    ShrinkingStimulusCalculator_less__2__greater__wrapper(ShrinkingStimulusCalculator<2> const & arg )
    : ShrinkingStimulusCalculator<2>( arg )
      , bp::wrapper< ShrinkingStimulusCalculator< 2 > >(){
        // copy constructor
        
    }

    ShrinkingStimulusCalculator_less__2__greater__wrapper( )
    : ShrinkingStimulusCalculator<2>( )
      , bp::wrapper< ShrinkingStimulusCalculator< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->ShrinkingStimulusCalculator< 2 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        ShrinkingStimulusCalculator< 2 >::Calculate( );
    }

};

struct ShrinkingStimulusCalculator_less__3__greater__wrapper : ShrinkingStimulusCalculator< 3 >, bp::wrapper< ShrinkingStimulusCalculator< 3 > > {

    ShrinkingStimulusCalculator_less__3__greater__wrapper(ShrinkingStimulusCalculator<3> const & arg )
    : ShrinkingStimulusCalculator<3>( arg )
      , bp::wrapper< ShrinkingStimulusCalculator< 3 > >(){
        // copy constructor
        
    }

    ShrinkingStimulusCalculator_less__3__greater__wrapper( )
    : ShrinkingStimulusCalculator<3>( )
      , bp::wrapper< ShrinkingStimulusCalculator< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->ShrinkingStimulusCalculator< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        ShrinkingStimulusCalculator< 3 >::Calculate( );
    }

};

struct StructuralAdaptationSolver_less__2__greater__wrapper : StructuralAdaptationSolver< 2 >, bp::wrapper< StructuralAdaptationSolver< 2 > > {

    StructuralAdaptationSolver_less__2__greater__wrapper(StructuralAdaptationSolver<2> const & arg )
    : StructuralAdaptationSolver<2>( arg )
      , bp::wrapper< StructuralAdaptationSolver< 2 > >(){
        // copy constructor
        
    }

    StructuralAdaptationSolver_less__2__greater__wrapper( )
    : StructuralAdaptationSolver<2>( )
      , bp::wrapper< StructuralAdaptationSolver< 2 > >(){
        // null constructor
    
    }

    virtual void Iterate(  ) {
        if( bp::override func_Iterate = this->get_override( "Iterate" ) )
            func_Iterate(  );
        else{
            this->StructuralAdaptationSolver< 2 >::Iterate(  );
        }
    }
    
    void default_Iterate(  ) {
        StructuralAdaptationSolver< 2 >::Iterate( );
    }

    virtual void Write(  ) {
        if( bp::override func_Write = this->get_override( "Write" ) )
            func_Write(  );
        else{
            this->AbstractStructuralAdaptationSolver< 2 >::Write(  );
        }
    }
    
    void default_Write(  ) {
        AbstractStructuralAdaptationSolver< 2 >::Write( );
    }

};

struct StructuralAdaptationSolver_less__3__greater__wrapper : StructuralAdaptationSolver< 3 >, bp::wrapper< StructuralAdaptationSolver< 3 > > {

    StructuralAdaptationSolver_less__3__greater__wrapper(StructuralAdaptationSolver<3> const & arg )
    : StructuralAdaptationSolver<3>( arg )
      , bp::wrapper< StructuralAdaptationSolver< 3 > >(){
        // copy constructor
        
    }

    StructuralAdaptationSolver_less__3__greater__wrapper( )
    : StructuralAdaptationSolver<3>( )
      , bp::wrapper< StructuralAdaptationSolver< 3 > >(){
        // null constructor
    
    }

    virtual void Iterate(  ) {
        if( bp::override func_Iterate = this->get_override( "Iterate" ) )
            func_Iterate(  );
        else{
            this->StructuralAdaptationSolver< 3 >::Iterate(  );
        }
    }
    
    void default_Iterate(  ) {
        StructuralAdaptationSolver< 3 >::Iterate( );
    }

    virtual void Write(  ) {
        if( bp::override func_Write = this->get_override( "Write" ) )
            func_Write(  );
        else{
            this->AbstractStructuralAdaptationSolver< 3 >::Write(  );
        }
    }
    
    void default_Write(  ) {
        AbstractStructuralAdaptationSolver< 3 >::Write( );
    }

};

struct VesselImpedanceCalculator_less__2__greater__wrapper : VesselImpedanceCalculator< 2 >, bp::wrapper< VesselImpedanceCalculator< 2 > > {

    VesselImpedanceCalculator_less__2__greater__wrapper(VesselImpedanceCalculator<2> const & arg )
    : VesselImpedanceCalculator<2>( arg )
      , bp::wrapper< VesselImpedanceCalculator< 2 > >(){
        // copy constructor
        
    }

    VesselImpedanceCalculator_less__2__greater__wrapper( )
    : VesselImpedanceCalculator<2>( )
      , bp::wrapper< VesselImpedanceCalculator< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->VesselImpedanceCalculator< 2 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        VesselImpedanceCalculator< 2 >::Calculate( );
    }

};

struct VesselImpedanceCalculator_less__3__greater__wrapper : VesselImpedanceCalculator< 3 >, bp::wrapper< VesselImpedanceCalculator< 3 > > {

    VesselImpedanceCalculator_less__3__greater__wrapper(VesselImpedanceCalculator<3> const & arg )
    : VesselImpedanceCalculator<3>( arg )
      , bp::wrapper< VesselImpedanceCalculator< 3 > >(){
        // copy constructor
        
    }

    VesselImpedanceCalculator_less__3__greater__wrapper( )
    : VesselImpedanceCalculator<3>( )
      , bp::wrapper< VesselImpedanceCalculator< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->VesselImpedanceCalculator< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        VesselImpedanceCalculator< 3 >::Calculate( );
    }

};

struct ViscosityCalculator_less__2__greater__wrapper : ViscosityCalculator< 2 >, bp::wrapper< ViscosityCalculator< 2 > > {

    ViscosityCalculator_less__2__greater__wrapper(ViscosityCalculator<2> const & arg )
    : ViscosityCalculator<2>( arg )
      , bp::wrapper< ViscosityCalculator< 2 > >(){
        // copy constructor
        
    }

    ViscosityCalculator_less__2__greater__wrapper( )
    : ViscosityCalculator<2>( )
      , bp::wrapper< ViscosityCalculator< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->ViscosityCalculator< 2 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        ViscosityCalculator< 2 >::Calculate( );
    }

};

struct ViscosityCalculator_less__3__greater__wrapper : ViscosityCalculator< 3 >, bp::wrapper< ViscosityCalculator< 3 > > {

    ViscosityCalculator_less__3__greater__wrapper(ViscosityCalculator<3> const & arg )
    : ViscosityCalculator<3>( arg )
      , bp::wrapper< ViscosityCalculator< 3 > >(){
        // copy constructor
        
    }

    ViscosityCalculator_less__3__greater__wrapper( )
    : ViscosityCalculator<3>( )
      , bp::wrapper< ViscosityCalculator< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->ViscosityCalculator< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        ViscosityCalculator< 3 >::Calculate( );
    }

};

struct WallShearStressCalculator_less__2__greater__wrapper : WallShearStressCalculator< 2 >, bp::wrapper< WallShearStressCalculator< 2 > > {

    WallShearStressCalculator_less__2__greater__wrapper(WallShearStressCalculator<2> const & arg )
    : WallShearStressCalculator<2>( arg )
      , bp::wrapper< WallShearStressCalculator< 2 > >(){
        // copy constructor
        
    }

    WallShearStressCalculator_less__2__greater__wrapper( )
    : WallShearStressCalculator<2>( )
      , bp::wrapper< WallShearStressCalculator< 2 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->WallShearStressCalculator< 2 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        WallShearStressCalculator< 2 >::Calculate( );
    }

};

struct WallShearStressCalculator_less__3__greater__wrapper : WallShearStressCalculator< 3 >, bp::wrapper< WallShearStressCalculator< 3 > > {

    WallShearStressCalculator_less__3__greater__wrapper(WallShearStressCalculator<3> const & arg )
    : WallShearStressCalculator<3>( arg )
      , bp::wrapper< WallShearStressCalculator< 3 > >(){
        // copy constructor
        
    }

    WallShearStressCalculator_less__3__greater__wrapper( )
    : WallShearStressCalculator<3>( )
      , bp::wrapper< WallShearStressCalculator< 3 > >(){
        // null constructor
    
    }

    virtual void Calculate(  ) {
        if( bp::override func_Calculate = this->get_override( "Calculate" ) )
            func_Calculate(  );
        else{
            this->WallShearStressCalculator< 3 >::Calculate(  );
        }
    }
    
    void default_Calculate(  ) {
        WallShearStressCalculator< 3 >::Calculate( );
    }

};

BOOST_PYTHON_MODULE(_chaste_project_MicrovesselChaste_flow){
    { //::AbstractVesselNetworkCalculator< 2 >
        typedef bp::class_< AbstractVesselNetworkCalculator_less__2__greater__wrapper, boost::noncopyable > AbstractVesselNetworkCalculator2_exposer_t;
        AbstractVesselNetworkCalculator2_exposer_t AbstractVesselNetworkCalculator2_exposer = AbstractVesselNetworkCalculator2_exposer_t( "AbstractVesselNetworkCalculator2", bp::init< >() );
        bp::scope AbstractVesselNetworkCalculator2_scope( AbstractVesselNetworkCalculator2_exposer );
        { //::AbstractVesselNetworkCalculator< 2 >::Calculate
        
            typedef AbstractVesselNetworkCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            
            AbstractVesselNetworkCalculator2_exposer.def( 
                "Calculate"
                , bp::pure_virtual( Calculate_function_type(&::AbstractVesselNetworkCalculator< 2 >::Calculate) ) );
        
        }
        { //::AbstractVesselNetworkCalculator< 2 >::SetVesselNetwork
        
            typedef AbstractVesselNetworkCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 2 > > ) ;
            
            AbstractVesselNetworkCalculator2_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::AbstractVesselNetworkCalculator< 2 >::SetVesselNetwork )
                , ( bp::arg("pNetwork") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractVesselNetworkCalculator<2> > >();
    }

    bp::class_< AbstractHaematocritSolver_less__2__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 2 > >, boost::noncopyable >( "AbstractHaematocritSolver2", bp::init< >() )    
        .def( 
            "Calculate"
            , bp::pure_virtual( (void ( ::AbstractHaematocritSolver<2>::* )(  ))(&::AbstractHaematocritSolver< 2 >::Calculate) ) );

    { //::AbstractVesselNetworkCalculator< 3 >
        typedef bp::class_< AbstractVesselNetworkCalculator_less__3__greater__wrapper, boost::noncopyable > AbstractVesselNetworkCalculator3_exposer_t;
        AbstractVesselNetworkCalculator3_exposer_t AbstractVesselNetworkCalculator3_exposer = AbstractVesselNetworkCalculator3_exposer_t( "AbstractVesselNetworkCalculator3", bp::init< >() );
        bp::scope AbstractVesselNetworkCalculator3_scope( AbstractVesselNetworkCalculator3_exposer );
        { //::AbstractVesselNetworkCalculator< 3 >::Calculate
        
            typedef AbstractVesselNetworkCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            
            AbstractVesselNetworkCalculator3_exposer.def( 
                "Calculate"
                , bp::pure_virtual( Calculate_function_type(&::AbstractVesselNetworkCalculator< 3 >::Calculate) ) );
        
        }
        { //::AbstractVesselNetworkCalculator< 3 >::SetVesselNetwork
        
            typedef AbstractVesselNetworkCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 3 > > ) ;
            
            AbstractVesselNetworkCalculator3_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::AbstractVesselNetworkCalculator< 3 >::SetVesselNetwork )
                , ( bp::arg("pNetwork") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< AbstractVesselNetworkCalculator<3> > >();
    }

    bp::class_< AbstractHaematocritSolver_less__3__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 3 > >, boost::noncopyable >( "AbstractHaematocritSolver3", bp::init< >() )    
        .def( 
            "Calculate"
            , bp::pure_virtual( (void ( ::AbstractHaematocritSolver<3>::* )(  ))(&::AbstractHaematocritSolver< 3 >::Calculate) ) );

    bp::class_< AbstractStructuralAdaptationSolver_less__2__greater__wrapper, boost::noncopyable >( "AbstractStructuralAdaptationSolver2", bp::init< >() )    
        .def( 
            "GetOutputFileName"
            , (::std::string ( ::AbstractStructuralAdaptationSolver<2>::* )(  )const)( &::AbstractStructuralAdaptationSolver< 2 >::GetOutputFileName ) )    
        .def( 
            "GetTimeIncrement"
            , (::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( ::AbstractStructuralAdaptationSolver<2>::* )(  )const)( &::AbstractStructuralAdaptationSolver< 2 >::GetTimeIncrement ) )    
        .def( 
            "GetTolerance"
            , (double ( ::AbstractStructuralAdaptationSolver<2>::* )(  )const)( &::AbstractStructuralAdaptationSolver< 2 >::GetTolerance ) )    
        .def( 
            "GetWriteOutput"
            , (bool ( ::AbstractStructuralAdaptationSolver<2>::* )(  )const)( &::AbstractStructuralAdaptationSolver< 2 >::GetWriteOutput ) )    
        .def( 
            "Iterate"
            , bp::pure_virtual( (void ( ::AbstractStructuralAdaptationSolver<2>::* )(  ))(&::AbstractStructuralAdaptationSolver< 2 >::Iterate) ) )    
        .def( 
            "SetMaxIterations"
            , (void ( ::AbstractStructuralAdaptationSolver<2>::* )( unsigned int ))( &::AbstractStructuralAdaptationSolver< 2 >::SetMaxIterations )
            , ( bp::arg("iterations") ) )    
        .def( 
            "SetOutputFileName"
            , (void ( ::AbstractStructuralAdaptationSolver<2>::* )( ::std::string const & ))( &::AbstractStructuralAdaptationSolver< 2 >::SetOutputFileName )
            , ( bp::arg("rFilename") ) )    
        .def( 
            "SetTimeIncrement"
            , (void ( ::AbstractStructuralAdaptationSolver<2>::* )( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::AbstractStructuralAdaptationSolver< 2 >::SetTimeIncrement )
            , ( bp::arg("timeIncrement") ) )    
        .def( 
            "SetTolerance"
            , (void ( ::AbstractStructuralAdaptationSolver<2>::* )( double ))( &::AbstractStructuralAdaptationSolver< 2 >::SetTolerance )
            , ( bp::arg("tolerance") ) )    
        .def( 
            "SetVesselNetwork"
            , (void ( ::AbstractStructuralAdaptationSolver<2>::* )( ::boost::shared_ptr< VesselNetwork< 2 > > ))( &::AbstractStructuralAdaptationSolver< 2 >::SetVesselNetwork )
            , ( bp::arg("pNetwork") ) )    
        .def( 
            "SetWriteOutput"
            , (void ( ::AbstractStructuralAdaptationSolver<2>::* )( bool ))( &::AbstractStructuralAdaptationSolver< 2 >::SetWriteOutput )
            , ( bp::arg("writeFlag") ) )    
        .def( 
            "Solve"
            , (void ( ::AbstractStructuralAdaptationSolver<2>::* )(  ))( &::AbstractStructuralAdaptationSolver< 2 >::Solve ) )    
        .def( 
            "Write"
            , (void ( ::AbstractStructuralAdaptationSolver<2>::* )(  ))(&::AbstractStructuralAdaptationSolver< 2 >::Write)
            , (void ( AbstractStructuralAdaptationSolver_less__2__greater__wrapper::* )(  ))(&AbstractStructuralAdaptationSolver_less__2__greater__wrapper::default_Write) );

    bp::class_< AbstractStructuralAdaptationSolver_less__3__greater__wrapper, boost::noncopyable >( "AbstractStructuralAdaptationSolver3", bp::init< >() )    
        .def( 
            "GetOutputFileName"
            , (::std::string ( ::AbstractStructuralAdaptationSolver<3>::* )(  )const)( &::AbstractStructuralAdaptationSolver< 3 >::GetOutputFileName ) )    
        .def( 
            "GetTimeIncrement"
            , (::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( ::AbstractStructuralAdaptationSolver<3>::* )(  )const)( &::AbstractStructuralAdaptationSolver< 3 >::GetTimeIncrement ) )    
        .def( 
            "GetTolerance"
            , (double ( ::AbstractStructuralAdaptationSolver<3>::* )(  )const)( &::AbstractStructuralAdaptationSolver< 3 >::GetTolerance ) )    
        .def( 
            "GetWriteOutput"
            , (bool ( ::AbstractStructuralAdaptationSolver<3>::* )(  )const)( &::AbstractStructuralAdaptationSolver< 3 >::GetWriteOutput ) )    
        .def( 
            "Iterate"
            , bp::pure_virtual( (void ( ::AbstractStructuralAdaptationSolver<3>::* )(  ))(&::AbstractStructuralAdaptationSolver< 3 >::Iterate) ) )    
        .def( 
            "SetMaxIterations"
            , (void ( ::AbstractStructuralAdaptationSolver<3>::* )( unsigned int ))( &::AbstractStructuralAdaptationSolver< 3 >::SetMaxIterations )
            , ( bp::arg("iterations") ) )    
        .def( 
            "SetOutputFileName"
            , (void ( ::AbstractStructuralAdaptationSolver<3>::* )( ::std::string const & ))( &::AbstractStructuralAdaptationSolver< 3 >::SetOutputFileName )
            , ( bp::arg("rFilename") ) )    
        .def( 
            "SetTimeIncrement"
            , (void ( ::AbstractStructuralAdaptationSolver<3>::* )( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::AbstractStructuralAdaptationSolver< 3 >::SetTimeIncrement )
            , ( bp::arg("timeIncrement") ) )    
        .def( 
            "SetTolerance"
            , (void ( ::AbstractStructuralAdaptationSolver<3>::* )( double ))( &::AbstractStructuralAdaptationSolver< 3 >::SetTolerance )
            , ( bp::arg("tolerance") ) )    
        .def( 
            "SetVesselNetwork"
            , (void ( ::AbstractStructuralAdaptationSolver<3>::* )( ::boost::shared_ptr< VesselNetwork< 3 > > ))( &::AbstractStructuralAdaptationSolver< 3 >::SetVesselNetwork )
            , ( bp::arg("pNetwork") ) )    
        .def( 
            "SetWriteOutput"
            , (void ( ::AbstractStructuralAdaptationSolver<3>::* )( bool ))( &::AbstractStructuralAdaptationSolver< 3 >::SetWriteOutput )
            , ( bp::arg("writeFlag") ) )    
        .def( 
            "Solve"
            , (void ( ::AbstractStructuralAdaptationSolver<3>::* )(  ))( &::AbstractStructuralAdaptationSolver< 3 >::Solve ) )    
        .def( 
            "Write"
            , (void ( ::AbstractStructuralAdaptationSolver<3>::* )(  ))(&::AbstractStructuralAdaptationSolver< 3 >::Write)
            , (void ( AbstractStructuralAdaptationSolver_less__3__greater__wrapper::* )(  ))(&AbstractStructuralAdaptationSolver_less__3__greater__wrapper::default_Write) );

    bp::class_< AlarconHaematocritSolver_less__2__greater__wrapper, bp::bases< AbstractHaematocritSolver< 2 > > >( "AlarconHaematocritSolver2", bp::init< >() )    
        .def( 
            "Calculate"
            , (void ( ::AlarconHaematocritSolver<2>::* )(  ))(&::AlarconHaematocritSolver< 2 >::Calculate)
            , (void ( AlarconHaematocritSolver_less__2__greater__wrapper::* )(  ))(&AlarconHaematocritSolver_less__2__greater__wrapper::default_Calculate) )    
        .def( 
            "SetAlpha"
            , (void ( ::AlarconHaematocritSolver<2>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::AlarconHaematocritSolver< 2 >::SetAlpha )
            , ( bp::arg("alpha") ) )    
        .def( 
            "SetHaematocrit"
            , (void ( ::AlarconHaematocritSolver<2>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::AlarconHaematocritSolver< 2 >::SetHaematocrit )
            , ( bp::arg("haematocrit") ) )    
        .def( 
            "SetTHR"
            , (void ( ::AlarconHaematocritSolver<2>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::AlarconHaematocritSolver< 2 >::SetTHR )
            , ( bp::arg("thr") ) );

    bp::class_< BetteridgeHaematocritSolver_less__2__greater__wrapper, bp::bases< AbstractHaematocritSolver< 2 > > >( "BetteridgeHaematocritSolver2", bp::init< >() )    
        .def( 
            "Calculate"
            , (void ( ::BetteridgeHaematocritSolver<2>::* )(  ))(&::BetteridgeHaematocritSolver< 2 >::Calculate)
            , (void ( BetteridgeHaematocritSolver_less__2__greater__wrapper::* )(  ))(&BetteridgeHaematocritSolver_less__2__greater__wrapper::default_Calculate) )    
        .def( 
            "SetAlpha"
            , (void ( ::BetteridgeHaematocritSolver<2>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::BetteridgeHaematocritSolver< 2 >::SetAlpha )
            , ( bp::arg("alpha") ) )    
        .def( 
            "SetHaematocrit"
            , (void ( ::BetteridgeHaematocritSolver<2>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::BetteridgeHaematocritSolver< 2 >::SetHaematocrit )
            , ( bp::arg("haematocrit") ) )    
        .def( 
            "SetTHR"
            , (void ( ::BetteridgeHaematocritSolver<2>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::BetteridgeHaematocritSolver< 2 >::SetTHR )
            , ( bp::arg("thr") ) );

    bp::class_< BetteridgeHaematocritSolver_less__3__greater__wrapper, bp::bases< AbstractHaematocritSolver< 3 > > >( "BetteridgeHaematocritSolver3", bp::init< >() )    
        .def( 
            "Calculate"
            , (void ( ::BetteridgeHaematocritSolver<3>::* )(  ))(&::BetteridgeHaematocritSolver< 3 >::Calculate)
            , (void ( BetteridgeHaematocritSolver_less__3__greater__wrapper::* )(  ))(&BetteridgeHaematocritSolver_less__3__greater__wrapper::default_Calculate) )    
        .def( 
            "SetAlpha"
            , (void ( ::BetteridgeHaematocritSolver<3>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::BetteridgeHaematocritSolver< 3 >::SetAlpha )
            , ( bp::arg("alpha") ) )    
        .def( 
            "SetHaematocrit"
            , (void ( ::BetteridgeHaematocritSolver<3>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::BetteridgeHaematocritSolver< 3 >::SetHaematocrit )
            , ( bp::arg("haematocrit") ) )    
        .def( 
            "SetTHR"
            , (void ( ::BetteridgeHaematocritSolver<3>::* )( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::BetteridgeHaematocritSolver< 3 >::SetTHR )
            , ( bp::arg("thr") ) );

    { //::ConstantHaematocritSolver< 2 >
        typedef bp::class_< ConstantHaematocritSolver_less__2__greater__wrapper, bp::bases< AbstractHaematocritSolver< 2 > > > ConstantHaematocritSolver2_exposer_t;
        ConstantHaematocritSolver2_exposer_t ConstantHaematocritSolver2_exposer = ConstantHaematocritSolver2_exposer_t( "ConstantHaematocritSolver2", bp::init< >() );
        bp::scope ConstantHaematocritSolver2_scope( ConstantHaematocritSolver2_exposer );
        { //::ConstantHaematocritSolver< 2 >::Calculate
        
            typedef ConstantHaematocritSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( ConstantHaematocritSolver_less__2__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            ConstantHaematocritSolver2_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::ConstantHaematocritSolver< 2 >::Calculate)
                , default_Calculate_function_type(&ConstantHaematocritSolver_less__2__greater__wrapper::default_Calculate) );
        
        }
        { //::ConstantHaematocritSolver< 2 >::Create
        
            typedef ConstantHaematocritSolver< 2 > exported_class_t;
            typedef ::boost::shared_ptr< ConstantHaematocritSolver< 2 > > ( *Create_function_type )(  );
            
            ConstantHaematocritSolver2_exposer.def( 
                "Create"
                , Create_function_type( &::ConstantHaematocritSolver< 2 >::Create ) );
        
        }
        { //::ConstantHaematocritSolver< 2 >::SetHaematocrit
        
            typedef ConstantHaematocritSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetHaematocrit_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            ConstantHaematocritSolver2_exposer.def( 
                "SetHaematocrit"
                , SetHaematocrit_function_type( &::ConstantHaematocritSolver< 2 >::SetHaematocrit )
                , ( bp::arg("haematocrit") ) );
        
        }
        ConstantHaematocritSolver2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< ConstantHaematocritSolver<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< ConstantHaematocritSolver< 2 > >, boost::shared_ptr< AbstractHaematocritSolver< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< ConstantHaematocritSolver< 2 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 2 > > >();
    }

    { //::ConstantHaematocritSolver< 3 >
        typedef bp::class_< ConstantHaematocritSolver_less__3__greater__wrapper, bp::bases< AbstractHaematocritSolver< 3 > > > ConstantHaematocritSolver3_exposer_t;
        ConstantHaematocritSolver3_exposer_t ConstantHaematocritSolver3_exposer = ConstantHaematocritSolver3_exposer_t( "ConstantHaematocritSolver3", bp::init< >() );
        bp::scope ConstantHaematocritSolver3_scope( ConstantHaematocritSolver3_exposer );
        { //::ConstantHaematocritSolver< 3 >::Calculate
        
            typedef ConstantHaematocritSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( ConstantHaematocritSolver_less__3__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            ConstantHaematocritSolver3_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::ConstantHaematocritSolver< 3 >::Calculate)
                , default_Calculate_function_type(&ConstantHaematocritSolver_less__3__greater__wrapper::default_Calculate) );
        
        }
        { //::ConstantHaematocritSolver< 3 >::Create
        
            typedef ConstantHaematocritSolver< 3 > exported_class_t;
            typedef ::boost::shared_ptr< ConstantHaematocritSolver< 3 > > ( *Create_function_type )(  );
            
            ConstantHaematocritSolver3_exposer.def( 
                "Create"
                , Create_function_type( &::ConstantHaematocritSolver< 3 >::Create ) );
        
        }
        { //::ConstantHaematocritSolver< 3 >::SetHaematocrit
        
            typedef ConstantHaematocritSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetHaematocrit_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            ConstantHaematocritSolver3_exposer.def( 
                "SetHaematocrit"
                , SetHaematocrit_function_type( &::ConstantHaematocritSolver< 3 >::SetHaematocrit )
                , ( bp::arg("haematocrit") ) );
        
        }
        ConstantHaematocritSolver3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< ConstantHaematocritSolver<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< ConstantHaematocritSolver< 3 > >, boost::shared_ptr< AbstractHaematocritSolver< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< ConstantHaematocritSolver< 3 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 3 > > >();
    }

    { //::FlowSolver< 2 >
        typedef bp::class_< FlowSolver< 2 > > FlowSolver2_exposer_t;
        FlowSolver2_exposer_t FlowSolver2_exposer = FlowSolver2_exposer_t( "FlowSolver2", bp::init< >() );
        bp::scope FlowSolver2_scope( FlowSolver2_exposer );
        { //::FlowSolver< 2 >::Create
        
            typedef FlowSolver< 2 > exported_class_t;
            typedef ::boost::shared_ptr< FlowSolver< 2 > > ( *Create_function_type )(  );
            
            FlowSolver2_exposer.def( 
                "Create"
                , Create_function_type( &::FlowSolver< 2 >::Create ) );
        
        }
        { //::FlowSolver< 2 >::SetUp
        
            typedef FlowSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetUp_function_type)(  ) ;
            
            FlowSolver2_exposer.def( 
                "SetUp"
                , SetUp_function_type( &::FlowSolver< 2 >::SetUp ) );
        
        }
        { //::FlowSolver< 2 >::SetUseDirectSolver
        
            typedef FlowSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetUseDirectSolver_function_type)( bool ) ;
            
            FlowSolver2_exposer.def( 
                "SetUseDirectSolver"
                , SetUseDirectSolver_function_type( &::FlowSolver< 2 >::SetUseDirectSolver )
                , ( bp::arg("useDirectSolver") ) );
        
        }
        { //::FlowSolver< 2 >::SetVesselNetwork
        
            typedef FlowSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 2 > > ) ;
            
            FlowSolver2_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::FlowSolver< 2 >::SetVesselNetwork )
                , ( bp::arg("pVesselNetwork") ) );
        
        }
        { //::FlowSolver< 2 >::Solve
        
            typedef FlowSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Solve_function_type)(  ) ;
            
            FlowSolver2_exposer.def( 
                "Solve"
                , Solve_function_type( &::FlowSolver< 2 >::Solve ) );
        
        }
        { //::FlowSolver< 2 >::Update
        
            typedef FlowSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            
            FlowSolver2_exposer.def( 
                "Update"
                , Update_function_type( &::FlowSolver< 2 >::Update )
                , ( bp::arg("runSetup")=(bool)(false) ) );
        
        }
        FlowSolver2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< FlowSolver<2> > >();
    }

    { //::FlowSolver< 3 >
        typedef bp::class_< FlowSolver< 3 > > FlowSolver3_exposer_t;
        FlowSolver3_exposer_t FlowSolver3_exposer = FlowSolver3_exposer_t( "FlowSolver3", bp::init< >() );
        bp::scope FlowSolver3_scope( FlowSolver3_exposer );
        { //::FlowSolver< 3 >::Create
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef ::boost::shared_ptr< FlowSolver< 3 > > ( *Create_function_type )(  );
            
            FlowSolver3_exposer.def( 
                "Create"
                , Create_function_type( &::FlowSolver< 3 >::Create ) );
        
        }
        { //::FlowSolver< 3 >::SetUp
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUp_function_type)(  ) ;
            
            FlowSolver3_exposer.def( 
                "SetUp"
                , SetUp_function_type( &::FlowSolver< 3 >::SetUp ) );
        
        }
        { //::FlowSolver< 3 >::SetUseDirectSolver
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUseDirectSolver_function_type)( bool ) ;
            
            FlowSolver3_exposer.def( 
                "SetUseDirectSolver"
                , SetUseDirectSolver_function_type( &::FlowSolver< 3 >::SetUseDirectSolver )
                , ( bp::arg("useDirectSolver") ) );
        
        }
        { //::FlowSolver< 3 >::SetVesselNetwork
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 3 > > ) ;
            
            FlowSolver3_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::FlowSolver< 3 >::SetVesselNetwork )
                , ( bp::arg("pVesselNetwork") ) );
        
        }
        { //::FlowSolver< 3 >::Solve
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Solve_function_type)(  ) ;
            
            FlowSolver3_exposer.def( 
                "Solve"
                , Solve_function_type( &::FlowSolver< 3 >::Solve ) );
        
        }
        { //::FlowSolver< 3 >::Update
        
            typedef FlowSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)( bool ) ;
            
            FlowSolver3_exposer.def( 
                "Update"
                , Update_function_type( &::FlowSolver< 3 >::Update )
                , ( bp::arg("runSetup")=(bool)(false) ) );
        
        }
        FlowSolver3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< FlowSolver<3> > >();
    }

    { //::MechanicalStimulusCalculator< 2 >
        typedef bp::class_< MechanicalStimulusCalculator_less__2__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 2 > > > MechanicalStimulusCalculator2_exposer_t;
        MechanicalStimulusCalculator2_exposer_t MechanicalStimulusCalculator2_exposer = MechanicalStimulusCalculator2_exposer_t( "MechanicalStimulusCalculator2", bp::init< >() );
        bp::scope MechanicalStimulusCalculator2_scope( MechanicalStimulusCalculator2_exposer );
        { //::MechanicalStimulusCalculator< 2 >::Calculate
        
            typedef MechanicalStimulusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( MechanicalStimulusCalculator_less__2__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            MechanicalStimulusCalculator2_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::MechanicalStimulusCalculator< 2 >::Calculate)
                , default_Calculate_function_type(&MechanicalStimulusCalculator_less__2__greater__wrapper::default_Calculate) );
        
        }
        { //::MechanicalStimulusCalculator< 2 >::Create
        
            typedef MechanicalStimulusCalculator< 2 > exported_class_t;
            typedef ::boost::shared_ptr< MechanicalStimulusCalculator< 2 > > ( *Create_function_type )(  );
            
            MechanicalStimulusCalculator2_exposer.def( 
                "Create"
                , Create_function_type( &::MechanicalStimulusCalculator< 2 >::Create ) );
        
        }
        { //::MechanicalStimulusCalculator< 2 >::GetTauP
        
            typedef MechanicalStimulusCalculator< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetTauP_function_type)(  ) ;
            
            MechanicalStimulusCalculator2_exposer.def( 
                "GetTauP"
                , GetTauP_function_type( &::MechanicalStimulusCalculator< 2 >::GetTauP ) );
        
        }
        { //::MechanicalStimulusCalculator< 2 >::GetTauReference
        
            typedef MechanicalStimulusCalculator< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetTauReference_function_type)(  ) ;
            
            MechanicalStimulusCalculator2_exposer.def( 
                "GetTauReference"
                , GetTauReference_function_type( &::MechanicalStimulusCalculator< 2 >::GetTauReference ) );
        
        }
        { //::MechanicalStimulusCalculator< 2 >::SetTauP
        
            typedef MechanicalStimulusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetTauP_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MechanicalStimulusCalculator2_exposer.def( 
                "SetTauP"
                , SetTauP_function_type( &::MechanicalStimulusCalculator< 2 >::SetTauP )
                , ( bp::arg("tauP") ) );
        
        }
        { //::MechanicalStimulusCalculator< 2 >::SetTauRef
        
            typedef MechanicalStimulusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetTauRef_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MechanicalStimulusCalculator2_exposer.def( 
                "SetTauRef"
                , SetTauRef_function_type( &::MechanicalStimulusCalculator< 2 >::SetTauRef )
                , ( bp::arg("tauRef") ) );
        
        }
        MechanicalStimulusCalculator2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MechanicalStimulusCalculator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< MechanicalStimulusCalculator< 2 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 2 > > >();
    }

    { //::MechanicalStimulusCalculator< 3 >
        typedef bp::class_< MechanicalStimulusCalculator_less__3__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 3 > > > MechanicalStimulusCalculator3_exposer_t;
        MechanicalStimulusCalculator3_exposer_t MechanicalStimulusCalculator3_exposer = MechanicalStimulusCalculator3_exposer_t( "MechanicalStimulusCalculator3", bp::init< >() );
        bp::scope MechanicalStimulusCalculator3_scope( MechanicalStimulusCalculator3_exposer );
        { //::MechanicalStimulusCalculator< 3 >::Calculate
        
            typedef MechanicalStimulusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( MechanicalStimulusCalculator_less__3__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            MechanicalStimulusCalculator3_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::MechanicalStimulusCalculator< 3 >::Calculate)
                , default_Calculate_function_type(&MechanicalStimulusCalculator_less__3__greater__wrapper::default_Calculate) );
        
        }
        { //::MechanicalStimulusCalculator< 3 >::Create
        
            typedef MechanicalStimulusCalculator< 3 > exported_class_t;
            typedef ::boost::shared_ptr< MechanicalStimulusCalculator< 3 > > ( *Create_function_type )(  );
            
            MechanicalStimulusCalculator3_exposer.def( 
                "Create"
                , Create_function_type( &::MechanicalStimulusCalculator< 3 >::Create ) );
        
        }
        { //::MechanicalStimulusCalculator< 3 >::GetTauP
        
            typedef MechanicalStimulusCalculator< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetTauP_function_type)(  ) ;
            
            MechanicalStimulusCalculator3_exposer.def( 
                "GetTauP"
                , GetTauP_function_type( &::MechanicalStimulusCalculator< 3 >::GetTauP ) );
        
        }
        { //::MechanicalStimulusCalculator< 3 >::GetTauReference
        
            typedef MechanicalStimulusCalculator< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetTauReference_function_type)(  ) ;
            
            MechanicalStimulusCalculator3_exposer.def( 
                "GetTauReference"
                , GetTauReference_function_type( &::MechanicalStimulusCalculator< 3 >::GetTauReference ) );
        
        }
        { //::MechanicalStimulusCalculator< 3 >::SetTauP
        
            typedef MechanicalStimulusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetTauP_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MechanicalStimulusCalculator3_exposer.def( 
                "SetTauP"
                , SetTauP_function_type( &::MechanicalStimulusCalculator< 3 >::SetTauP )
                , ( bp::arg("tauP") ) );
        
        }
        { //::MechanicalStimulusCalculator< 3 >::SetTauRef
        
            typedef MechanicalStimulusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetTauRef_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MechanicalStimulusCalculator3_exposer.def( 
                "SetTauRef"
                , SetTauRef_function_type( &::MechanicalStimulusCalculator< 3 >::SetTauRef )
                , ( bp::arg("tauRef") ) );
        
        }
        MechanicalStimulusCalculator3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MechanicalStimulusCalculator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< MechanicalStimulusCalculator< 3 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 3 > > >();
    }

    { //::MetabolicStimulusCalculator< 2 >
        typedef bp::class_< MetabolicStimulusCalculator_less__2__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 2 > > > MetabolicStimulusCalculator2_exposer_t;
        MetabolicStimulusCalculator2_exposer_t MetabolicStimulusCalculator2_exposer = MetabolicStimulusCalculator2_exposer_t( "MetabolicStimulusCalculator2", bp::init< >() );
        bp::scope MetabolicStimulusCalculator2_scope( MetabolicStimulusCalculator2_exposer );
        { //::MetabolicStimulusCalculator< 2 >::Calculate
        
            typedef MetabolicStimulusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( MetabolicStimulusCalculator_less__2__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            MetabolicStimulusCalculator2_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::MetabolicStimulusCalculator< 2 >::Calculate)
                , default_Calculate_function_type(&MetabolicStimulusCalculator_less__2__greater__wrapper::default_Calculate) );
        
        }
        { //::MetabolicStimulusCalculator< 2 >::Create
        
            typedef MetabolicStimulusCalculator< 2 > exported_class_t;
            typedef ::boost::shared_ptr< MetabolicStimulusCalculator< 2 > > ( *Create_function_type )(  );
            
            MetabolicStimulusCalculator2_exposer.def( 
                "Create"
                , Create_function_type( &::MetabolicStimulusCalculator< 2 >::Create ) );
        
        }
        { //::MetabolicStimulusCalculator< 2 >::GetKm
        
            typedef MetabolicStimulusCalculator< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetKm_function_type)(  ) ;
            
            MetabolicStimulusCalculator2_exposer.def( 
                "GetKm"
                , GetKm_function_type( &::MetabolicStimulusCalculator< 2 >::GetKm ) );
        
        }
        { //::MetabolicStimulusCalculator< 2 >::GetMaxStimulus
        
            typedef MetabolicStimulusCalculator< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetMaxStimulus_function_type)(  ) ;
            
            MetabolicStimulusCalculator2_exposer.def( 
                "GetMaxStimulus"
                , GetMaxStimulus_function_type( &::MetabolicStimulusCalculator< 2 >::GetMaxStimulus ) );
        
        }
        { //::MetabolicStimulusCalculator< 2 >::GetQRef
        
            typedef MetabolicStimulusCalculator< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetQRef_function_type)(  ) ;
            
            MetabolicStimulusCalculator2_exposer.def( 
                "GetQRef"
                , GetQRef_function_type( &::MetabolicStimulusCalculator< 2 >::GetQRef ) );
        
        }
        { //::MetabolicStimulusCalculator< 2 >::SetKm
        
            typedef MetabolicStimulusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetKm_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MetabolicStimulusCalculator2_exposer.def( 
                "SetKm"
                , SetKm_function_type( &::MetabolicStimulusCalculator< 2 >::SetKm )
                , ( bp::arg("km") ) );
        
        }
        { //::MetabolicStimulusCalculator< 2 >::SetMaxStimulus
        
            typedef MetabolicStimulusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetMaxStimulus_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MetabolicStimulusCalculator2_exposer.def( 
                "SetMaxStimulus"
                , SetMaxStimulus_function_type( &::MetabolicStimulusCalculator< 2 >::SetMaxStimulus )
                , ( bp::arg("maxStimulus") ) );
        
        }
        { //::MetabolicStimulusCalculator< 2 >::SetQRef
        
            typedef MetabolicStimulusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetQRef_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MetabolicStimulusCalculator2_exposer.def( 
                "SetQRef"
                , SetQRef_function_type( &::MetabolicStimulusCalculator< 2 >::SetQRef )
                , ( bp::arg("qRef") ) );
        
        }
        MetabolicStimulusCalculator2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MetabolicStimulusCalculator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< MetabolicStimulusCalculator< 2 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 2 > > >();
    }

    { //::MetabolicStimulusCalculator< 3 >
        typedef bp::class_< MetabolicStimulusCalculator_less__3__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 3 > > > MetabolicStimulusCalculator3_exposer_t;
        MetabolicStimulusCalculator3_exposer_t MetabolicStimulusCalculator3_exposer = MetabolicStimulusCalculator3_exposer_t( "MetabolicStimulusCalculator3", bp::init< >() );
        bp::scope MetabolicStimulusCalculator3_scope( MetabolicStimulusCalculator3_exposer );
        { //::MetabolicStimulusCalculator< 3 >::Calculate
        
            typedef MetabolicStimulusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( MetabolicStimulusCalculator_less__3__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            MetabolicStimulusCalculator3_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::MetabolicStimulusCalculator< 3 >::Calculate)
                , default_Calculate_function_type(&MetabolicStimulusCalculator_less__3__greater__wrapper::default_Calculate) );
        
        }
        { //::MetabolicStimulusCalculator< 3 >::Create
        
            typedef MetabolicStimulusCalculator< 3 > exported_class_t;
            typedef ::boost::shared_ptr< MetabolicStimulusCalculator< 3 > > ( *Create_function_type )(  );
            
            MetabolicStimulusCalculator3_exposer.def( 
                "Create"
                , Create_function_type( &::MetabolicStimulusCalculator< 3 >::Create ) );
        
        }
        { //::MetabolicStimulusCalculator< 3 >::GetKm
        
            typedef MetabolicStimulusCalculator< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetKm_function_type)(  ) ;
            
            MetabolicStimulusCalculator3_exposer.def( 
                "GetKm"
                , GetKm_function_type( &::MetabolicStimulusCalculator< 3 >::GetKm ) );
        
        }
        { //::MetabolicStimulusCalculator< 3 >::GetMaxStimulus
        
            typedef MetabolicStimulusCalculator< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetMaxStimulus_function_type)(  ) ;
            
            MetabolicStimulusCalculator3_exposer.def( 
                "GetMaxStimulus"
                , GetMaxStimulus_function_type( &::MetabolicStimulusCalculator< 3 >::GetMaxStimulus ) );
        
        }
        { //::MetabolicStimulusCalculator< 3 >::GetQRef
        
            typedef MetabolicStimulusCalculator< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetQRef_function_type)(  ) ;
            
            MetabolicStimulusCalculator3_exposer.def( 
                "GetQRef"
                , GetQRef_function_type( &::MetabolicStimulusCalculator< 3 >::GetQRef ) );
        
        }
        { //::MetabolicStimulusCalculator< 3 >::SetKm
        
            typedef MetabolicStimulusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetKm_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MetabolicStimulusCalculator3_exposer.def( 
                "SetKm"
                , SetKm_function_type( &::MetabolicStimulusCalculator< 3 >::SetKm )
                , ( bp::arg("km") ) );
        
        }
        { //::MetabolicStimulusCalculator< 3 >::SetMaxStimulus
        
            typedef MetabolicStimulusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetMaxStimulus_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MetabolicStimulusCalculator3_exposer.def( 
                "SetMaxStimulus"
                , SetMaxStimulus_function_type( &::MetabolicStimulusCalculator< 3 >::SetMaxStimulus )
                , ( bp::arg("maxStimulus") ) );
        
        }
        { //::MetabolicStimulusCalculator< 3 >::SetQRef
        
            typedef MetabolicStimulusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetQRef_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MetabolicStimulusCalculator3_exposer.def( 
                "SetQRef"
                , SetQRef_function_type( &::MetabolicStimulusCalculator< 3 >::SetQRef )
                , ( bp::arg("qRef") ) );
        
        }
        MetabolicStimulusCalculator3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MetabolicStimulusCalculator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< MetabolicStimulusCalculator< 3 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 3 > > >();
    }

    { //::RadiusCalculator< 2 >
        typedef bp::class_< RadiusCalculator_less__2__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 2 > > > RadiusCalculator2_exposer_t;
        RadiusCalculator2_exposer_t RadiusCalculator2_exposer = RadiusCalculator2_exposer_t( "RadiusCalculator2", bp::init< >() );
        bp::scope RadiusCalculator2_scope( RadiusCalculator2_exposer );
        { //::RadiusCalculator< 2 >::Calculate
        
            typedef RadiusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( RadiusCalculator_less__2__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            RadiusCalculator2_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::RadiusCalculator< 2 >::Calculate)
                , default_Calculate_function_type(&RadiusCalculator_less__2__greater__wrapper::default_Calculate) );
        
        }
        { //::RadiusCalculator< 2 >::SetMaxRadius
        
            typedef RadiusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetMaxRadius_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RadiusCalculator2_exposer.def( 
                "SetMaxRadius"
                , SetMaxRadius_function_type( &::RadiusCalculator< 2 >::SetMaxRadius )
                , ( bp::arg("maxRadius") ) );
        
        }
        { //::RadiusCalculator< 2 >::SetMinRadius
        
            typedef RadiusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetMinRadius_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RadiusCalculator2_exposer.def( 
                "SetMinRadius"
                , SetMinRadius_function_type( &::RadiusCalculator< 2 >::SetMinRadius )
                , ( bp::arg("minRadius") ) );
        
        }
        { //::RadiusCalculator< 2 >::SetTimestep
        
            typedef RadiusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetTimestep_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RadiusCalculator2_exposer.def( 
                "SetTimestep"
                , SetTimestep_function_type( &::RadiusCalculator< 2 >::SetTimestep )
                , ( bp::arg("dt") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< RadiusCalculator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< RadiusCalculator< 2 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 2 > > >();
    }

    { //::RadiusCalculator< 3 >
        typedef bp::class_< RadiusCalculator_less__3__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 3 > > > RadiusCalculator3_exposer_t;
        RadiusCalculator3_exposer_t RadiusCalculator3_exposer = RadiusCalculator3_exposer_t( "RadiusCalculator3", bp::init< >() );
        bp::scope RadiusCalculator3_scope( RadiusCalculator3_exposer );
        { //::RadiusCalculator< 3 >::Calculate
        
            typedef RadiusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( RadiusCalculator_less__3__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            RadiusCalculator3_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::RadiusCalculator< 3 >::Calculate)
                , default_Calculate_function_type(&RadiusCalculator_less__3__greater__wrapper::default_Calculate) );
        
        }
        { //::RadiusCalculator< 3 >::SetMaxRadius
        
            typedef RadiusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetMaxRadius_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RadiusCalculator3_exposer.def( 
                "SetMaxRadius"
                , SetMaxRadius_function_type( &::RadiusCalculator< 3 >::SetMaxRadius )
                , ( bp::arg("maxRadius") ) );
        
        }
        { //::RadiusCalculator< 3 >::SetMinRadius
        
            typedef RadiusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetMinRadius_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RadiusCalculator3_exposer.def( 
                "SetMinRadius"
                , SetMinRadius_function_type( &::RadiusCalculator< 3 >::SetMinRadius )
                , ( bp::arg("minRadius") ) );
        
        }
        { //::RadiusCalculator< 3 >::SetTimestep
        
            typedef RadiusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetTimestep_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RadiusCalculator3_exposer.def( 
                "SetTimestep"
                , SetTimestep_function_type( &::RadiusCalculator< 3 >::SetTimestep )
                , ( bp::arg("dt") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< RadiusCalculator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< RadiusCalculator< 3 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 3 > > >();
    }

    { //::ShrinkingStimulusCalculator< 2 >
        typedef bp::class_< ShrinkingStimulusCalculator_less__2__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 2 > > > ShrinkingStimulusCalculator2_exposer_t;
        ShrinkingStimulusCalculator2_exposer_t ShrinkingStimulusCalculator2_exposer = ShrinkingStimulusCalculator2_exposer_t( "ShrinkingStimulusCalculator2", bp::init< >() );
        bp::scope ShrinkingStimulusCalculator2_scope( ShrinkingStimulusCalculator2_exposer );
        { //::ShrinkingStimulusCalculator< 2 >::Calculate
        
            typedef ShrinkingStimulusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( ShrinkingStimulusCalculator_less__2__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            ShrinkingStimulusCalculator2_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::ShrinkingStimulusCalculator< 2 >::Calculate)
                , default_Calculate_function_type(&ShrinkingStimulusCalculator_less__2__greater__wrapper::default_Calculate) );
        
        }
        { //::ShrinkingStimulusCalculator< 2 >::Create
        
            typedef ShrinkingStimulusCalculator< 2 > exported_class_t;
            typedef ::boost::shared_ptr< ShrinkingStimulusCalculator< 2 > > ( *Create_function_type )(  );
            
            ShrinkingStimulusCalculator2_exposer.def( 
                "Create"
                , Create_function_type( &::ShrinkingStimulusCalculator< 2 >::Create ) );
        
        }
        { //::ShrinkingStimulusCalculator< 2 >::GetStimulus
        
            typedef ShrinkingStimulusCalculator< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetStimulus_function_type)(  ) ;
            
            ShrinkingStimulusCalculator2_exposer.def( 
                "GetStimulus"
                , GetStimulus_function_type( &::ShrinkingStimulusCalculator< 2 >::GetStimulus ) );
        
        }
        { //::ShrinkingStimulusCalculator< 2 >::SetStimulus
        
            typedef ShrinkingStimulusCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetStimulus_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            ShrinkingStimulusCalculator2_exposer.def( 
                "SetStimulus"
                , SetStimulus_function_type( &::ShrinkingStimulusCalculator< 2 >::SetStimulus )
                , ( bp::arg("stimulus") ) );
        
        }
        ShrinkingStimulusCalculator2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< ShrinkingStimulusCalculator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< ShrinkingStimulusCalculator< 2 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 2 > > >();
    }

    { //::ShrinkingStimulusCalculator< 3 >
        typedef bp::class_< ShrinkingStimulusCalculator_less__3__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 3 > > > ShrinkingStimulusCalculator3_exposer_t;
        ShrinkingStimulusCalculator3_exposer_t ShrinkingStimulusCalculator3_exposer = ShrinkingStimulusCalculator3_exposer_t( "ShrinkingStimulusCalculator3", bp::init< >() );
        bp::scope ShrinkingStimulusCalculator3_scope( ShrinkingStimulusCalculator3_exposer );
        { //::ShrinkingStimulusCalculator< 3 >::Calculate
        
            typedef ShrinkingStimulusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( ShrinkingStimulusCalculator_less__3__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            ShrinkingStimulusCalculator3_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::ShrinkingStimulusCalculator< 3 >::Calculate)
                , default_Calculate_function_type(&ShrinkingStimulusCalculator_less__3__greater__wrapper::default_Calculate) );
        
        }
        { //::ShrinkingStimulusCalculator< 3 >::Create
        
            typedef ShrinkingStimulusCalculator< 3 > exported_class_t;
            typedef ::boost::shared_ptr< ShrinkingStimulusCalculator< 3 > > ( *Create_function_type )(  );
            
            ShrinkingStimulusCalculator3_exposer.def( 
                "Create"
                , Create_function_type( &::ShrinkingStimulusCalculator< 3 >::Create ) );
        
        }
        { //::ShrinkingStimulusCalculator< 3 >::GetStimulus
        
            typedef ShrinkingStimulusCalculator< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetStimulus_function_type)(  ) ;
            
            ShrinkingStimulusCalculator3_exposer.def( 
                "GetStimulus"
                , GetStimulus_function_type( &::ShrinkingStimulusCalculator< 3 >::GetStimulus ) );
        
        }
        { //::ShrinkingStimulusCalculator< 3 >::SetStimulus
        
            typedef ShrinkingStimulusCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetStimulus_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            ShrinkingStimulusCalculator3_exposer.def( 
                "SetStimulus"
                , SetStimulus_function_type( &::ShrinkingStimulusCalculator< 3 >::SetStimulus )
                , ( bp::arg("stimulus") ) );
        
        }
        ShrinkingStimulusCalculator3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< ShrinkingStimulusCalculator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< ShrinkingStimulusCalculator< 3 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 3 > > >();
    }

    { //::StructuralAdaptationSolver< 2 >
        typedef bp::class_< StructuralAdaptationSolver_less__2__greater__wrapper, bp::bases< AbstractStructuralAdaptationSolver< 2 > > > StructuralAdaptationSolver2_exposer_t;
        StructuralAdaptationSolver2_exposer_t StructuralAdaptationSolver2_exposer = StructuralAdaptationSolver2_exposer_t( "StructuralAdaptationSolver2", bp::init< >() );
        bp::scope StructuralAdaptationSolver2_scope( StructuralAdaptationSolver2_exposer );
        { //::StructuralAdaptationSolver< 2 >::AddPostFlowSolveCalculator
        
            typedef StructuralAdaptationSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddPostFlowSolveCalculator_function_type)( ::boost::shared_ptr< AbstractVesselNetworkCalculator< 2 > > ) ;
            
            StructuralAdaptationSolver2_exposer.def( 
                "AddPostFlowSolveCalculator"
                , AddPostFlowSolveCalculator_function_type( &::StructuralAdaptationSolver< 2 >::AddPostFlowSolveCalculator )
                , ( bp::arg("pCalculator") ) );
        
        }
        { //::StructuralAdaptationSolver< 2 >::AddPreFlowSolveCalculator
        
            typedef StructuralAdaptationSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddPreFlowSolveCalculator_function_type)( ::boost::shared_ptr< AbstractVesselNetworkCalculator< 2 > > ) ;
            
            StructuralAdaptationSolver2_exposer.def( 
                "AddPreFlowSolveCalculator"
                , AddPreFlowSolveCalculator_function_type( &::StructuralAdaptationSolver< 2 >::AddPreFlowSolveCalculator )
                , ( bp::arg("pCalculator") ) );
        
        }
        { //::StructuralAdaptationSolver< 2 >::Create
        
            typedef StructuralAdaptationSolver< 2 > exported_class_t;
            typedef ::boost::shared_ptr< StructuralAdaptationSolver< 2 > > ( *Create_function_type )(  );
            
            StructuralAdaptationSolver2_exposer.def( 
                "Create"
                , Create_function_type( &::StructuralAdaptationSolver< 2 >::Create ) );
        
        }
        { //::StructuralAdaptationSolver< 2 >::GetFlowSolver
        
            typedef StructuralAdaptationSolver< 2 > exported_class_t;
            typedef ::boost::shared_ptr< FlowSolver< 2 > > ( exported_class_t::*GetFlowSolver_function_type)(  ) ;
            
            StructuralAdaptationSolver2_exposer.def( 
                "GetFlowSolver"
                , GetFlowSolver_function_type( &::StructuralAdaptationSolver< 2 >::GetFlowSolver ) );
        
        }
        { //::StructuralAdaptationSolver< 2 >::Iterate
        
            typedef StructuralAdaptationSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Iterate_function_type)(  ) ;
            typedef void ( StructuralAdaptationSolver_less__2__greater__wrapper::*default_Iterate_function_type)(  ) ;
            
            StructuralAdaptationSolver2_exposer.def( 
                "Iterate"
                , Iterate_function_type(&::StructuralAdaptationSolver< 2 >::Iterate)
                , default_Iterate_function_type(&StructuralAdaptationSolver_less__2__greater__wrapper::default_Iterate) );
        
        }
        { //::StructuralAdaptationSolver< 2 >::SetFlowSolver
        
            typedef StructuralAdaptationSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetFlowSolver_function_type)( ::boost::shared_ptr< FlowSolver< 2 > > ) ;
            
            StructuralAdaptationSolver2_exposer.def( 
                "SetFlowSolver"
                , SetFlowSolver_function_type( &::StructuralAdaptationSolver< 2 >::SetFlowSolver )
                , ( bp::arg("pSolver") ) );
        
        }
        { //::StructuralAdaptationSolver< 2 >::SetRadiusCalculator
        
            typedef StructuralAdaptationSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetRadiusCalculator_function_type)( ::boost::shared_ptr< RadiusCalculator< 2 > > ) ;
            
            StructuralAdaptationSolver2_exposer.def( 
                "SetRadiusCalculator"
                , SetRadiusCalculator_function_type( &::StructuralAdaptationSolver< 2 >::SetRadiusCalculator )
                , ( bp::arg("pCalculator") ) );
        
        }
        { //::StructuralAdaptationSolver< 2 >::UpdateFlowSolver
        
            typedef StructuralAdaptationSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateFlowSolver_function_type)( bool ) ;
            
            StructuralAdaptationSolver2_exposer.def( 
                "UpdateFlowSolver"
                , UpdateFlowSolver_function_type( &::StructuralAdaptationSolver< 2 >::UpdateFlowSolver )
                , ( bp::arg("doFullReset")=(bool)(false) ) );
        
        }
        { //::AbstractStructuralAdaptationSolver< 2 >::Write
        
            typedef StructuralAdaptationSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Write_function_type)(  ) ;
            typedef void ( StructuralAdaptationSolver_less__2__greater__wrapper::*default_Write_function_type)(  ) ;
            
            StructuralAdaptationSolver2_exposer.def( 
                "Write"
                , Write_function_type(&::AbstractStructuralAdaptationSolver< 2 >::Write)
                , default_Write_function_type(&StructuralAdaptationSolver_less__2__greater__wrapper::default_Write) );
        
        }
        StructuralAdaptationSolver2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< StructuralAdaptationSolver<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< StructuralAdaptationSolver< 2 > >, boost::shared_ptr< AbstractStructuralAdaptationSolver< 2 > > >();
    }

    { //::StructuralAdaptationSolver< 3 >
        typedef bp::class_< StructuralAdaptationSolver_less__3__greater__wrapper, bp::bases< AbstractStructuralAdaptationSolver< 3 > > > StructuralAdaptationSolver3_exposer_t;
        StructuralAdaptationSolver3_exposer_t StructuralAdaptationSolver3_exposer = StructuralAdaptationSolver3_exposer_t( "StructuralAdaptationSolver3", bp::init< >() );
        bp::scope StructuralAdaptationSolver3_scope( StructuralAdaptationSolver3_exposer );
        { //::StructuralAdaptationSolver< 3 >::AddPostFlowSolveCalculator
        
            typedef StructuralAdaptationSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddPostFlowSolveCalculator_function_type)( ::boost::shared_ptr< AbstractVesselNetworkCalculator< 3 > > ) ;
            
            StructuralAdaptationSolver3_exposer.def( 
                "AddPostFlowSolveCalculator"
                , AddPostFlowSolveCalculator_function_type( &::StructuralAdaptationSolver< 3 >::AddPostFlowSolveCalculator )
                , ( bp::arg("pCalculator") ) );
        
        }
        { //::StructuralAdaptationSolver< 3 >::AddPreFlowSolveCalculator
        
            typedef StructuralAdaptationSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddPreFlowSolveCalculator_function_type)( ::boost::shared_ptr< AbstractVesselNetworkCalculator< 3 > > ) ;
            
            StructuralAdaptationSolver3_exposer.def( 
                "AddPreFlowSolveCalculator"
                , AddPreFlowSolveCalculator_function_type( &::StructuralAdaptationSolver< 3 >::AddPreFlowSolveCalculator )
                , ( bp::arg("pCalculator") ) );
        
        }
        { //::StructuralAdaptationSolver< 3 >::Create
        
            typedef StructuralAdaptationSolver< 3 > exported_class_t;
            typedef ::boost::shared_ptr< StructuralAdaptationSolver< 3 > > ( *Create_function_type )(  );
            
            StructuralAdaptationSolver3_exposer.def( 
                "Create"
                , Create_function_type( &::StructuralAdaptationSolver< 3 >::Create ) );
        
        }
        { //::StructuralAdaptationSolver< 3 >::GetFlowSolver
        
            typedef StructuralAdaptationSolver< 3 > exported_class_t;
            typedef ::boost::shared_ptr< FlowSolver< 3 > > ( exported_class_t::*GetFlowSolver_function_type)(  ) ;
            
            StructuralAdaptationSolver3_exposer.def( 
                "GetFlowSolver"
                , GetFlowSolver_function_type( &::StructuralAdaptationSolver< 3 >::GetFlowSolver ) );
        
        }
        { //::StructuralAdaptationSolver< 3 >::Iterate
        
            typedef StructuralAdaptationSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Iterate_function_type)(  ) ;
            typedef void ( StructuralAdaptationSolver_less__3__greater__wrapper::*default_Iterate_function_type)(  ) ;
            
            StructuralAdaptationSolver3_exposer.def( 
                "Iterate"
                , Iterate_function_type(&::StructuralAdaptationSolver< 3 >::Iterate)
                , default_Iterate_function_type(&StructuralAdaptationSolver_less__3__greater__wrapper::default_Iterate) );
        
        }
        { //::StructuralAdaptationSolver< 3 >::SetFlowSolver
        
            typedef StructuralAdaptationSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetFlowSolver_function_type)( ::boost::shared_ptr< FlowSolver< 3 > > ) ;
            
            StructuralAdaptationSolver3_exposer.def( 
                "SetFlowSolver"
                , SetFlowSolver_function_type( &::StructuralAdaptationSolver< 3 >::SetFlowSolver )
                , ( bp::arg("pSolver") ) );
        
        }
        { //::StructuralAdaptationSolver< 3 >::SetRadiusCalculator
        
            typedef StructuralAdaptationSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRadiusCalculator_function_type)( ::boost::shared_ptr< RadiusCalculator< 3 > > ) ;
            
            StructuralAdaptationSolver3_exposer.def( 
                "SetRadiusCalculator"
                , SetRadiusCalculator_function_type( &::StructuralAdaptationSolver< 3 >::SetRadiusCalculator )
                , ( bp::arg("pCalculator") ) );
        
        }
        { //::StructuralAdaptationSolver< 3 >::UpdateFlowSolver
        
            typedef StructuralAdaptationSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateFlowSolver_function_type)( bool ) ;
            
            StructuralAdaptationSolver3_exposer.def( 
                "UpdateFlowSolver"
                , UpdateFlowSolver_function_type( &::StructuralAdaptationSolver< 3 >::UpdateFlowSolver )
                , ( bp::arg("doFullReset")=(bool)(false) ) );
        
        }
        { //::AbstractStructuralAdaptationSolver< 3 >::Write
        
            typedef StructuralAdaptationSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Write_function_type)(  ) ;
            typedef void ( StructuralAdaptationSolver_less__3__greater__wrapper::*default_Write_function_type)(  ) ;
            
            StructuralAdaptationSolver3_exposer.def( 
                "Write"
                , Write_function_type(&::AbstractStructuralAdaptationSolver< 3 >::Write)
                , default_Write_function_type(&StructuralAdaptationSolver_less__3__greater__wrapper::default_Write) );
        
        }
        StructuralAdaptationSolver3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< StructuralAdaptationSolver<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< StructuralAdaptationSolver< 3 > >, boost::shared_ptr< AbstractStructuralAdaptationSolver< 3 > > >();
    }

    { //::VesselImpedanceCalculator< 2 >
        typedef bp::class_< VesselImpedanceCalculator_less__2__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 2 > > > VesselImpedanceCalculator2_exposer_t;
        VesselImpedanceCalculator2_exposer_t VesselImpedanceCalculator2_exposer = VesselImpedanceCalculator2_exposer_t( "VesselImpedanceCalculator2", bp::init< >() );
        bp::scope VesselImpedanceCalculator2_scope( VesselImpedanceCalculator2_exposer );
        { //::VesselImpedanceCalculator< 2 >::Calculate
        
            typedef VesselImpedanceCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( VesselImpedanceCalculator_less__2__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            VesselImpedanceCalculator2_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::VesselImpedanceCalculator< 2 >::Calculate)
                , default_Calculate_function_type(&VesselImpedanceCalculator_less__2__greater__wrapper::default_Calculate) );
        
        }
        { //::VesselImpedanceCalculator< 2 >::Create
        
            typedef VesselImpedanceCalculator< 2 > exported_class_t;
            typedef ::boost::shared_ptr< VesselImpedanceCalculator< 2 > > ( *Create_function_type )(  );
            
            VesselImpedanceCalculator2_exposer.def( 
                "Create"
                , Create_function_type( &::VesselImpedanceCalculator< 2 >::Create ) );
        
        }
        VesselImpedanceCalculator2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< VesselImpedanceCalculator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselImpedanceCalculator< 2 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 2 > > >();
    }

    { //::VesselImpedanceCalculator< 3 >
        typedef bp::class_< VesselImpedanceCalculator_less__3__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 3 > > > VesselImpedanceCalculator3_exposer_t;
        VesselImpedanceCalculator3_exposer_t VesselImpedanceCalculator3_exposer = VesselImpedanceCalculator3_exposer_t( "VesselImpedanceCalculator3", bp::init< >() );
        bp::scope VesselImpedanceCalculator3_scope( VesselImpedanceCalculator3_exposer );
        { //::VesselImpedanceCalculator< 3 >::Calculate
        
            typedef VesselImpedanceCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( VesselImpedanceCalculator_less__3__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            VesselImpedanceCalculator3_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::VesselImpedanceCalculator< 3 >::Calculate)
                , default_Calculate_function_type(&VesselImpedanceCalculator_less__3__greater__wrapper::default_Calculate) );
        
        }
        { //::VesselImpedanceCalculator< 3 >::Create
        
            typedef VesselImpedanceCalculator< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VesselImpedanceCalculator< 3 > > ( *Create_function_type )(  );
            
            VesselImpedanceCalculator3_exposer.def( 
                "Create"
                , Create_function_type( &::VesselImpedanceCalculator< 3 >::Create ) );
        
        }
        VesselImpedanceCalculator3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< VesselImpedanceCalculator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselImpedanceCalculator< 3 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 3 > > >();
    }

    { //::ViscosityCalculator< 2 >
        typedef bp::class_< ViscosityCalculator_less__2__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 2 > > > ViscosityCalculator2_exposer_t;
        ViscosityCalculator2_exposer_t ViscosityCalculator2_exposer = ViscosityCalculator2_exposer_t( "ViscosityCalculator2", bp::init< >() );
        bp::scope ViscosityCalculator2_scope( ViscosityCalculator2_exposer );
        { //::ViscosityCalculator< 2 >::Calculate
        
            typedef ViscosityCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( ViscosityCalculator_less__2__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            ViscosityCalculator2_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::ViscosityCalculator< 2 >::Calculate)
                , default_Calculate_function_type(&ViscosityCalculator_less__2__greater__wrapper::default_Calculate) );
        
        }
        { //::ViscosityCalculator< 2 >::Create
        
            typedef ViscosityCalculator< 2 > exported_class_t;
            typedef ::boost::shared_ptr< ViscosityCalculator< 2 > > ( *Create_function_type )(  );
            
            ViscosityCalculator2_exposer.def( 
                "Create"
                , Create_function_type( &::ViscosityCalculator< 2 >::Create ) );
        
        }
        { //::ViscosityCalculator< 2 >::SetPlasmaViscosity
        
            typedef ViscosityCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetPlasmaViscosity_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            ViscosityCalculator2_exposer.def( 
                "SetPlasmaViscosity"
                , SetPlasmaViscosity_function_type( &::ViscosityCalculator< 2 >::SetPlasmaViscosity )
                , ( bp::arg("viscosity") ) );
        
        }
        ViscosityCalculator2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< ViscosityCalculator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< ViscosityCalculator< 2 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 2 > > >();
    }

    { //::ViscosityCalculator< 3 >
        typedef bp::class_< ViscosityCalculator_less__3__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 3 > > > ViscosityCalculator3_exposer_t;
        ViscosityCalculator3_exposer_t ViscosityCalculator3_exposer = ViscosityCalculator3_exposer_t( "ViscosityCalculator3", bp::init< >() );
        bp::scope ViscosityCalculator3_scope( ViscosityCalculator3_exposer );
        { //::ViscosityCalculator< 3 >::Calculate
        
            typedef ViscosityCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( ViscosityCalculator_less__3__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            ViscosityCalculator3_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::ViscosityCalculator< 3 >::Calculate)
                , default_Calculate_function_type(&ViscosityCalculator_less__3__greater__wrapper::default_Calculate) );
        
        }
        { //::ViscosityCalculator< 3 >::Create
        
            typedef ViscosityCalculator< 3 > exported_class_t;
            typedef ::boost::shared_ptr< ViscosityCalculator< 3 > > ( *Create_function_type )(  );
            
            ViscosityCalculator3_exposer.def( 
                "Create"
                , Create_function_type( &::ViscosityCalculator< 3 >::Create ) );
        
        }
        { //::ViscosityCalculator< 3 >::SetPlasmaViscosity
        
            typedef ViscosityCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetPlasmaViscosity_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            ViscosityCalculator3_exposer.def( 
                "SetPlasmaViscosity"
                , SetPlasmaViscosity_function_type( &::ViscosityCalculator< 3 >::SetPlasmaViscosity )
                , ( bp::arg("viscosity") ) );
        
        }
        ViscosityCalculator3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< ViscosityCalculator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< ViscosityCalculator< 3 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 3 > > >();
    }

    { //::WallShearStressCalculator< 2 >
        typedef bp::class_< WallShearStressCalculator_less__2__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 2 > > > WallShearStressCalculator2_exposer_t;
        WallShearStressCalculator2_exposer_t WallShearStressCalculator2_exposer = WallShearStressCalculator2_exposer_t( "WallShearStressCalculator2", bp::init< >() );
        bp::scope WallShearStressCalculator2_scope( WallShearStressCalculator2_exposer );
        { //::WallShearStressCalculator< 2 >::Calculate
        
            typedef WallShearStressCalculator< 2 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( WallShearStressCalculator_less__2__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            WallShearStressCalculator2_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::WallShearStressCalculator< 2 >::Calculate)
                , default_Calculate_function_type(&WallShearStressCalculator_less__2__greater__wrapper::default_Calculate) );
        
        }
        { //::WallShearStressCalculator< 2 >::Create
        
            typedef WallShearStressCalculator< 2 > exported_class_t;
            typedef ::boost::shared_ptr< WallShearStressCalculator< 2 > > ( *Create_function_type )(  );
            
            WallShearStressCalculator2_exposer.def( 
                "Create"
                , Create_function_type( &::WallShearStressCalculator< 2 >::Create ) );
        
        }
        WallShearStressCalculator2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< WallShearStressCalculator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< WallShearStressCalculator< 2 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 2 > > >();
    }

    { //::WallShearStressCalculator< 3 >
        typedef bp::class_< WallShearStressCalculator_less__3__greater__wrapper, bp::bases< AbstractVesselNetworkCalculator< 3 > > > WallShearStressCalculator3_exposer_t;
        WallShearStressCalculator3_exposer_t WallShearStressCalculator3_exposer = WallShearStressCalculator3_exposer_t( "WallShearStressCalculator3", bp::init< >() );
        bp::scope WallShearStressCalculator3_scope( WallShearStressCalculator3_exposer );
        { //::WallShearStressCalculator< 3 >::Calculate
        
            typedef WallShearStressCalculator< 3 > exported_class_t;
            typedef void ( exported_class_t::*Calculate_function_type)(  ) ;
            typedef void ( WallShearStressCalculator_less__3__greater__wrapper::*default_Calculate_function_type)(  ) ;
            
            WallShearStressCalculator3_exposer.def( 
                "Calculate"
                , Calculate_function_type(&::WallShearStressCalculator< 3 >::Calculate)
                , default_Calculate_function_type(&WallShearStressCalculator_less__3__greater__wrapper::default_Calculate) );
        
        }
        { //::WallShearStressCalculator< 3 >::Create
        
            typedef WallShearStressCalculator< 3 > exported_class_t;
            typedef ::boost::shared_ptr< WallShearStressCalculator< 3 > > ( *Create_function_type )(  );
            
            WallShearStressCalculator3_exposer.def( 
                "Create"
                , Create_function_type( &::WallShearStressCalculator< 3 >::Create ) );
        
        }
        WallShearStressCalculator3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< WallShearStressCalculator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< WallShearStressCalculator< 3 > >, boost::shared_ptr< AbstractVesselNetworkCalculator< 3 > > >();
    }
}
