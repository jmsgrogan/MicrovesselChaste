/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

// This file has been generated by Py++.

// Copyright (c) 2003 Raoul M. Gough
//
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy
// at http://www.boost.org/LICENSE_1_0.txt)
//
// Header file element_proxy_traits.hpp
//
// Note: element_proxy.hpp must be included before this header
//
// This is a separate header so that element_proxy.hpp is not
// dependant on register_ptr_to_python.hpp. This avoids a problem with
// two-phase name lookup, where register_ptr_to_python must be
// included *after* the element_proxy overload of boost::get_pointer
// is declared.
//
// History
// =======
// 2003/10/23   rmg     File creation
// 2008/12/08   Roman   Change indexing suite layout
//
// $Id: element_proxy_traits.hpp,v 1.1.2.5 2003/12/05 17:36:14 raoulgough Exp $
//

#ifndef BOOST_PYTHON_INDEXING_ELEMENT_PROXY_TRAITS_HPP
#define BOOST_PYTHON_INDEXING_ELEMENT_PROXY_TRAITS_HPP

#include <indexing_suite/element_proxy.hpp>
#include <indexing_suite/value_traits.hpp>
#include <boost/python/register_ptr_to_python.hpp>
#include <boost/python/implicit.hpp>

namespace boost { namespace python { namespace indexing {
  template<typename ContainerProxy>
  struct element_proxy_traits
    : public value_traits<
          BOOST_DEDUCED_TYPENAME ContainerProxy::raw_value_type>
  {
    typedef element_proxy<ContainerProxy> element_proxy_type;
    typedef typename ContainerProxy::raw_value_type raw_value_type;
    typedef value_traits<raw_value_type> base_type;

    // Wrap the base class versions of the comparisons using
    // indirection
    struct less
      : std::binary_function<element_proxy_type, element_proxy_type, bool>
    {
      typename base_type::less m_base_compare;

      bool operator()(
          element_proxy_type const &p1, element_proxy_type const &p2) const
      {
        return m_base_compare (*p1, *p2);
      }
    };

    struct equal_to
      : std::binary_function<raw_value_type, element_proxy_type, bool>
    {
      // First param is raw_value_type to interface smoothly with the
      // bind1st used in default_algorithms::find

      typename base_type::equal_to m_base_compare;

      bool operator()(
          raw_value_type const &v, element_proxy_type const &p) const
      {
        return m_base_compare (v, *p);
      }
    };

    template<typename PythonClass, typename Policy>
    static void visit_container_class (PythonClass &, Policy const &)
    {
      register_ptr_to_python<element_proxy_type>();
      implicitly_convertible<raw_value_type, element_proxy_type>();
    }
  };

#if !defined (BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
  // value_traits partial specialization for element_proxy instances
  template<typename ContainerProxy>
  struct value_traits<element_proxy<ContainerProxy> >
    : element_proxy_traits<ContainerProxy>
  {
  };
#endif
} } }

#endif // BOOST_PYTHON_INDEXING_ELEMENT_PROXY_TRAITS_HPP



