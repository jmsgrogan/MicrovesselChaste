// This file has been generated by Py++.

#include "boost/python.hpp"

#include "indexing_suite/value_traits.hpp"

#include "indexing_suite/container_suite.hpp"

#include "indexing_suite/vector.hpp"

#include "mesh_headers.hpp"

namespace bp = boost::python;

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< DimensionalChastePoint< 2 > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< DimensionalChastePoint< 3 > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::numeric::ublas::c_vector< double, 2 > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::numeric::ublas::c_vector< double, 3 > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< boost::shared_ptr<Cell> > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< boost::shared_ptr<VesselNode<2> > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< boost::shared_ptr<VesselNode<3> > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< boost::shared_ptr<VesselSegment<2> > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< boost::shared_ptr<VesselSegment<3> > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< std::vector< unsigned int > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

BOOST_PYTHON_MODULE(_chaste_project_MicrovesselChaste_mesh){
    { //::std::vector< unsigned int >
        typedef bp::class_< std::vector< unsigned int > > vector_less__unsigned_int__greater__exposer_t;
        vector_less__unsigned_int__greater__exposer_t vector_less__unsigned_int__greater__exposer = vector_less__unsigned_int__greater__exposer_t( "vector_less__unsigned_int__greater_" );
        bp::scope vector_less__unsigned_int__greater__scope( vector_less__unsigned_int__greater__exposer );
        vector_less__unsigned_int__greater__exposer.def( bp::indexing::vector_suite< std::vector< unsigned int > >() );
    }

    { //::std::vector< std::vector< unsigned int > >
        typedef bp::class_< std::vector< std::vector< unsigned int > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< unsigned int > > >() );
    }

    { //::std::vector< std::vector< boost::shared_ptr<VesselSegment<3> > > >
        typedef bp::class_< std::vector< std::vector< boost::shared_ptr<VesselSegment<3> > > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< boost::shared_ptr<VesselSegment<3> > > > >() );
    }

    { //::std::vector< std::vector< boost::shared_ptr<VesselSegment<2> > > >
        typedef bp::class_< std::vector< std::vector< boost::shared_ptr<VesselSegment<2> > > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< boost::shared_ptr<VesselSegment<2> > > > >() );
    }

    { //::std::vector< std::vector< boost::shared_ptr<VesselNode<3> > > >
        typedef bp::class_< std::vector< std::vector< boost::shared_ptr<VesselNode<3> > > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< boost::shared_ptr<VesselNode<3> > > > >() );
    }

    { //::std::vector< std::vector< boost::shared_ptr<VesselNode<2> > > >
        typedef bp::class_< std::vector< std::vector< boost::shared_ptr<VesselNode<2> > > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< boost::shared_ptr<VesselNode<2> > > > >() );
    }

    { //::std::vector< std::vector< boost::shared_ptr<Cell> > >
        typedef bp::class_< std::vector< std::vector< boost::shared_ptr<Cell> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::vector< boost::shared_ptr<Cell> > > >() );
    }

    { //::std::vector< double >
        typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
        vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
        bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
        vector_less__double__greater__exposer.def( bp::indexing::vector_suite< std::vector< double > >() );
    }

    { //::std::vector< boost::numeric::ublas::c_vector<double, 3> >
        typedef bp::class_< std::vector< boost::numeric::ublas::c_vector<double, 3> > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::numeric::ublas::c_vector<double, 3> > >() );
    }

    { //::std::vector< boost::numeric::ublas::c_vector<double, 2> >
        typedef bp::class_< std::vector< boost::numeric::ublas::c_vector<double, 2> > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::numeric::ublas::c_vector<double, 2> > >() );
    }

    { //::std::vector< DimensionalChastePoint<3> >
        typedef bp::class_< std::vector< DimensionalChastePoint<3> > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< DimensionalChastePoint<3> > >() );
    }

    { //::std::vector< DimensionalChastePoint<2> >
        typedef bp::class_< std::vector< DimensionalChastePoint<2> > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< DimensionalChastePoint<2> > >() );
    }

    { //::DimensionalChastePoint< 2 >
        typedef bp::class_< DimensionalChastePoint< 2 > > DimensionalChastePoint2_exposer_t;
        DimensionalChastePoint2_exposer_t DimensionalChastePoint2_exposer = DimensionalChastePoint2_exposer_t( "DimensionalChastePoint2", bp::init< bp::optional< double, double, double, boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > > >(( bp::arg("x")=0., bp::arg("y")=0., bp::arg("z")=0., bp::arg("referenceLength")=9.9999999999999995E-7 * unit::metres )) );
        bp::scope DimensionalChastePoint2_scope( DimensionalChastePoint2_exposer );
        bp::implicitly_convertible< double, DimensionalChastePoint< 2 > >();
        DimensionalChastePoint2_exposer.def( bp::init< boost::numeric::ublas::c_vector< double, 2 >, boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > >(( bp::arg("coords"), bp::arg("referenceLength") )) );
        { //::DimensionalChastePoint< 2 >::Create
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef ::boost::shared_ptr< DimensionalChastePoint< 2 > > ( *Create_function_type )( double,double,double,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > );
            
            DimensionalChastePoint2_exposer.def( 
                "Create"
                , Create_function_type( &::DimensionalChastePoint< 2 >::Create )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("referenceLength") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::Create
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef ::boost::shared_ptr< DimensionalChastePoint< 2 > > ( *Create_function_type )( ::boost::numeric::ublas::c_vector< double, 2 >,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > );
            
            DimensionalChastePoint2_exposer.def( 
                "Create"
                , Create_function_type( &::DimensionalChastePoint< 2 >::Create )
                , ( bp::arg("coords"), bp::arg("referenceLength") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::GetDistance
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetDistance_function_type)( ::DimensionalChastePoint< 2 > const & ) const;
            
            DimensionalChastePoint2_exposer.def( 
                "GetDistance"
                , GetDistance_function_type( &::DimensionalChastePoint< 2 >::GetDistance )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::GetIndex
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetIndex_function_type)(  ) ;
            
            DimensionalChastePoint2_exposer.def( 
                "GetIndex"
                , GetIndex_function_type( &::DimensionalChastePoint< 2 >::GetIndex ) );
        
        }
        { //::DimensionalChastePoint< 2 >::GetLocation
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetLocation_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            DimensionalChastePoint2_exposer.def( 
                "GetLocation"
                , GetLocation_function_type( &::DimensionalChastePoint< 2 >::GetLocation )
                , ( bp::arg("scale") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::GetLocation
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > const ( exported_class_t::*GetLocation_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) const;
            
            DimensionalChastePoint2_exposer.def( 
                "GetLocation"
                , GetLocation_function_type( &::DimensionalChastePoint< 2 >::GetLocation )
                , ( bp::arg("scale") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::GetMidPoint
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef ::DimensionalChastePoint< 2 > ( exported_class_t::*GetMidPoint_function_type)( ::DimensionalChastePoint< 2 > const & ) const;
            
            DimensionalChastePoint2_exposer.def( 
                "GetMidPoint"
                , GetMidPoint_function_type( &::DimensionalChastePoint< 2 >::GetMidPoint )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::GetNorm2
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetNorm2_function_type)(  ) ;
            
            DimensionalChastePoint2_exposer.def( 
                "GetNorm2"
                , GetNorm2_function_type( &::DimensionalChastePoint< 2 >::GetNorm2 ) );
        
        }
        { //::DimensionalChastePoint< 2 >::GetReferenceLengthScale
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetReferenceLengthScale_function_type)(  ) const;
            
            DimensionalChastePoint2_exposer.def( 
                "GetReferenceLengthScale"
                , GetReferenceLengthScale_function_type( &::DimensionalChastePoint< 2 >::GetReferenceLengthScale ) );
        
        }
        { //::DimensionalChastePoint< 2 >::GetUnitTangent
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetUnitTangent_function_type)( ::DimensionalChastePoint< 2 > const & ) const;
            
            DimensionalChastePoint2_exposer.def( 
                "GetUnitTangent"
                , GetUnitTangent_function_type( &::DimensionalChastePoint< 2 >::GetUnitTangent )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::GetUnitVector
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 2 > ( exported_class_t::*GetUnitVector_function_type)(  ) const;
            
            DimensionalChastePoint2_exposer.def( 
                "GetUnitVector"
                , GetUnitVector_function_type( &::DimensionalChastePoint< 2 >::GetUnitVector ) );
        
        }
        { //::DimensionalChastePoint< 2 >::IsCoincident
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCoincident_function_type)( ::DimensionalChastePoint< 2 > const & ) const;
            
            DimensionalChastePoint2_exposer.def( 
                "IsCoincident"
                , IsCoincident_function_type( &::DimensionalChastePoint< 2 >::IsCoincident )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::RotateAboutAxis
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef void ( exported_class_t::*RotateAboutAxis_function_type)( ::boost::numeric::ublas::c_vector< double, 3 >,double ) ;
            
            DimensionalChastePoint2_exposer.def( 
                "RotateAboutAxis"
                , RotateAboutAxis_function_type( &::DimensionalChastePoint< 2 >::RotateAboutAxis )
                , ( bp::arg("axis"), bp::arg("angle") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::SetIndex
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetIndex_function_type)( unsigned int ) ;
            
            DimensionalChastePoint2_exposer.def( 
                "SetIndex"
                , SetIndex_function_type( &::DimensionalChastePoint< 2 >::SetIndex )
                , ( bp::arg("index") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::SetReferenceLengthScale
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetReferenceLengthScale_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            DimensionalChastePoint2_exposer.def( 
                "SetReferenceLengthScale"
                , SetReferenceLengthScale_function_type( &::DimensionalChastePoint< 2 >::SetReferenceLengthScale )
                , ( bp::arg("lenthScale") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::Translate
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef void ( exported_class_t::*Translate_function_type)( ::DimensionalChastePoint< 2 > ) ;
            
            DimensionalChastePoint2_exposer.def( 
                "Translate"
                , Translate_function_type( &::DimensionalChastePoint< 2 >::Translate )
                , ( bp::arg("rVector") ) );
        
        }
        { //::DimensionalChastePoint< 2 >::TranslateTo
        
            typedef DimensionalChastePoint< 2 > exported_class_t;
            typedef void ( exported_class_t::*TranslateTo_function_type)( ::DimensionalChastePoint< 2 > ) ;
            
            DimensionalChastePoint2_exposer.def( 
                "TranslateTo"
                , TranslateTo_function_type( &::DimensionalChastePoint< 2 >::TranslateTo )
                , ( bp::arg("rPoint") ) );
        
        }
        DimensionalChastePoint2_exposer.def( bp::self *= bp::other< double >() );
        DimensionalChastePoint2_exposer.def( bp::self += bp::self );
        DimensionalChastePoint2_exposer.def( bp::self -= bp::self );
        DimensionalChastePoint2_exposer.def( bp::self /= bp::other< double >() );
        DimensionalChastePoint2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< DimensionalChastePoint<2> > >();
    }

    { //::DimensionalChastePoint< 3 >
        typedef bp::class_< DimensionalChastePoint< 3 > > DimensionalChastePoint3_exposer_t;
        DimensionalChastePoint3_exposer_t DimensionalChastePoint3_exposer = DimensionalChastePoint3_exposer_t( "DimensionalChastePoint3", bp::init< bp::optional< double, double, double, boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > > >(( bp::arg("x")=0., bp::arg("y")=0., bp::arg("z")=0., bp::arg("referenceLength")=9.9999999999999995E-7 * unit::metres )) );
        bp::scope DimensionalChastePoint3_scope( DimensionalChastePoint3_exposer );
        bp::implicitly_convertible< double, DimensionalChastePoint< 3 > >();
        DimensionalChastePoint3_exposer.def( bp::init< boost::numeric::ublas::c_vector< double, 3 >, boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > >(( bp::arg("coords"), bp::arg("referenceLength") )) );
        { //::DimensionalChastePoint< 3 >::Create
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef ::boost::shared_ptr< DimensionalChastePoint< 3 > > ( *Create_function_type )( double,double,double,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > );
            
            DimensionalChastePoint3_exposer.def( 
                "Create"
                , Create_function_type( &::DimensionalChastePoint< 3 >::Create )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z"), bp::arg("referenceLength") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::Create
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef ::boost::shared_ptr< DimensionalChastePoint< 3 > > ( *Create_function_type )( ::boost::numeric::ublas::c_vector< double, 3 >,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > );
            
            DimensionalChastePoint3_exposer.def( 
                "Create"
                , Create_function_type( &::DimensionalChastePoint< 3 >::Create )
                , ( bp::arg("coords"), bp::arg("referenceLength") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::GetDistance
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetDistance_function_type)( ::DimensionalChastePoint< 3 > const & ) const;
            
            DimensionalChastePoint3_exposer.def( 
                "GetDistance"
                , GetDistance_function_type( &::DimensionalChastePoint< 3 >::GetDistance )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::GetIndex
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetIndex_function_type)(  ) ;
            
            DimensionalChastePoint3_exposer.def( 
                "GetIndex"
                , GetIndex_function_type( &::DimensionalChastePoint< 3 >::GetIndex ) );
        
        }
        { //::DimensionalChastePoint< 3 >::GetLocation
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetLocation_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            DimensionalChastePoint3_exposer.def( 
                "GetLocation"
                , GetLocation_function_type( &::DimensionalChastePoint< 3 >::GetLocation )
                , ( bp::arg("scale") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::GetLocation
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > const ( exported_class_t::*GetLocation_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) const;
            
            DimensionalChastePoint3_exposer.def( 
                "GetLocation"
                , GetLocation_function_type( &::DimensionalChastePoint< 3 >::GetLocation )
                , ( bp::arg("scale") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::GetMidPoint
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef ::DimensionalChastePoint< 3 > ( exported_class_t::*GetMidPoint_function_type)( ::DimensionalChastePoint< 3 > const & ) const;
            
            DimensionalChastePoint3_exposer.def( 
                "GetMidPoint"
                , GetMidPoint_function_type( &::DimensionalChastePoint< 3 >::GetMidPoint )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::GetNorm2
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetNorm2_function_type)(  ) ;
            
            DimensionalChastePoint3_exposer.def( 
                "GetNorm2"
                , GetNorm2_function_type( &::DimensionalChastePoint< 3 >::GetNorm2 ) );
        
        }
        { //::DimensionalChastePoint< 3 >::GetReferenceLengthScale
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetReferenceLengthScale_function_type)(  ) const;
            
            DimensionalChastePoint3_exposer.def( 
                "GetReferenceLengthScale"
                , GetReferenceLengthScale_function_type( &::DimensionalChastePoint< 3 >::GetReferenceLengthScale ) );
        
        }
        { //::DimensionalChastePoint< 3 >::GetUnitTangent
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetUnitTangent_function_type)( ::DimensionalChastePoint< 3 > const & ) const;
            
            DimensionalChastePoint3_exposer.def( 
                "GetUnitTangent"
                , GetUnitTangent_function_type( &::DimensionalChastePoint< 3 >::GetUnitTangent )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::GetUnitVector
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetUnitVector_function_type)(  ) const;
            
            DimensionalChastePoint3_exposer.def( 
                "GetUnitVector"
                , GetUnitVector_function_type( &::DimensionalChastePoint< 3 >::GetUnitVector ) );
        
        }
        { //::DimensionalChastePoint< 3 >::IsCoincident
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsCoincident_function_type)( ::DimensionalChastePoint< 3 > const & ) const;
            
            DimensionalChastePoint3_exposer.def( 
                "IsCoincident"
                , IsCoincident_function_type( &::DimensionalChastePoint< 3 >::IsCoincident )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::RotateAboutAxis
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef void ( exported_class_t::*RotateAboutAxis_function_type)( ::boost::numeric::ublas::c_vector< double, 3 >,double ) ;
            
            DimensionalChastePoint3_exposer.def( 
                "RotateAboutAxis"
                , RotateAboutAxis_function_type( &::DimensionalChastePoint< 3 >::RotateAboutAxis )
                , ( bp::arg("axis"), bp::arg("angle") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::SetIndex
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetIndex_function_type)( unsigned int ) ;
            
            DimensionalChastePoint3_exposer.def( 
                "SetIndex"
                , SetIndex_function_type( &::DimensionalChastePoint< 3 >::SetIndex )
                , ( bp::arg("index") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::SetReferenceLengthScale
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetReferenceLengthScale_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            DimensionalChastePoint3_exposer.def( 
                "SetReferenceLengthScale"
                , SetReferenceLengthScale_function_type( &::DimensionalChastePoint< 3 >::SetReferenceLengthScale )
                , ( bp::arg("lenthScale") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::Translate
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef void ( exported_class_t::*Translate_function_type)( ::DimensionalChastePoint< 3 > ) ;
            
            DimensionalChastePoint3_exposer.def( 
                "Translate"
                , Translate_function_type( &::DimensionalChastePoint< 3 >::Translate )
                , ( bp::arg("rVector") ) );
        
        }
        { //::DimensionalChastePoint< 3 >::TranslateTo
        
            typedef DimensionalChastePoint< 3 > exported_class_t;
            typedef void ( exported_class_t::*TranslateTo_function_type)( ::DimensionalChastePoint< 3 > ) ;
            
            DimensionalChastePoint3_exposer.def( 
                "TranslateTo"
                , TranslateTo_function_type( &::DimensionalChastePoint< 3 >::TranslateTo )
                , ( bp::arg("rPoint") ) );
        
        }
        DimensionalChastePoint3_exposer.def( bp::self *= bp::other< double >() );
        DimensionalChastePoint3_exposer.def( bp::self += bp::self );
        DimensionalChastePoint3_exposer.def( bp::self -= bp::self );
        DimensionalChastePoint3_exposer.def( bp::self /= bp::other< double >() );
        DimensionalChastePoint3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< DimensionalChastePoint<3> > >();
    }

    { //::DiscreteContinuumMesh< 2, 2 >
        typedef bp::class_< DiscreteContinuumMesh< 2, 2 >, boost::noncopyable > DiscreteContinuumMesh2_2_exposer_t;
        DiscreteContinuumMesh2_2_exposer_t DiscreteContinuumMesh2_2_exposer = DiscreteContinuumMesh2_2_exposer_t( "DiscreteContinuumMesh2_2", bp::init< >() );
        bp::scope DiscreteContinuumMesh2_2_scope( DiscreteContinuumMesh2_2_exposer );
        { //::DiscreteContinuumMesh< 2, 2 >::Create
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::boost::shared_ptr< DiscreteContinuumMesh< 2, 2 > > ( *Create_function_type )(  );
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "Create"
                , Create_function_type( &::DiscreteContinuumMesh< 2, 2 >::Create ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::GetAsVtkUnstructuredGrid
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::vtkSmartPointer< vtkUnstructuredGrid > ( exported_class_t::*GetAsVtkUnstructuredGrid_function_type)(  ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "GetAsVtkUnstructuredGrid"
                , GetAsVtkUnstructuredGrid_function_type( &::DiscreteContinuumMesh< 2, 2 >::GetAsVtkUnstructuredGrid ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::GetConnectivity
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > ( exported_class_t::*GetConnectivity_function_type)(  ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "GetConnectivity"
                , GetConnectivity_function_type( &::DiscreteContinuumMesh< 2, 2 >::GetConnectivity ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::GetElementCellMap
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<Cell> > > const & ( exported_class_t::*GetElementCellMap_function_type)( bool ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "GetElementCellMap"
                , GetElementCellMap_function_type( &::DiscreteContinuumMesh< 2, 2 >::GetElementCellMap )
                , ( bp::arg("update")=(bool)(true) )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::GetElementCentroids
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::std::vector< boost::numeric::ublas::c_vector<double, 2> > ( exported_class_t::*GetElementCentroids_function_type)(  ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "GetElementCentroids"
                , GetElementCentroids_function_type( &::DiscreteContinuumMesh< 2, 2 >::GetElementCentroids ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::GetElementRegionMarkers
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetElementRegionMarkers_function_type)(  ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "GetElementRegionMarkers"
                , GetElementRegionMarkers_function_type( &::DiscreteContinuumMesh< 2, 2 >::GetElementRegionMarkers ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::GetElementSegmentMap
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<VesselSegment<2> > > > ( exported_class_t::*GetElementSegmentMap_function_type)( bool,bool ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "GetElementSegmentMap"
                , GetElementSegmentMap_function_type( &::DiscreteContinuumMesh< 2, 2 >::GetElementSegmentMap )
                , ( bp::arg("update")=(bool)(true), bp::arg("useVesselSurface")=(bool)(false) ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::GetNodeLocations
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::std::vector< boost::numeric::ublas::c_vector<double, 2> > ( exported_class_t::*GetNodeLocations_function_type)(  ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "GetNodeLocations"
                , GetNodeLocations_function_type( &::DiscreteContinuumMesh< 2, 2 >::GetNodeLocations ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::GetNodeLocationsAsPoints
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::std::vector< DimensionalChastePoint<2> > ( exported_class_t::*GetNodeLocationsAsPoints_function_type)(  ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "GetNodeLocationsAsPoints"
                , GetNodeLocationsAsPoints_function_type( &::DiscreteContinuumMesh< 2, 2 >::GetNodeLocationsAsPoints ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::GetPointElementMap
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > ( exported_class_t::*GetPointElementMap_function_type)( ::std::vector< DimensionalChastePoint<2> > ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "GetPointElementMap"
                , GetPointElementMap_function_type( &::DiscreteContinuumMesh< 2, 2 >::GetPointElementMap )
                , ( bp::arg("points") ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::GetReferenceLengthScale
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetReferenceLengthScale_function_type)(  ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "GetReferenceLengthScale"
                , GetReferenceLengthScale_function_type( &::DiscreteContinuumMesh< 2, 2 >::GetReferenceLengthScale ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::ImportDiscreteContinuumMeshFromTetgen
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*ImportDiscreteContinuumMeshFromTetgen_function_type)( ::tetgen::tetgenio &,unsigned int,int *,unsigned int,int *,int * ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "ImportDiscreteContinuumMeshFromTetgen"
                , ImportDiscreteContinuumMeshFromTetgen_function_type( &::DiscreteContinuumMesh< 2, 2 >::ImportDiscreteContinuumMeshFromTetgen )
                , ( bp::arg("mesherOutput"), bp::arg("numberOfElements"), bp::arg("elementList"), bp::arg("numberOfFaces"), bp::arg("faceList"), bp::arg("edgeMarkerList") ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::SetAttributes
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetAttributes_function_type)( ::std::vector< unsigned int > ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "SetAttributes"
                , SetAttributes_function_type( &::DiscreteContinuumMesh< 2, 2 >::SetAttributes )
                , ( bp::arg("attributes") ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::SetCellPopulation
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulation_function_type)( ::AbstractCellPopulation< 2, 2 > &,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "SetCellPopulation"
                , SetCellPopulation_function_type( &::DiscreteContinuumMesh< 2, 2 >::SetCellPopulation )
                , ( bp::arg("rCellPopulation"), bp::arg("cellLengthScale") ) );
        
        }
        { //::DiscreteContinuumMesh< 2, 2 >::SetVesselNetwork
        
            typedef DiscreteContinuumMesh< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 2 > > ) ;
            
            DiscreteContinuumMesh2_2_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::DiscreteContinuumMesh< 2, 2 >::SetVesselNetwork )
                , ( bp::arg("pNetwork") ) );
        
        }
        DiscreteContinuumMesh2_2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< DiscreteContinuumMesh<2, 2> > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 2, 2 > >, boost::shared_ptr< TetrahedralMesh< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 2, 2 > >, boost::shared_ptr< AbstractTetrahedralMesh< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 2, 2 > >, boost::shared_ptr< AbstractMesh< 2, 2 > > >();
    }

    { //::DiscreteContinuumMesh< 3, 3 >
        typedef bp::class_< DiscreteContinuumMesh< 3, 3 >, boost::noncopyable > DiscreteContinuumMesh3_3_exposer_t;
        DiscreteContinuumMesh3_3_exposer_t DiscreteContinuumMesh3_3_exposer = DiscreteContinuumMesh3_3_exposer_t( "DiscreteContinuumMesh3_3", bp::init< >() );
        bp::scope DiscreteContinuumMesh3_3_scope( DiscreteContinuumMesh3_3_exposer );
        { //::DiscreteContinuumMesh< 3, 3 >::Create
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > > ( *Create_function_type )(  );
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "Create"
                , Create_function_type( &::DiscreteContinuumMesh< 3, 3 >::Create ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetAsVtkUnstructuredGrid
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkUnstructuredGrid > ( exported_class_t::*GetAsVtkUnstructuredGrid_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetAsVtkUnstructuredGrid"
                , GetAsVtkUnstructuredGrid_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetAsVtkUnstructuredGrid ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetConnectivity
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > ( exported_class_t::*GetConnectivity_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetConnectivity"
                , GetConnectivity_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetConnectivity ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetElementCellMap
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<Cell> > > const & ( exported_class_t::*GetElementCellMap_function_type)( bool ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetElementCellMap"
                , GetElementCellMap_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetElementCellMap )
                , ( bp::arg("update")=(bool)(true) )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetElementCentroids
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< boost::numeric::ublas::c_vector<double, 3> > ( exported_class_t::*GetElementCentroids_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetElementCentroids"
                , GetElementCentroids_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetElementCentroids ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetElementRegionMarkers
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetElementRegionMarkers_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetElementRegionMarkers"
                , GetElementRegionMarkers_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetElementRegionMarkers ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetElementSegmentMap
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<VesselSegment<3> > > > ( exported_class_t::*GetElementSegmentMap_function_type)( bool,bool ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetElementSegmentMap"
                , GetElementSegmentMap_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetElementSegmentMap )
                , ( bp::arg("update")=(bool)(true), bp::arg("useVesselSurface")=(bool)(false) ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetNodeLocations
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< boost::numeric::ublas::c_vector<double, 3> > ( exported_class_t::*GetNodeLocations_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetNodeLocations"
                , GetNodeLocations_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetNodeLocations ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetNodeLocationsAsPoints
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< DimensionalChastePoint<3> > ( exported_class_t::*GetNodeLocationsAsPoints_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetNodeLocationsAsPoints"
                , GetNodeLocationsAsPoints_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetNodeLocationsAsPoints ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetPointElementMap
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > ( exported_class_t::*GetPointElementMap_function_type)( ::std::vector< DimensionalChastePoint<3> > ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetPointElementMap"
                , GetPointElementMap_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetPointElementMap )
                , ( bp::arg("points") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetReferenceLengthScale
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetReferenceLengthScale_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetReferenceLengthScale"
                , GetReferenceLengthScale_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetReferenceLengthScale ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::ImportDiscreteContinuumMeshFromTetgen
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*ImportDiscreteContinuumMeshFromTetgen_function_type)( ::tetgen::tetgenio &,unsigned int,int *,unsigned int,int *,int * ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "ImportDiscreteContinuumMeshFromTetgen"
                , ImportDiscreteContinuumMeshFromTetgen_function_type( &::DiscreteContinuumMesh< 3, 3 >::ImportDiscreteContinuumMeshFromTetgen )
                , ( bp::arg("mesherOutput"), bp::arg("numberOfElements"), bp::arg("elementList"), bp::arg("numberOfFaces"), bp::arg("faceList"), bp::arg("edgeMarkerList") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::SetAttributes
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetAttributes_function_type)( ::std::vector< unsigned int > ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetAttributes"
                , SetAttributes_function_type( &::DiscreteContinuumMesh< 3, 3 >::SetAttributes )
                , ( bp::arg("attributes") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::SetCellPopulation
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulation_function_type)( ::AbstractCellPopulation< 3, 3 > &,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetCellPopulation"
                , SetCellPopulation_function_type( &::DiscreteContinuumMesh< 3, 3 >::SetCellPopulation )
                , ( bp::arg("rCellPopulation"), bp::arg("cellLengthScale") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::SetVesselNetwork
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 3 > > ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::DiscreteContinuumMesh< 3, 3 >::SetVesselNetwork )
                , ( bp::arg("pNetwork") ) );
        
        }
        DiscreteContinuumMesh3_3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< DiscreteContinuumMesh<3, 3> > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > >, boost::shared_ptr< TetrahedralMesh< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > >, boost::shared_ptr< AbstractTetrahedralMesh< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > >, boost::shared_ptr< AbstractMesh< 3, 3 > > >();
    }

    { //::DiscreteContinuumMeshGenerator< 2, 2 >
        typedef bp::class_< DiscreteContinuumMeshGenerator< 2, 2 > > DiscreteContinuumMeshGenerator2_2_exposer_t;
        DiscreteContinuumMeshGenerator2_2_exposer_t DiscreteContinuumMeshGenerator2_2_exposer = DiscreteContinuumMeshGenerator2_2_exposer_t( "DiscreteContinuumMeshGenerator2_2", bp::init< >() );
        bp::scope DiscreteContinuumMeshGenerator2_2_scope( DiscreteContinuumMeshGenerator2_2_exposer );
        { //::DiscreteContinuumMeshGenerator< 2, 2 >::Create
        
            typedef DiscreteContinuumMeshGenerator< 2, 2 > exported_class_t;
            typedef ::boost::shared_ptr< DiscreteContinuumMeshGenerator< 2, 2 > > ( *Create_function_type )(  );
            
            DiscreteContinuumMeshGenerator2_2_exposer.def( 
                "Create"
                , Create_function_type( &::DiscreteContinuumMeshGenerator< 2, 2 >::Create ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 2, 2 >::GetMesh
        
            typedef DiscreteContinuumMeshGenerator< 2, 2 > exported_class_t;
            typedef ::boost::shared_ptr< DiscreteContinuumMesh< 2, 2 > > ( exported_class_t::*GetMesh_function_type)(  ) ;
            
            DiscreteContinuumMeshGenerator2_2_exposer.def( 
                "GetMesh"
                , GetMesh_function_type( &::DiscreteContinuumMeshGenerator< 2, 2 >::GetMesh ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 2, 2 >::SetDomain
        
            typedef DiscreteContinuumMeshGenerator< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetDomain_function_type)( ::boost::shared_ptr< Part< 2 > > ) ;
            
            DiscreteContinuumMeshGenerator2_2_exposer.def( 
                "SetDomain"
                , SetDomain_function_type( &::DiscreteContinuumMeshGenerator< 2, 2 >::SetDomain )
                , ( bp::arg("pDomain") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 2, 2 >::SetDomain
        
            typedef DiscreteContinuumMeshGenerator< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetDomain_function_type)( ::vtkSmartPointer< vtkPolyData > ) ;
            
            DiscreteContinuumMeshGenerator2_2_exposer.def( 
                "SetDomain"
                , SetDomain_function_type( &::DiscreteContinuumMeshGenerator< 2, 2 >::SetDomain )
                , ( bp::arg("pDomain") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 2, 2 >::SetDomain
        
            typedef DiscreteContinuumMeshGenerator< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetDomain_function_type)( ::std::string const & ) ;
            
            DiscreteContinuumMeshGenerator2_2_exposer.def( 
                "SetDomain"
                , SetDomain_function_type( &::DiscreteContinuumMeshGenerator< 2, 2 >::SetDomain )
                , ( bp::arg("rPathToStl") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 2, 2 >::SetHoles
        
            typedef DiscreteContinuumMeshGenerator< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetHoles_function_type)( ::std::vector< DimensionalChastePoint<2> > ) ;
            
            DiscreteContinuumMeshGenerator2_2_exposer.def( 
                "SetHoles"
                , SetHoles_function_type( &::DiscreteContinuumMeshGenerator< 2, 2 >::SetHoles )
                , ( bp::arg("holes") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 2, 2 >::SetMaxElementArea
        
            typedef DiscreteContinuumMeshGenerator< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetMaxElementArea_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 3, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            DiscreteContinuumMeshGenerator2_2_exposer.def( 
                "SetMaxElementArea"
                , SetMaxElementArea_function_type( &::DiscreteContinuumMeshGenerator< 2, 2 >::SetMaxElementArea )
                , ( bp::arg("maxElementArea") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 2, 2 >::SetRegionMarkers
        
            typedef DiscreteContinuumMeshGenerator< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetRegionMarkers_function_type)( ::std::vector< DimensionalChastePoint<2> > ) ;
            
            DiscreteContinuumMeshGenerator2_2_exposer.def( 
                "SetRegionMarkers"
                , SetRegionMarkers_function_type( &::DiscreteContinuumMeshGenerator< 2, 2 >::SetRegionMarkers )
                , ( bp::arg("regionMarkers") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 2, 2 >::Update
        
            typedef DiscreteContinuumMeshGenerator< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)(  ) ;
            
            DiscreteContinuumMeshGenerator2_2_exposer.def( 
                "Update"
                , Update_function_type( &::DiscreteContinuumMeshGenerator< 2, 2 >::Update ) );
        
        }
        DiscreteContinuumMeshGenerator2_2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< DiscreteContinuumMeshGenerator<2, 2> > >();
    }

    { //::DiscreteContinuumMeshGenerator< 3, 3 >
        typedef bp::class_< DiscreteContinuumMeshGenerator< 3, 3 > > DiscreteContinuumMeshGenerator3_3_exposer_t;
        DiscreteContinuumMeshGenerator3_3_exposer_t DiscreteContinuumMeshGenerator3_3_exposer = DiscreteContinuumMeshGenerator3_3_exposer_t( "DiscreteContinuumMeshGenerator3_3", bp::init< >() );
        bp::scope DiscreteContinuumMeshGenerator3_3_scope( DiscreteContinuumMeshGenerator3_3_exposer );
        { //::DiscreteContinuumMeshGenerator< 3, 3 >::Create
        
            typedef DiscreteContinuumMeshGenerator< 3, 3 > exported_class_t;
            typedef ::boost::shared_ptr< DiscreteContinuumMeshGenerator< 3, 3 > > ( *Create_function_type )(  );
            
            DiscreteContinuumMeshGenerator3_3_exposer.def( 
                "Create"
                , Create_function_type( &::DiscreteContinuumMeshGenerator< 3, 3 >::Create ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 3, 3 >::GetMesh
        
            typedef DiscreteContinuumMeshGenerator< 3, 3 > exported_class_t;
            typedef ::boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > > ( exported_class_t::*GetMesh_function_type)(  ) ;
            
            DiscreteContinuumMeshGenerator3_3_exposer.def( 
                "GetMesh"
                , GetMesh_function_type( &::DiscreteContinuumMeshGenerator< 3, 3 >::GetMesh ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 3, 3 >::SetDomain
        
            typedef DiscreteContinuumMeshGenerator< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDomain_function_type)( ::boost::shared_ptr< Part< 3 > > ) ;
            
            DiscreteContinuumMeshGenerator3_3_exposer.def( 
                "SetDomain"
                , SetDomain_function_type( &::DiscreteContinuumMeshGenerator< 3, 3 >::SetDomain )
                , ( bp::arg("pDomain") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 3, 3 >::SetDomain
        
            typedef DiscreteContinuumMeshGenerator< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDomain_function_type)( ::vtkSmartPointer< vtkPolyData > ) ;
            
            DiscreteContinuumMeshGenerator3_3_exposer.def( 
                "SetDomain"
                , SetDomain_function_type( &::DiscreteContinuumMeshGenerator< 3, 3 >::SetDomain )
                , ( bp::arg("pDomain") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 3, 3 >::SetDomain
        
            typedef DiscreteContinuumMeshGenerator< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDomain_function_type)( ::std::string const & ) ;
            
            DiscreteContinuumMeshGenerator3_3_exposer.def( 
                "SetDomain"
                , SetDomain_function_type( &::DiscreteContinuumMeshGenerator< 3, 3 >::SetDomain )
                , ( bp::arg("rPathToStl") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 3, 3 >::SetHoles
        
            typedef DiscreteContinuumMeshGenerator< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetHoles_function_type)( ::std::vector< DimensionalChastePoint<3> > ) ;
            
            DiscreteContinuumMeshGenerator3_3_exposer.def( 
                "SetHoles"
                , SetHoles_function_type( &::DiscreteContinuumMeshGenerator< 3, 3 >::SetHoles )
                , ( bp::arg("holes") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 3, 3 >::SetMaxElementArea
        
            typedef DiscreteContinuumMeshGenerator< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetMaxElementArea_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 3, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            DiscreteContinuumMeshGenerator3_3_exposer.def( 
                "SetMaxElementArea"
                , SetMaxElementArea_function_type( &::DiscreteContinuumMeshGenerator< 3, 3 >::SetMaxElementArea )
                , ( bp::arg("maxElementArea") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 3, 3 >::SetRegionMarkers
        
            typedef DiscreteContinuumMeshGenerator< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRegionMarkers_function_type)( ::std::vector< DimensionalChastePoint<3> > ) ;
            
            DiscreteContinuumMeshGenerator3_3_exposer.def( 
                "SetRegionMarkers"
                , SetRegionMarkers_function_type( &::DiscreteContinuumMeshGenerator< 3, 3 >::SetRegionMarkers )
                , ( bp::arg("regionMarkers") ) );
        
        }
        { //::DiscreteContinuumMeshGenerator< 3, 3 >::Update
        
            typedef DiscreteContinuumMeshGenerator< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)(  ) ;
            
            DiscreteContinuumMeshGenerator3_3_exposer.def( 
                "Update"
                , Update_function_type( &::DiscreteContinuumMeshGenerator< 3, 3 >::Update ) );
        
        }
        DiscreteContinuumMeshGenerator3_3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< DiscreteContinuumMeshGenerator<3, 3> > >();
    }

    { //::MeshFormat
        typedef bp::class_< MeshFormat > MeshFormat_exposer_t;
        MeshFormat_exposer_t MeshFormat_exposer = MeshFormat_exposer_t( "MeshFormat" );
        bp::scope MeshFormat_scope( MeshFormat_exposer );
        bp::enum_< MeshFormat::Value>("Value")
            .value("VTU", MeshFormat::VTU)
            .value("DOLFIN", MeshFormat::DOLFIN)
            .value("STL", MeshFormat::STL)
            .export_values()
            ;
    }

    { //::MultiFormatMeshWriter< 2 >
        typedef bp::class_< MultiFormatMeshWriter< 2 > > MultiFormatMeshWriter2_exposer_t;
        MultiFormatMeshWriter2_exposer_t MultiFormatMeshWriter2_exposer = MultiFormatMeshWriter2_exposer_t( "MultiFormatMeshWriter2", bp::init< >() );
        bp::scope MultiFormatMeshWriter2_scope( MultiFormatMeshWriter2_exposer );
        { //::MultiFormatMeshWriter< 2 >::Create
        
            typedef MultiFormatMeshWriter< 2 > exported_class_t;
            typedef ::boost::shared_ptr< MultiFormatMeshWriter< 2 > > ( *Create_function_type )(  );
            
            MultiFormatMeshWriter2_exposer.def( 
                "Create"
                , Create_function_type( &::MultiFormatMeshWriter< 2 >::Create ) );
        
        }
        { //::MultiFormatMeshWriter< 2 >::SetFilename
        
            typedef MultiFormatMeshWriter< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetFilename_function_type)( ::std::string const & ) ;
            
            MultiFormatMeshWriter2_exposer.def( 
                "SetFilename"
                , SetFilename_function_type( &::MultiFormatMeshWriter< 2 >::SetFilename )
                , ( bp::arg("rFilename") ) );
        
        }
        { //::MultiFormatMeshWriter< 2 >::SetMesh
        
            typedef MultiFormatMeshWriter< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetMesh_function_type)( ::vtkSmartPointer< vtkUnstructuredGrid > ) ;
            
            MultiFormatMeshWriter2_exposer.def( 
                "SetMesh"
                , SetMesh_function_type( &::MultiFormatMeshWriter< 2 >::SetMesh )
                , ( bp::arg("pMesh") ) );
        
        }
        { //::MultiFormatMeshWriter< 2 >::SetMesh
        
            typedef MultiFormatMeshWriter< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetMesh_function_type)( ::boost::shared_ptr< DiscreteContinuumMesh< 2, 2 > > ) ;
            
            MultiFormatMeshWriter2_exposer.def( 
                "SetMesh"
                , SetMesh_function_type( &::MultiFormatMeshWriter< 2 >::SetMesh )
                , ( bp::arg("pMesh") ) );
        
        }
        { //::MultiFormatMeshWriter< 2 >::SetOutputFormat
        
            typedef MultiFormatMeshWriter< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputFormat_function_type)( ::MeshFormat::Value ) ;
            
            MultiFormatMeshWriter2_exposer.def( 
                "SetOutputFormat"
                , SetOutputFormat_function_type( &::MultiFormatMeshWriter< 2 >::SetOutputFormat )
                , ( bp::arg("outputFormat") ) );
        
        }
        { //::MultiFormatMeshWriter< 2 >::Write
        
            typedef MultiFormatMeshWriter< 2 > exported_class_t;
            typedef void ( exported_class_t::*Write_function_type)(  ) ;
            
            MultiFormatMeshWriter2_exposer.def( 
                "Write"
                , Write_function_type( &::MultiFormatMeshWriter< 2 >::Write ) );
        
        }
        MultiFormatMeshWriter2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MultiFormatMeshWriter<2> > >();
    }

    { //::MultiFormatMeshWriter< 3 >
        typedef bp::class_< MultiFormatMeshWriter< 3 > > MultiFormatMeshWriter3_exposer_t;
        MultiFormatMeshWriter3_exposer_t MultiFormatMeshWriter3_exposer = MultiFormatMeshWriter3_exposer_t( "MultiFormatMeshWriter3", bp::init< >() );
        bp::scope MultiFormatMeshWriter3_scope( MultiFormatMeshWriter3_exposer );
        { //::MultiFormatMeshWriter< 3 >::Create
        
            typedef MultiFormatMeshWriter< 3 > exported_class_t;
            typedef ::boost::shared_ptr< MultiFormatMeshWriter< 3 > > ( *Create_function_type )(  );
            
            MultiFormatMeshWriter3_exposer.def( 
                "Create"
                , Create_function_type( &::MultiFormatMeshWriter< 3 >::Create ) );
        
        }
        { //::MultiFormatMeshWriter< 3 >::SetFilename
        
            typedef MultiFormatMeshWriter< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetFilename_function_type)( ::std::string const & ) ;
            
            MultiFormatMeshWriter3_exposer.def( 
                "SetFilename"
                , SetFilename_function_type( &::MultiFormatMeshWriter< 3 >::SetFilename )
                , ( bp::arg("rFilename") ) );
        
        }
        { //::MultiFormatMeshWriter< 3 >::SetMesh
        
            typedef MultiFormatMeshWriter< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetMesh_function_type)( ::vtkSmartPointer< vtkUnstructuredGrid > ) ;
            
            MultiFormatMeshWriter3_exposer.def( 
                "SetMesh"
                , SetMesh_function_type( &::MultiFormatMeshWriter< 3 >::SetMesh )
                , ( bp::arg("pMesh") ) );
        
        }
        { //::MultiFormatMeshWriter< 3 >::SetMesh
        
            typedef MultiFormatMeshWriter< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetMesh_function_type)( ::boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > > ) ;
            
            MultiFormatMeshWriter3_exposer.def( 
                "SetMesh"
                , SetMesh_function_type( &::MultiFormatMeshWriter< 3 >::SetMesh )
                , ( bp::arg("pMesh") ) );
        
        }
        { //::MultiFormatMeshWriter< 3 >::SetOutputFormat
        
            typedef MultiFormatMeshWriter< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputFormat_function_type)( ::MeshFormat::Value ) ;
            
            MultiFormatMeshWriter3_exposer.def( 
                "SetOutputFormat"
                , SetOutputFormat_function_type( &::MultiFormatMeshWriter< 3 >::SetOutputFormat )
                , ( bp::arg("outputFormat") ) );
        
        }
        { //::MultiFormatMeshWriter< 3 >::Write
        
            typedef MultiFormatMeshWriter< 3 > exported_class_t;
            typedef void ( exported_class_t::*Write_function_type)(  ) ;
            
            MultiFormatMeshWriter3_exposer.def( 
                "Write"
                , Write_function_type( &::MultiFormatMeshWriter< 3 >::Write ) );
        
        }
        MultiFormatMeshWriter3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MultiFormatMeshWriter<3> > >();
    }

    { //::RegularGrid< 2 >
        typedef bp::class_< RegularGrid< 2 > > RegularGrid2_exposer_t;
        RegularGrid2_exposer_t RegularGrid2_exposer = RegularGrid2_exposer_t( "RegularGrid2", bp::init< >() );
        bp::scope RegularGrid2_scope( RegularGrid2_exposer );
        { //::RegularGrid< 2 >::CalculateNeighbourData
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef void ( exported_class_t::*CalculateNeighbourData_function_type)(  ) ;
            
            RegularGrid2_exposer.def( 
                "CalculateNeighbourData"
                , CalculateNeighbourData_function_type( &::RegularGrid< 2 >::CalculateNeighbourData ) );
        
        }
        { //::RegularGrid< 2 >::Create
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::boost::shared_ptr< RegularGrid< 2 > > ( *Create_function_type )(  );
            
            RegularGrid2_exposer.def( 
                "Create"
                , Create_function_type( &::RegularGrid< 2 >::Create ) );
        
        }
        { //::RegularGrid< 2 >::GenerateFromPart
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef void ( exported_class_t::*GenerateFromPart_function_type)( ::boost::shared_ptr< Part< 2 > >,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RegularGrid2_exposer.def( 
                "GenerateFromPart"
                , GenerateFromPart_function_type( &::RegularGrid< 2 >::GenerateFromPart )
                , ( bp::arg("pPart"), bp::arg("gridSize") ) );
        
        }
        { //::RegularGrid< 2 >::Get1dGridIndex
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*Get1dGridIndex_function_type)( unsigned int,unsigned int,unsigned int ) ;
            
            RegularGrid2_exposer.def( 
                "Get1dGridIndex"
                , Get1dGridIndex_function_type( &::RegularGrid< 2 >::Get1dGridIndex )
                , ( bp::arg("xIndex"), bp::arg("yIndex"), bp::arg("zIndex") ) );
        
        }
        { //::RegularGrid< 2 >::GetExtents
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetExtents_function_type)(  ) ;
            
            RegularGrid2_exposer.def( 
                "GetExtents"
                , GetExtents_function_type( &::RegularGrid< 2 >::GetExtents ) );
        
        }
        { //::RegularGrid< 2 >::GetLocation
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::DimensionalChastePoint< 2 > ( exported_class_t::*GetLocation_function_type)( unsigned int,unsigned int,unsigned int ) ;
            
            RegularGrid2_exposer.def( 
                "GetLocation"
                , GetLocation_function_type( &::RegularGrid< 2 >::GetLocation )
                , ( bp::arg("xIndex"), bp::arg("yIndex"), bp::arg("zIndex") ) );
        
        }
        { //::RegularGrid< 2 >::GetLocationOf1dIndex
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::DimensionalChastePoint< 2 > ( exported_class_t::*GetLocationOf1dIndex_function_type)( unsigned int ) ;
            
            RegularGrid2_exposer.def( 
                "GetLocationOf1dIndex"
                , GetLocationOf1dIndex_function_type( &::RegularGrid< 2 >::GetLocationOf1dIndex )
                , ( bp::arg("gridIndex") ) );
        
        }
        { //::RegularGrid< 2 >::GetLocations
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::std::vector< DimensionalChastePoint<2> > ( exported_class_t::*GetLocations_function_type)(  ) ;
            
            RegularGrid2_exposer.def( 
                "GetLocations"
                , GetLocations_function_type( &::RegularGrid< 2 >::GetLocations ) );
        
        }
        { //::RegularGrid< 2 >::GetNearestGridIndex
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNearestGridIndex_function_type)( ::DimensionalChastePoint< 2 > const & ) ;
            
            RegularGrid2_exposer.def( 
                "GetNearestGridIndex"
                , GetNearestGridIndex_function_type( &::RegularGrid< 2 >::GetNearestGridIndex )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::RegularGrid< 2 >::GetNeighbourData
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > const & ( exported_class_t::*GetNeighbourData_function_type)(  ) ;
            
            RegularGrid2_exposer.def( 
                "GetNeighbourData"
                , GetNeighbourData_function_type( &::RegularGrid< 2 >::GetNeighbourData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::RegularGrid< 2 >::GetNumberOfPoints
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumberOfPoints_function_type)(  ) ;
            
            RegularGrid2_exposer.def( 
                "GetNumberOfPoints"
                , GetNumberOfPoints_function_type( &::RegularGrid< 2 >::GetNumberOfPoints ) );
        
        }
        { //::RegularGrid< 2 >::GetOrigin
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::DimensionalChastePoint< 2 > ( exported_class_t::*GetOrigin_function_type)(  ) ;
            
            RegularGrid2_exposer.def( 
                "GetOrigin"
                , GetOrigin_function_type( &::RegularGrid< 2 >::GetOrigin ) );
        
        }
        { //::RegularGrid< 2 >::GetPointCellMap
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<Cell> > > const & ( exported_class_t::*GetPointCellMap_function_type)( bool ) ;
            
            RegularGrid2_exposer.def( 
                "GetPointCellMap"
                , GetPointCellMap_function_type( &::RegularGrid< 2 >::GetPointCellMap )
                , ( bp::arg("update")=(bool)(true) )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::RegularGrid< 2 >::GetPointNodeMap
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<VesselNode<2> > > > const & ( exported_class_t::*GetPointNodeMap_function_type)( bool ) ;
            
            RegularGrid2_exposer.def( 
                "GetPointNodeMap"
                , GetPointNodeMap_function_type( &::RegularGrid< 2 >::GetPointNodeMap )
                , ( bp::arg("update")=(bool)(true) )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::RegularGrid< 2 >::GetPointPointMap
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > ( exported_class_t::*GetPointPointMap_function_type)( ::std::vector< DimensionalChastePoint<2> > ) ;
            
            RegularGrid2_exposer.def( 
                "GetPointPointMap"
                , GetPointPointMap_function_type( &::RegularGrid< 2 >::GetPointPointMap )
                , ( bp::arg("inputPoints") ) );
        
        }
        { //::RegularGrid< 2 >::GetPointSegmentMap
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<VesselSegment<2> > > > ( exported_class_t::*GetPointSegmentMap_function_type)( bool,bool ) ;
            
            RegularGrid2_exposer.def( 
                "GetPointSegmentMap"
                , GetPointSegmentMap_function_type( &::RegularGrid< 2 >::GetPointSegmentMap )
                , ( bp::arg("update")=(bool)(true), bp::arg("useVesselSurface")=(bool)(false) ) );
        
        }
        { //::RegularGrid< 2 >::GetReferenceLengthScale
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetReferenceLengthScale_function_type)(  ) ;
            
            RegularGrid2_exposer.def( 
                "GetReferenceLengthScale"
                , GetReferenceLengthScale_function_type( &::RegularGrid< 2 >::GetReferenceLengthScale ) );
        
        }
        { //::RegularGrid< 2 >::GetSpacing
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetSpacing_function_type)(  ) ;
            
            RegularGrid2_exposer.def( 
                "GetSpacing"
                , GetSpacing_function_type( &::RegularGrid< 2 >::GetSpacing ) );
        
        }
        { //::RegularGrid< 2 >::GetVtkGrid
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::vtkSmartPointer< vtkImageData > ( exported_class_t::*GetVtkGrid_function_type)(  ) ;
            
            RegularGrid2_exposer.def( 
                "GetVtkGrid"
                , GetVtkGrid_function_type( &::RegularGrid< 2 >::GetVtkGrid ) );
        
        }
        { //::RegularGrid< 2 >::InterpolateGridValues
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef ::std::vector< double > ( exported_class_t::*InterpolateGridValues_function_type)( ::std::vector< DimensionalChastePoint<2> >,::std::vector< double >,bool ) ;
            
            RegularGrid2_exposer.def( 
                "InterpolateGridValues"
                , InterpolateGridValues_function_type( &::RegularGrid< 2 >::InterpolateGridValues )
                , ( bp::arg("locations"), bp::arg("values"), bp::arg("useVtk")=(bool)(false) ) );
        
        }
        { //::RegularGrid< 2 >::IsLocationInPointVolume
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsLocationInPointVolume_function_type)( ::DimensionalChastePoint< 2 >,unsigned int ) ;
            
            RegularGrid2_exposer.def( 
                "IsLocationInPointVolume"
                , IsLocationInPointVolume_function_type( &::RegularGrid< 2 >::IsLocationInPointVolume )
                , ( bp::arg("point"), bp::arg("gridIndex") ) );
        
        }
        { //::RegularGrid< 2 >::IsOnBoundary
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsOnBoundary_function_type)( unsigned int ) ;
            
            RegularGrid2_exposer.def( 
                "IsOnBoundary"
                , IsOnBoundary_function_type( &::RegularGrid< 2 >::IsOnBoundary )
                , ( bp::arg("gridIndex") ) );
        
        }
        { //::RegularGrid< 2 >::IsOnBoundary
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsOnBoundary_function_type)( unsigned int,unsigned int,unsigned int ) ;
            
            RegularGrid2_exposer.def( 
                "IsOnBoundary"
                , IsOnBoundary_function_type( &::RegularGrid< 2 >::IsOnBoundary )
                , ( bp::arg("xIndex"), bp::arg("yIndex"), bp::arg("zIndex") ) );
        
        }
        { //::RegularGrid< 2 >::IsSegmentAtLatticeSite
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsSegmentAtLatticeSite_function_type)( unsigned int,bool ) ;
            
            RegularGrid2_exposer.def( 
                "IsSegmentAtLatticeSite"
                , IsSegmentAtLatticeSite_function_type( &::RegularGrid< 2 >::IsSegmentAtLatticeSite )
                , ( bp::arg("index"), bp::arg("update") ) );
        
        }
        { //::RegularGrid< 2 >::SetCellPopulation
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulation_function_type)( ::AbstractCellPopulation< 2, 2 > &,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RegularGrid2_exposer.def( 
                "SetCellPopulation"
                , SetCellPopulation_function_type( &::RegularGrid< 2 >::SetCellPopulation )
                , ( bp::arg("rCellPopulation"), bp::arg("cellPopulationLengthScale") ) );
        
        }
        { //::RegularGrid< 2 >::SetExtents
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetExtents_function_type)( ::std::vector< unsigned int > ) ;
            
            RegularGrid2_exposer.def( 
                "SetExtents"
                , SetExtents_function_type( &::RegularGrid< 2 >::SetExtents )
                , ( bp::arg("extents") ) );
        
        }
        { //::RegularGrid< 2 >::SetOrigin
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetOrigin_function_type)( ::DimensionalChastePoint< 2 > ) ;
            
            RegularGrid2_exposer.def( 
                "SetOrigin"
                , SetOrigin_function_type( &::RegularGrid< 2 >::SetOrigin )
                , ( bp::arg("origin") ) );
        
        }
        { //::RegularGrid< 2 >::SetPointValues
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetPointValues_function_type)( ::std::vector< double > ) ;
            
            RegularGrid2_exposer.def( 
                "SetPointValues"
                , SetPointValues_function_type( &::RegularGrid< 2 >::SetPointValues )
                , ( bp::arg("pointSolution") ) );
        
        }
        { //::RegularGrid< 2 >::SetSpacing
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetSpacing_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RegularGrid2_exposer.def( 
                "SetSpacing"
                , SetSpacing_function_type( &::RegularGrid< 2 >::SetSpacing )
                , ( bp::arg("spacing") ) );
        
        }
        { //::RegularGrid< 2 >::SetUpVtkGrid
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetUpVtkGrid_function_type)(  ) ;
            
            RegularGrid2_exposer.def( 
                "SetUpVtkGrid"
                , SetUpVtkGrid_function_type( &::RegularGrid< 2 >::SetUpVtkGrid ) );
        
        }
        { //::RegularGrid< 2 >::SetVesselNetwork
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 2 > > ) ;
            
            RegularGrid2_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::RegularGrid< 2 >::SetVesselNetwork )
                , ( bp::arg("pNetwork") ) );
        
        }
        { //::RegularGrid< 2 >::Write
        
            typedef RegularGrid< 2 > exported_class_t;
            typedef void ( exported_class_t::*Write_function_type)( ::boost::shared_ptr< OutputFileHandler > ) ;
            
            RegularGrid2_exposer.def( 
                "Write"
                , Write_function_type( &::RegularGrid< 2 >::Write )
                , ( bp::arg("pFileHandler") ) );
        
        }
        RegularGrid2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< RegularGrid<2> > >();
    }

    { //::RegularGrid< 3 >
        typedef bp::class_< RegularGrid< 3 > > RegularGrid3_exposer_t;
        RegularGrid3_exposer_t RegularGrid3_exposer = RegularGrid3_exposer_t( "RegularGrid3", bp::init< >() );
        bp::scope RegularGrid3_scope( RegularGrid3_exposer );
        { //::RegularGrid< 3 >::CalculateNeighbourData
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef void ( exported_class_t::*CalculateNeighbourData_function_type)(  ) ;
            
            RegularGrid3_exposer.def( 
                "CalculateNeighbourData"
                , CalculateNeighbourData_function_type( &::RegularGrid< 3 >::CalculateNeighbourData ) );
        
        }
        { //::RegularGrid< 3 >::Create
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::boost::shared_ptr< RegularGrid< 3 > > ( *Create_function_type )(  );
            
            RegularGrid3_exposer.def( 
                "Create"
                , Create_function_type( &::RegularGrid< 3 >::Create ) );
        
        }
        { //::RegularGrid< 3 >::GenerateFromPart
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef void ( exported_class_t::*GenerateFromPart_function_type)( ::boost::shared_ptr< Part< 3 > >,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RegularGrid3_exposer.def( 
                "GenerateFromPart"
                , GenerateFromPart_function_type( &::RegularGrid< 3 >::GenerateFromPart )
                , ( bp::arg("pPart"), bp::arg("gridSize") ) );
        
        }
        { //::RegularGrid< 3 >::Get1dGridIndex
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*Get1dGridIndex_function_type)( unsigned int,unsigned int,unsigned int ) ;
            
            RegularGrid3_exposer.def( 
                "Get1dGridIndex"
                , Get1dGridIndex_function_type( &::RegularGrid< 3 >::Get1dGridIndex )
                , ( bp::arg("xIndex"), bp::arg("yIndex"), bp::arg("zIndex") ) );
        
        }
        { //::RegularGrid< 3 >::GetExtents
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetExtents_function_type)(  ) ;
            
            RegularGrid3_exposer.def( 
                "GetExtents"
                , GetExtents_function_type( &::RegularGrid< 3 >::GetExtents ) );
        
        }
        { //::RegularGrid< 3 >::GetLocation
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::DimensionalChastePoint< 3 > ( exported_class_t::*GetLocation_function_type)( unsigned int,unsigned int,unsigned int ) ;
            
            RegularGrid3_exposer.def( 
                "GetLocation"
                , GetLocation_function_type( &::RegularGrid< 3 >::GetLocation )
                , ( bp::arg("xIndex"), bp::arg("yIndex"), bp::arg("zIndex") ) );
        
        }
        { //::RegularGrid< 3 >::GetLocationOf1dIndex
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::DimensionalChastePoint< 3 > ( exported_class_t::*GetLocationOf1dIndex_function_type)( unsigned int ) ;
            
            RegularGrid3_exposer.def( 
                "GetLocationOf1dIndex"
                , GetLocationOf1dIndex_function_type( &::RegularGrid< 3 >::GetLocationOf1dIndex )
                , ( bp::arg("gridIndex") ) );
        
        }
        { //::RegularGrid< 3 >::GetLocations
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::std::vector< DimensionalChastePoint<3> > ( exported_class_t::*GetLocations_function_type)(  ) ;
            
            RegularGrid3_exposer.def( 
                "GetLocations"
                , GetLocations_function_type( &::RegularGrid< 3 >::GetLocations ) );
        
        }
        { //::RegularGrid< 3 >::GetNearestGridIndex
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNearestGridIndex_function_type)( ::DimensionalChastePoint< 3 > const & ) ;
            
            RegularGrid3_exposer.def( 
                "GetNearestGridIndex"
                , GetNearestGridIndex_function_type( &::RegularGrid< 3 >::GetNearestGridIndex )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::RegularGrid< 3 >::GetNeighbourData
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > const & ( exported_class_t::*GetNeighbourData_function_type)(  ) ;
            
            RegularGrid3_exposer.def( 
                "GetNeighbourData"
                , GetNeighbourData_function_type( &::RegularGrid< 3 >::GetNeighbourData )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::RegularGrid< 3 >::GetNumberOfPoints
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumberOfPoints_function_type)(  ) ;
            
            RegularGrid3_exposer.def( 
                "GetNumberOfPoints"
                , GetNumberOfPoints_function_type( &::RegularGrid< 3 >::GetNumberOfPoints ) );
        
        }
        { //::RegularGrid< 3 >::GetOrigin
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::DimensionalChastePoint< 3 > ( exported_class_t::*GetOrigin_function_type)(  ) ;
            
            RegularGrid3_exposer.def( 
                "GetOrigin"
                , GetOrigin_function_type( &::RegularGrid< 3 >::GetOrigin ) );
        
        }
        { //::RegularGrid< 3 >::GetPointCellMap
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<Cell> > > const & ( exported_class_t::*GetPointCellMap_function_type)( bool ) ;
            
            RegularGrid3_exposer.def( 
                "GetPointCellMap"
                , GetPointCellMap_function_type( &::RegularGrid< 3 >::GetPointCellMap )
                , ( bp::arg("update")=(bool)(true) )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::RegularGrid< 3 >::GetPointNodeMap
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<VesselNode<3> > > > const & ( exported_class_t::*GetPointNodeMap_function_type)( bool ) ;
            
            RegularGrid3_exposer.def( 
                "GetPointNodeMap"
                , GetPointNodeMap_function_type( &::RegularGrid< 3 >::GetPointNodeMap )
                , ( bp::arg("update")=(bool)(true) )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::RegularGrid< 3 >::GetPointPointMap
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > ( exported_class_t::*GetPointPointMap_function_type)( ::std::vector< DimensionalChastePoint<3> > ) ;
            
            RegularGrid3_exposer.def( 
                "GetPointPointMap"
                , GetPointPointMap_function_type( &::RegularGrid< 3 >::GetPointPointMap )
                , ( bp::arg("inputPoints") ) );
        
        }
        { //::RegularGrid< 3 >::GetPointSegmentMap
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::std::vector< std::vector< boost::shared_ptr<VesselSegment<3> > > > ( exported_class_t::*GetPointSegmentMap_function_type)( bool,bool ) ;
            
            RegularGrid3_exposer.def( 
                "GetPointSegmentMap"
                , GetPointSegmentMap_function_type( &::RegularGrid< 3 >::GetPointSegmentMap )
                , ( bp::arg("update")=(bool)(true), bp::arg("useVesselSurface")=(bool)(false) ) );
        
        }
        { //::RegularGrid< 3 >::GetReferenceLengthScale
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetReferenceLengthScale_function_type)(  ) ;
            
            RegularGrid3_exposer.def( 
                "GetReferenceLengthScale"
                , GetReferenceLengthScale_function_type( &::RegularGrid< 3 >::GetReferenceLengthScale ) );
        
        }
        { //::RegularGrid< 3 >::GetSpacing
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetSpacing_function_type)(  ) ;
            
            RegularGrid3_exposer.def( 
                "GetSpacing"
                , GetSpacing_function_type( &::RegularGrid< 3 >::GetSpacing ) );
        
        }
        { //::RegularGrid< 3 >::GetVtkGrid
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkImageData > ( exported_class_t::*GetVtkGrid_function_type)(  ) ;
            
            RegularGrid3_exposer.def( 
                "GetVtkGrid"
                , GetVtkGrid_function_type( &::RegularGrid< 3 >::GetVtkGrid ) );
        
        }
        { //::RegularGrid< 3 >::InterpolateGridValues
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef ::std::vector< double > ( exported_class_t::*InterpolateGridValues_function_type)( ::std::vector< DimensionalChastePoint<3> >,::std::vector< double >,bool ) ;
            
            RegularGrid3_exposer.def( 
                "InterpolateGridValues"
                , InterpolateGridValues_function_type( &::RegularGrid< 3 >::InterpolateGridValues )
                , ( bp::arg("locations"), bp::arg("values"), bp::arg("useVtk")=(bool)(false) ) );
        
        }
        { //::RegularGrid< 3 >::IsLocationInPointVolume
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsLocationInPointVolume_function_type)( ::DimensionalChastePoint< 3 >,unsigned int ) ;
            
            RegularGrid3_exposer.def( 
                "IsLocationInPointVolume"
                , IsLocationInPointVolume_function_type( &::RegularGrid< 3 >::IsLocationInPointVolume )
                , ( bp::arg("point"), bp::arg("gridIndex") ) );
        
        }
        { //::RegularGrid< 3 >::IsOnBoundary
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsOnBoundary_function_type)( unsigned int ) ;
            
            RegularGrid3_exposer.def( 
                "IsOnBoundary"
                , IsOnBoundary_function_type( &::RegularGrid< 3 >::IsOnBoundary )
                , ( bp::arg("gridIndex") ) );
        
        }
        { //::RegularGrid< 3 >::IsOnBoundary
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsOnBoundary_function_type)( unsigned int,unsigned int,unsigned int ) ;
            
            RegularGrid3_exposer.def( 
                "IsOnBoundary"
                , IsOnBoundary_function_type( &::RegularGrid< 3 >::IsOnBoundary )
                , ( bp::arg("xIndex"), bp::arg("yIndex"), bp::arg("zIndex") ) );
        
        }
        { //::RegularGrid< 3 >::IsSegmentAtLatticeSite
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsSegmentAtLatticeSite_function_type)( unsigned int,bool ) ;
            
            RegularGrid3_exposer.def( 
                "IsSegmentAtLatticeSite"
                , IsSegmentAtLatticeSite_function_type( &::RegularGrid< 3 >::IsSegmentAtLatticeSite )
                , ( bp::arg("index"), bp::arg("update") ) );
        
        }
        { //::RegularGrid< 3 >::SetCellPopulation
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulation_function_type)( ::AbstractCellPopulation< 3, 3 > &,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RegularGrid3_exposer.def( 
                "SetCellPopulation"
                , SetCellPopulation_function_type( &::RegularGrid< 3 >::SetCellPopulation )
                , ( bp::arg("rCellPopulation"), bp::arg("cellPopulationLengthScale") ) );
        
        }
        { //::RegularGrid< 3 >::SetExtents
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetExtents_function_type)( ::std::vector< unsigned int > ) ;
            
            RegularGrid3_exposer.def( 
                "SetExtents"
                , SetExtents_function_type( &::RegularGrid< 3 >::SetExtents )
                , ( bp::arg("extents") ) );
        
        }
        { //::RegularGrid< 3 >::SetOrigin
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOrigin_function_type)( ::DimensionalChastePoint< 3 > ) ;
            
            RegularGrid3_exposer.def( 
                "SetOrigin"
                , SetOrigin_function_type( &::RegularGrid< 3 >::SetOrigin )
                , ( bp::arg("origin") ) );
        
        }
        { //::RegularGrid< 3 >::SetPointValues
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetPointValues_function_type)( ::std::vector< double > ) ;
            
            RegularGrid3_exposer.def( 
                "SetPointValues"
                , SetPointValues_function_type( &::RegularGrid< 3 >::SetPointValues )
                , ( bp::arg("pointSolution") ) );
        
        }
        { //::RegularGrid< 3 >::SetSpacing
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetSpacing_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            RegularGrid3_exposer.def( 
                "SetSpacing"
                , SetSpacing_function_type( &::RegularGrid< 3 >::SetSpacing )
                , ( bp::arg("spacing") ) );
        
        }
        { //::RegularGrid< 3 >::SetUpVtkGrid
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUpVtkGrid_function_type)(  ) ;
            
            RegularGrid3_exposer.def( 
                "SetUpVtkGrid"
                , SetUpVtkGrid_function_type( &::RegularGrid< 3 >::SetUpVtkGrid ) );
        
        }
        { //::RegularGrid< 3 >::SetVesselNetwork
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 3 > > ) ;
            
            RegularGrid3_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::RegularGrid< 3 >::SetVesselNetwork )
                , ( bp::arg("pNetwork") ) );
        
        }
        { //::RegularGrid< 3 >::Write
        
            typedef RegularGrid< 3 > exported_class_t;
            typedef void ( exported_class_t::*Write_function_type)( ::boost::shared_ptr< OutputFileHandler > ) ;
            
            RegularGrid3_exposer.def( 
                "Write"
                , Write_function_type( &::RegularGrid< 3 >::Write )
                , ( bp::arg("pFileHandler") ) );
        
        }
        RegularGrid3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< RegularGrid<3> > >();
    }

    { //::RegularGridWriter
        typedef bp::class_< RegularGridWriter > RegularGridWriter_exposer_t;
        RegularGridWriter_exposer_t RegularGridWriter_exposer = RegularGridWriter_exposer_t( "RegularGridWriter", bp::init< >() );
        bp::scope RegularGridWriter_scope( RegularGridWriter_exposer );
        { //::RegularGridWriter::Create
        
            typedef ::boost::shared_ptr< RegularGridWriter > ( *Create_function_type )(  );
            
            RegularGridWriter_exposer.def( 
                "Create"
                , Create_function_type( &::RegularGridWriter::Create ) );
        
        }
        { //::RegularGridWriter::SetFilename
        
            typedef void ( ::RegularGridWriter::*SetFilename_function_type)( ::std::string const & ) ;
            
            RegularGridWriter_exposer.def( 
                "SetFilename"
                , SetFilename_function_type( &::RegularGridWriter::SetFilename )
                , ( bp::arg("rFilename") ) );
        
        }
        { //::RegularGridWriter::SetImage
        
            typedef void ( ::RegularGridWriter::*SetImage_function_type)( ::vtkSmartPointer< vtkImageData > ) ;
            
            RegularGridWriter_exposer.def( 
                "SetImage"
                , SetImage_function_type( &::RegularGridWriter::SetImage )
                , ( bp::arg("pImage") ) );
        
        }
        { //::RegularGridWriter::Write
        
            typedef void ( ::RegularGridWriter::*Write_function_type)(  ) ;
            
            RegularGridWriter_exposer.def( 
                "Write"
                , Write_function_type( &::RegularGridWriter::Write ) );
        
        }
        RegularGridWriter_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< RegularGridWriter > >();
    }

    { //::Instantiation
    
        typedef int ( *Instantiation_function_type )(  );
        
        bp::def( 
            "Instantiation"
            , Instantiation_function_type( &::Instantiation ) );
    
    }
}
