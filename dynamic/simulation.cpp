// This file has been generated by Py++.

#include "boost/python.hpp"

#include "indexing_suite/value_traits.hpp"

#include "indexing_suite/container_suite.hpp"

#include "indexing_suite/vector.hpp"

#include "simulation_headers.hpp"

namespace bp = boost::python;

<<<<<<< HEAD
=======
struct AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper : AbstractCellBasedSimulationModifier< 2, 2 >, bp::wrapper< AbstractCellBasedSimulationModifier< 2, 2 > > {

    AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper( )
    : AbstractCellBasedSimulationModifier<2, 2>( )
      , bp::wrapper< AbstractCellBasedSimulationModifier< 2, 2 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" );
        func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ){
        bp::override func_SetupSolve = this->get_override( "SetupSolve" );
        func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ){
        bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" );
        func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

struct AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper : AbstractCellBasedSimulationModifier< 3, 3 >, bp::wrapper< AbstractCellBasedSimulationModifier< 3, 3 > > {

    AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper( )
    : AbstractCellBasedSimulationModifier<3, 3>( )
      , bp::wrapper< AbstractCellBasedSimulationModifier< 3, 3 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ){
        bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" );
        func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ){
        bp::override func_SetupSolve = this->get_override( "SetupSolve" );
        func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ){
        bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" );
        func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

};

>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477
struct MicrovesselSimulationModifier_less__2__greater__wrapper : MicrovesselSimulationModifier< 2 >, bp::wrapper< MicrovesselSimulationModifier< 2 > > {

    MicrovesselSimulationModifier_less__2__greater__wrapper(MicrovesselSimulationModifier<2> const & arg )
    : MicrovesselSimulationModifier<2>( arg )
      , bp::wrapper< MicrovesselSimulationModifier< 2 > >(){
        // copy constructor
        
    }

    MicrovesselSimulationModifier_less__2__greater__wrapper( )
    : MicrovesselSimulationModifier<2>( )
      , bp::wrapper< MicrovesselSimulationModifier< 2 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->MicrovesselSimulationModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        MicrovesselSimulationModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->MicrovesselSimulationModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        MicrovesselSimulationModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->MicrovesselSimulationModifier< 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        MicrovesselSimulationModifier< 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

<<<<<<< HEAD
=======
    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477
};

struct MicrovesselSimulationModifier_less__3__greater__wrapper : MicrovesselSimulationModifier< 3 >, bp::wrapper< MicrovesselSimulationModifier< 3 > > {

    MicrovesselSimulationModifier_less__3__greater__wrapper(MicrovesselSimulationModifier<3> const & arg )
    : MicrovesselSimulationModifier<3>( arg )
      , bp::wrapper< MicrovesselSimulationModifier< 3 > >(){
        // copy constructor
        
    }

    MicrovesselSimulationModifier_less__3__greater__wrapper( )
    : MicrovesselSimulationModifier<3>( )
      , bp::wrapper< MicrovesselSimulationModifier< 3 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->MicrovesselSimulationModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        MicrovesselSimulationModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->MicrovesselSimulationModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        MicrovesselSimulationModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->MicrovesselSimulationModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        MicrovesselSimulationModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

<<<<<<< HEAD
};

namespace boost { namespace python { namespace indexing {

template<>
struct value_traits< boost::shared_ptr< AbstractDiscreteContinuumSolver< 2 > > >{

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
=======
    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

};

struct Owen2011TrackingModifier_less__2__greater__wrapper : Owen2011TrackingModifier< 2 >, bp::wrapper< Owen2011TrackingModifier< 2 > > {

    Owen2011TrackingModifier_less__2__greater__wrapper(Owen2011TrackingModifier<2> const & arg )
    : Owen2011TrackingModifier<2>( arg )
      , bp::wrapper< Owen2011TrackingModifier< 2 > >(){
        // copy constructor
        
    }

    Owen2011TrackingModifier_less__2__greater__wrapper( )
    : Owen2011TrackingModifier<2>( )
      , bp::wrapper< Owen2011TrackingModifier< 2 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->Owen2011TrackingModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        Owen2011TrackingModifier< 2 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->Owen2011TrackingModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation, ::std::string outputDirectory ) {
        Owen2011TrackingModifier< 2 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->Owen2011TrackingModifier< 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        Owen2011TrackingModifier< 2 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 2, 2 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477
    }

};

<<<<<<< HEAD
}/*indexing*/ } /*python*/ } /*boost*/
=======
struct Owen2011TrackingModifier_less__3__greater__wrapper : Owen2011TrackingModifier< 3 >, bp::wrapper< Owen2011TrackingModifier< 3 > > {

    Owen2011TrackingModifier_less__3__greater__wrapper(Owen2011TrackingModifier<3> const & arg )
    : Owen2011TrackingModifier<3>( arg )
      , bp::wrapper< Owen2011TrackingModifier< 3 > >(){
        // copy constructor
        
    }

    Owen2011TrackingModifier_less__3__greater__wrapper( )
    : Owen2011TrackingModifier<3>( )
      , bp::wrapper< Owen2011TrackingModifier< 3 > >(){
        // null constructor
    
    }

    virtual void OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        if( bp::override func_OutputSimulationModifierParameters = this->get_override( "OutputSimulationModifierParameters" ) )
            func_OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        else{
            this->Owen2011TrackingModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
        }
    }
    
    void default_OutputSimulationModifierParameters( ::out_stream & rParamsFile ) {
        Owen2011TrackingModifier< 3 >::OutputSimulationModifierParameters( boost::ref(rParamsFile) );
    }

    virtual void SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        if( bp::override func_SetupSolve = this->get_override( "SetupSolve" ) )
            func_SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        else{
            this->Owen2011TrackingModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
        }
    }
    
    void default_SetupSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation, ::std::string outputDirectory ) {
        Owen2011TrackingModifier< 3 >::SetupSolve( boost::ref(rCellPopulation), outputDirectory );
    }

    virtual void UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfTimeStep = this->get_override( "UpdateAtEndOfTimeStep" ) )
            func_UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        else{
            this->Owen2011TrackingModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        Owen2011TrackingModifier< 3 >::UpdateAtEndOfTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfOutputTimeStep = this->get_override( "UpdateAtEndOfOutputTimeStep" ) )
            func_UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfOutputTimeStep( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep( boost::ref(rCellPopulation) );
    }

    virtual void UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        if( bp::override func_UpdateAtEndOfSolve = this->get_override( "UpdateAtEndOfSolve" ) )
            func_UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        else{
            this->AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
        }
    }
    
    void default_UpdateAtEndOfSolve( ::AbstractCellPopulation< 3, 3 > & rCellPopulation ) {
        AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve( boost::ref(rCellPopulation) );
    }

};
>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477

namespace boost { namespace python { namespace indexing {

template<>
<<<<<<< HEAD
struct value_traits< boost::shared_ptr< AbstractDiscreteContinuumSolver< 3 > > >{
=======
struct value_traits< boost::shared_ptr< AbstractDiscreteContinuumSolver< 2 > > >{
>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

namespace boost { namespace python { namespace indexing {

template<>
<<<<<<< HEAD
struct value_traits< boost::shared_ptr< SimpleCellPopulation< 3 > > >{
=======
struct value_traits< boost::shared_ptr< AbstractDiscreteContinuumSolver< 3 > > >{
>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477

    static bool const equality_comparable = false;
    

    static bool const less_than_comparable = false;
    

    template<typename PythonClass, typename Policy>
    static void visit_container_class(PythonClass &, Policy const &){
        
    }

};

}/*indexing*/ } /*python*/ } /*boost*/

BOOST_PYTHON_MODULE(_chaste_project_MicrovesselChaste_simulation){
    { //::std::vector< std::string >
<<<<<<< HEAD
        typedef bp::class_< std::vector< std::string > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< std::string > >() );
    }

    { //::std::vector< double >
        typedef bp::class_< std::vector< double > > vector_less__double__greater__exposer_t;
        vector_less__double__greater__exposer_t vector_less__double__greater__exposer = vector_less__double__greater__exposer_t( "vector_less__double__greater_" );
        bp::scope vector_less__double__greater__scope( vector_less__double__greater__exposer );
        vector_less__double__greater__exposer.def( bp::indexing::vector_suite< std::vector< double > >() );
    }

    { //::std::vector< boost::shared_ptr<SimpleCellPopulation<3> > >
        typedef bp::class_< std::vector< boost::shared_ptr<SimpleCellPopulation<3> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<SimpleCellPopulation<3> > > >() );
=======
        typedef bp::class_< std::vector< std::string > > VecString_exposer_t;
        VecString_exposer_t VecString_exposer = VecString_exposer_t( "VecString" );
        bp::scope VecString_scope( VecString_exposer );
        VecString_exposer.def( bp::indexing::vector_suite< std::vector< std::string > >() );
>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477
    }

    { //::std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<3> > >
        typedef bp::class_< std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<3> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<3> > > >() );
    }

    { //::std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<2> > >
        typedef bp::class_< std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<2> > > > __type_exposer_t;
        __type_exposer_t __type_exposer = __type_exposer_t( "__type" );
        bp::scope __type_scope( __type_exposer );
        __type_exposer.def( bp::indexing::vector_suite< std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<2> > > >() );
    }

<<<<<<< HEAD
    { //::MicrovesselSimulationModifier< 2 >
        typedef bp::class_< MicrovesselSimulationModifier_less__2__greater__wrapper > MicrovesselSimulationModifier2_exposer_t;
=======
    bp::class_< AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper, boost::noncopyable >( "AbstractCellBasedSimulationModifier2_2", bp::init< >() )    
        .def( 
            "OutputSimulationModifierInfo"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::out_stream & ))( &::AbstractCellBasedSimulationModifier< 2, 2 >::OutputSimulationModifierInfo )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputSimulationModifierParameters"
            , bp::pure_virtual( (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::out_stream & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::OutputSimulationModifierParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetupSolve"
            , bp::pure_virtual( (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::SetupSolve) )
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep)
            , (void ( AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve)
            , (void ( AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&AbstractCellBasedSimulationModifier_less__2_comma__2__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , bp::pure_virtual( (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfTimeStep) )
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper, boost::noncopyable >( "AbstractCellBasedSimulationModifier3_3", bp::init< >() )    
        .def( 
            "OutputSimulationModifierInfo"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::out_stream & ))( &::AbstractCellBasedSimulationModifier< 3, 3 >::OutputSimulationModifierInfo )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "OutputSimulationModifierParameters"
            , bp::pure_virtual( (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::out_stream & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::OutputSimulationModifierParameters) )
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetupSolve"
            , bp::pure_virtual( (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::SetupSolve) )
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep)
            , (void ( AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve)
            , (void ( AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&AbstractCellBasedSimulationModifier_less__3_comma__3__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , bp::pure_virtual( (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfTimeStep) )
            , ( bp::arg("rCellPopulation") ) );

    { //::MicrovesselSimulationModifier< 2 >
        typedef bp::class_< MicrovesselSimulationModifier_less__2__greater__wrapper, bp::bases< AbstractCellBasedSimulationModifier< 2, 2 > > > MicrovesselSimulationModifier2_exposer_t;
>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477
        MicrovesselSimulationModifier2_exposer_t MicrovesselSimulationModifier2_exposer = MicrovesselSimulationModifier2_exposer_t( "MicrovesselSimulationModifier2", bp::init< >() );
        bp::scope MicrovesselSimulationModifier2_scope( MicrovesselSimulationModifier2_exposer );
        { //::MicrovesselSimulationModifier< 2 >::Create
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef ::boost::shared_ptr< MicrovesselSimulationModifier< 2 > > ( *Create_function_type )(  );
            
            MicrovesselSimulationModifier2_exposer.def( 
                "Create"
                , Create_function_type( &::MicrovesselSimulationModifier< 2 >::Create ) );
        
        }
        { //::MicrovesselSimulationModifier< 2 >::OutputSimulationModifierParameters
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationModifierParameters_function_type)( ::out_stream & ) ;
            typedef void ( MicrovesselSimulationModifier_less__2__greater__wrapper::*default_OutputSimulationModifierParameters_function_type)( ::out_stream & ) ;
            
            MicrovesselSimulationModifier2_exposer.def( 
                "OutputSimulationModifierParameters"
                , OutputSimulationModifierParameters_function_type(&::MicrovesselSimulationModifier< 2 >::OutputSimulationModifierParameters)
                , default_OutputSimulationModifierParameters_function_type(&MicrovesselSimulationModifier_less__2__greater__wrapper::default_OutputSimulationModifierParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::MicrovesselSimulationModifier< 2 >::SetCellDataUpdateLabels
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetCellDataUpdateLabels_function_type)( ::std::vector< std::string > ) ;
            
            MicrovesselSimulationModifier2_exposer.def( 
                "SetCellDataUpdateLabels"
                , SetCellDataUpdateLabels_function_type( &::MicrovesselSimulationModifier< 2 >::SetCellDataUpdateLabels )
                , ( bp::arg("labels") ) );
        
        }
        { //::MicrovesselSimulationModifier< 2 >::SetCellPopulationConcentrationScale
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulationConcentrationScale_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MicrovesselSimulationModifier2_exposer.def( 
                "SetCellPopulationConcentrationScale"
                , SetCellPopulationConcentrationScale_function_type( &::MicrovesselSimulationModifier< 2 >::SetCellPopulationConcentrationScale )
                , ( bp::arg("cellConcentrationScale") ) );
        
        }
        { //::MicrovesselSimulationModifier< 2 >::SetCellPopulationLengthScale
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulationLengthScale_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MicrovesselSimulationModifier2_exposer.def( 
                "SetCellPopulationLengthScale"
                , SetCellPopulationLengthScale_function_type( &::MicrovesselSimulationModifier< 2 >::SetCellPopulationLengthScale )
                , ( bp::arg("cellLengthScale") ) );
        
        }
        { //::MicrovesselSimulationModifier< 2 >::SetMicrovesselSolver
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetMicrovesselSolver_function_type)( ::boost::shared_ptr< MicrovesselSolver< 2 > > ) ;
            
            MicrovesselSimulationModifier2_exposer.def( 
                "SetMicrovesselSolver"
                , SetMicrovesselSolver_function_type( &::MicrovesselSimulationModifier< 2 >::SetMicrovesselSolver )
                , ( bp::arg("pSolver") ) );
        
        }
        { //::MicrovesselSimulationModifier< 2 >::SetupSolve
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetupSolve_function_type)( ::AbstractCellPopulation< 2, 2 > &,::std::string ) ;
            typedef void ( MicrovesselSimulationModifier_less__2__greater__wrapper::*default_SetupSolve_function_type)( ::AbstractCellPopulation< 2, 2 > &,::std::string ) ;
            
            MicrovesselSimulationModifier2_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type(&::MicrovesselSimulationModifier< 2 >::SetupSolve)
                , default_SetupSolve_function_type(&MicrovesselSimulationModifier_less__2__greater__wrapper::default_SetupSolve)
                , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) );
        
        }
        { //::MicrovesselSimulationModifier< 2 >::UpdateAtEndOfTimeStep
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfTimeStep_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            typedef void ( MicrovesselSimulationModifier_less__2__greater__wrapper::*default_UpdateAtEndOfTimeStep_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            
            MicrovesselSimulationModifier2_exposer.def( 
                "UpdateAtEndOfTimeStep"
                , UpdateAtEndOfTimeStep_function_type(&::MicrovesselSimulationModifier< 2 >::UpdateAtEndOfTimeStep)
                , default_UpdateAtEndOfTimeStep_function_type(&MicrovesselSimulationModifier_less__2__greater__wrapper::default_UpdateAtEndOfTimeStep)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        { //::MicrovesselSimulationModifier< 2 >::UpdateCellData
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellData_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            
            MicrovesselSimulationModifier2_exposer.def( 
                "UpdateCellData"
                , UpdateCellData_function_type( &::MicrovesselSimulationModifier< 2 >::UpdateCellData )
                , ( bp::arg("rCellPopulation") ) );
        
        }
<<<<<<< HEAD
=======
        { //::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfOutputTimeStep_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            typedef void ( MicrovesselSimulationModifier_less__2__greater__wrapper::*default_UpdateAtEndOfOutputTimeStep_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            
            MicrovesselSimulationModifier2_exposer.def( 
                "UpdateAtEndOfOutputTimeStep"
                , UpdateAtEndOfOutputTimeStep_function_type(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep)
                , default_UpdateAtEndOfOutputTimeStep_function_type(&MicrovesselSimulationModifier_less__2__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve
        
            typedef MicrovesselSimulationModifier< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfSolve_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            typedef void ( MicrovesselSimulationModifier_less__2__greater__wrapper::*default_UpdateAtEndOfSolve_function_type)( ::AbstractCellPopulation< 2, 2 > & ) ;
            
            MicrovesselSimulationModifier2_exposer.def( 
                "UpdateAtEndOfSolve"
                , UpdateAtEndOfSolve_function_type(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve)
                , default_UpdateAtEndOfSolve_function_type(&MicrovesselSimulationModifier_less__2__greater__wrapper::default_UpdateAtEndOfSolve)
                , ( bp::arg("rCellPopulation") ) );
        
        }
>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477
        MicrovesselSimulationModifier2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MicrovesselSimulationModifier<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< MicrovesselSimulationModifier< 2 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< MicrovesselSimulationModifier< 2 > >, boost::shared_ptr< Identifiable > >();
    }

    { //::MicrovesselSimulationModifier< 3 >
<<<<<<< HEAD
        typedef bp::class_< MicrovesselSimulationModifier_less__3__greater__wrapper > MicrovesselSimulationModifier3_exposer_t;
=======
        typedef bp::class_< MicrovesselSimulationModifier_less__3__greater__wrapper, bp::bases< AbstractCellBasedSimulationModifier< 3, 3 > > > MicrovesselSimulationModifier3_exposer_t;
>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477
        MicrovesselSimulationModifier3_exposer_t MicrovesselSimulationModifier3_exposer = MicrovesselSimulationModifier3_exposer_t( "MicrovesselSimulationModifier3", bp::init< >() );
        bp::scope MicrovesselSimulationModifier3_scope( MicrovesselSimulationModifier3_exposer );
        { //::MicrovesselSimulationModifier< 3 >::Create
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef ::boost::shared_ptr< MicrovesselSimulationModifier< 3 > > ( *Create_function_type )(  );
            
            MicrovesselSimulationModifier3_exposer.def( 
                "Create"
                , Create_function_type( &::MicrovesselSimulationModifier< 3 >::Create ) );
        
        }
        { //::MicrovesselSimulationModifier< 3 >::OutputSimulationModifierParameters
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*OutputSimulationModifierParameters_function_type)( ::out_stream & ) ;
            typedef void ( MicrovesselSimulationModifier_less__3__greater__wrapper::*default_OutputSimulationModifierParameters_function_type)( ::out_stream & ) ;
            
            MicrovesselSimulationModifier3_exposer.def( 
                "OutputSimulationModifierParameters"
                , OutputSimulationModifierParameters_function_type(&::MicrovesselSimulationModifier< 3 >::OutputSimulationModifierParameters)
                , default_OutputSimulationModifierParameters_function_type(&MicrovesselSimulationModifier_less__3__greater__wrapper::default_OutputSimulationModifierParameters)
                , ( bp::arg("rParamsFile") ) );
        
        }
        { //::MicrovesselSimulationModifier< 3 >::SetCellDataUpdateLabels
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellDataUpdateLabels_function_type)( ::std::vector< std::string > ) ;
            
            MicrovesselSimulationModifier3_exposer.def( 
                "SetCellDataUpdateLabels"
                , SetCellDataUpdateLabels_function_type( &::MicrovesselSimulationModifier< 3 >::SetCellDataUpdateLabels )
                , ( bp::arg("labels") ) );
        
        }
        { //::MicrovesselSimulationModifier< 3 >::SetCellPopulationConcentrationScale
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulationConcentrationScale_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MicrovesselSimulationModifier3_exposer.def( 
                "SetCellPopulationConcentrationScale"
                , SetCellPopulationConcentrationScale_function_type( &::MicrovesselSimulationModifier< 3 >::SetCellPopulationConcentrationScale )
                , ( bp::arg("cellConcentrationScale") ) );
        
        }
        { //::MicrovesselSimulationModifier< 3 >::SetCellPopulationLengthScale
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulationLengthScale_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MicrovesselSimulationModifier3_exposer.def( 
                "SetCellPopulationLengthScale"
                , SetCellPopulationLengthScale_function_type( &::MicrovesselSimulationModifier< 3 >::SetCellPopulationLengthScale )
                , ( bp::arg("cellLengthScale") ) );
        
        }
        { //::MicrovesselSimulationModifier< 3 >::SetMicrovesselSolver
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetMicrovesselSolver_function_type)( ::boost::shared_ptr< MicrovesselSolver< 3 > > ) ;
            
            MicrovesselSimulationModifier3_exposer.def( 
                "SetMicrovesselSolver"
                , SetMicrovesselSolver_function_type( &::MicrovesselSimulationModifier< 3 >::SetMicrovesselSolver )
                , ( bp::arg("pSolver") ) );
        
        }
        { //::MicrovesselSimulationModifier< 3 >::SetupSolve
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetupSolve_function_type)( ::AbstractCellPopulation< 3, 3 > &,::std::string ) ;
            typedef void ( MicrovesselSimulationModifier_less__3__greater__wrapper::*default_SetupSolve_function_type)( ::AbstractCellPopulation< 3, 3 > &,::std::string ) ;
            
            MicrovesselSimulationModifier3_exposer.def( 
                "SetupSolve"
                , SetupSolve_function_type(&::MicrovesselSimulationModifier< 3 >::SetupSolve)
                , default_SetupSolve_function_type(&MicrovesselSimulationModifier_less__3__greater__wrapper::default_SetupSolve)
                , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) );
        
        }
        { //::MicrovesselSimulationModifier< 3 >::UpdateAtEndOfTimeStep
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfTimeStep_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            typedef void ( MicrovesselSimulationModifier_less__3__greater__wrapper::*default_UpdateAtEndOfTimeStep_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            
            MicrovesselSimulationModifier3_exposer.def( 
                "UpdateAtEndOfTimeStep"
                , UpdateAtEndOfTimeStep_function_type(&::MicrovesselSimulationModifier< 3 >::UpdateAtEndOfTimeStep)
                , default_UpdateAtEndOfTimeStep_function_type(&MicrovesselSimulationModifier_less__3__greater__wrapper::default_UpdateAtEndOfTimeStep)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        { //::MicrovesselSimulationModifier< 3 >::UpdateCellData
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellData_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            
            MicrovesselSimulationModifier3_exposer.def( 
                "UpdateCellData"
                , UpdateCellData_function_type( &::MicrovesselSimulationModifier< 3 >::UpdateCellData )
                , ( bp::arg("rCellPopulation") ) );
        
        }
<<<<<<< HEAD
=======
        { //::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfOutputTimeStep_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            typedef void ( MicrovesselSimulationModifier_less__3__greater__wrapper::*default_UpdateAtEndOfOutputTimeStep_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            
            MicrovesselSimulationModifier3_exposer.def( 
                "UpdateAtEndOfOutputTimeStep"
                , UpdateAtEndOfOutputTimeStep_function_type(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep)
                , default_UpdateAtEndOfOutputTimeStep_function_type(&MicrovesselSimulationModifier_less__3__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
                , ( bp::arg("rCellPopulation") ) );
        
        }
        { //::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve
        
            typedef MicrovesselSimulationModifier< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAtEndOfSolve_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            typedef void ( MicrovesselSimulationModifier_less__3__greater__wrapper::*default_UpdateAtEndOfSolve_function_type)( ::AbstractCellPopulation< 3, 3 > & ) ;
            
            MicrovesselSimulationModifier3_exposer.def( 
                "UpdateAtEndOfSolve"
                , UpdateAtEndOfSolve_function_type(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve)
                , default_UpdateAtEndOfSolve_function_type(&MicrovesselSimulationModifier_less__3__greater__wrapper::default_UpdateAtEndOfSolve)
                , ( bp::arg("rCellPopulation") ) );
        
        }
>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477
        MicrovesselSimulationModifier3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MicrovesselSimulationModifier<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< MicrovesselSimulationModifier< 3 > >, boost::shared_ptr< AbstractCellBasedSimulationModifier< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< MicrovesselSimulationModifier< 3 > >, boost::shared_ptr< Identifiable > >();
    }

    { //::MicrovesselSolver< 2 >
        typedef bp::class_< MicrovesselSolver< 2 > > MicrovesselSolver2_exposer_t;
        MicrovesselSolver2_exposer_t MicrovesselSolver2_exposer = MicrovesselSolver2_exposer_t( "MicrovesselSolver2", bp::init< >() );
        bp::scope MicrovesselSolver2_scope( MicrovesselSolver2_exposer );
        { //::MicrovesselSolver< 2 >::AddDiscreteContinuumSolver
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddDiscreteContinuumSolver_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumSolver< 2 > > ) ;
            
            MicrovesselSolver2_exposer.def( 
                "AddDiscreteContinuumSolver"
                , AddDiscreteContinuumSolver_function_type( &::MicrovesselSolver< 2 >::AddDiscreteContinuumSolver )
                , ( bp::arg("pDiscreteContinuumSolver") ) );
        
        }
        { //::MicrovesselSolver< 2 >::Create
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef ::boost::shared_ptr< MicrovesselSolver< 2 > > ( *Create_function_type )(  );
            
            MicrovesselSolver2_exposer.def( 
                "Create"
                , Create_function_type( &::MicrovesselSolver< 2 >::Create ) );
        
        }
        { //::MicrovesselSolver< 2 >::GetDiscreteContinuumSolvers
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<2> > > ( exported_class_t::*GetDiscreteContinuumSolvers_function_type)(  ) ;
            
            MicrovesselSolver2_exposer.def( 
                "GetDiscreteContinuumSolvers"
                , GetDiscreteContinuumSolvers_function_type( &::MicrovesselSolver< 2 >::GetDiscreteContinuumSolvers ) );
        
        }
        { //::MicrovesselSolver< 2 >::Increment
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Increment_function_type)(  ) ;
            
            MicrovesselSolver2_exposer.def( 
                "Increment"
                , Increment_function_type( &::MicrovesselSolver< 2 >::Increment ) );
        
        }
        { //::MicrovesselSolver< 2 >::Run
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Run_function_type)(  ) ;
            
            MicrovesselSolver2_exposer.def( 
                "Run"
                , Run_function_type( &::MicrovesselSolver< 2 >::Run ) );
        
        }
        { //::MicrovesselSolver< 2 >::SetAngiogenesisSolver
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetAngiogenesisSolver_function_type)( ::boost::shared_ptr< AngiogenesisSolver< 2 > > ) ;
            
            MicrovesselSolver2_exposer.def( 
                "SetAngiogenesisSolver"
                , SetAngiogenesisSolver_function_type( &::MicrovesselSolver< 2 >::SetAngiogenesisSolver )
                , ( bp::arg("pAngiogenesisSolver") ) );
        
        }
        { //::MicrovesselSolver< 2 >::SetDiscreteContinuumSolversHaveCompatibleGridIndexing
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetDiscreteContinuumSolversHaveCompatibleGridIndexing_function_type)( bool ) ;
            
            MicrovesselSolver2_exposer.def( 
                "SetDiscreteContinuumSolversHaveCompatibleGridIndexing"
                , SetDiscreteContinuumSolversHaveCompatibleGridIndexing_function_type( &::MicrovesselSolver< 2 >::SetDiscreteContinuumSolversHaveCompatibleGridIndexing )
                , ( bp::arg("compatibleIndexing") ) );
        
        }
        { //::MicrovesselSolver< 2 >::SetOutputFileHandler
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputFileHandler_function_type)( ::boost::shared_ptr< OutputFileHandler > ) ;
            
            MicrovesselSolver2_exposer.def( 
                "SetOutputFileHandler"
                , SetOutputFileHandler_function_type( &::MicrovesselSolver< 2 >::SetOutputFileHandler )
                , ( bp::arg("pFileHandler") ) );
        
        }
        { //::MicrovesselSolver< 2 >::SetOutputFrequency
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputFrequency_function_type)( unsigned int ) ;
            
            MicrovesselSolver2_exposer.def( 
                "SetOutputFrequency"
                , SetOutputFrequency_function_type( &::MicrovesselSolver< 2 >::SetOutputFrequency )
                , ( bp::arg("frequency") ) );
        
        }
        { //::MicrovesselSolver< 2 >::SetRegressionSolver
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetRegressionSolver_function_type)( ::boost::shared_ptr< RegressionSolver< 2 > > ) ;
            
            MicrovesselSolver2_exposer.def( 
                "SetRegressionSolver"
                , SetRegressionSolver_function_type( &::MicrovesselSolver< 2 >::SetRegressionSolver )
                , ( bp::arg("pRegressionSolver") ) );
        
        }
        { //::MicrovesselSolver< 2 >::SetStructuralAdaptationSolver
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetStructuralAdaptationSolver_function_type)( ::boost::shared_ptr< StructuralAdaptationSolver< 2 > > ) ;
            
            MicrovesselSolver2_exposer.def( 
                "SetStructuralAdaptationSolver"
                , SetStructuralAdaptationSolver_function_type( &::MicrovesselSolver< 2 >::SetStructuralAdaptationSolver )
                , ( bp::arg("pStructuralAdaptationSolver") ) );
        
        }
        { //::MicrovesselSolver< 2 >::SetUpdatePdeEachSolve
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetUpdatePdeEachSolve_function_type)( bool ) ;
            
            MicrovesselSolver2_exposer.def( 
                "SetUpdatePdeEachSolve"
                , SetUpdatePdeEachSolve_function_type( &::MicrovesselSolver< 2 >::SetUpdatePdeEachSolve )
                , ( bp::arg("doUpdate") ) );
        
        }
        { //::MicrovesselSolver< 2 >::SetVesselNetwork
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 2 > > ) ;
            
            MicrovesselSolver2_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::MicrovesselSolver< 2 >::SetVesselNetwork )
                , ( bp::arg("pNetwork") ) );
        
        }
        { //::MicrovesselSolver< 2 >::Setup
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Setup_function_type)(  ) ;
            
            MicrovesselSolver2_exposer.def( 
                "Setup"
                , Setup_function_type( &::MicrovesselSolver< 2 >::Setup ) );
        
        }
        { //::MicrovesselSolver< 2 >::SetupFromModifier
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetupFromModifier_function_type)( ::AbstractCellPopulation< 2, 2 > &,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >,::std::string const & ) ;
            
            MicrovesselSolver2_exposer.def( 
                "SetupFromModifier"
                , SetupFromModifier_function_type( &::MicrovesselSolver< 2 >::SetupFromModifier )
                , ( bp::arg("rCellPopulation"), bp::arg("cellReferenceLength"), bp::arg("cellReferenceConcentration"), bp::arg("rDirectory") ) );
        
        }
        { //::MicrovesselSolver< 2 >::UpdateCellData
        
            typedef MicrovesselSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellData_function_type)( ::std::vector< std::string > ) ;
            
            MicrovesselSolver2_exposer.def( 
                "UpdateCellData"
                , UpdateCellData_function_type( &::MicrovesselSolver< 2 >::UpdateCellData )
                , ( bp::arg("labels") ) );
        
        }
        MicrovesselSolver2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MicrovesselSolver<2> > >();
    }

    { //::MicrovesselSolver< 3 >
        typedef bp::class_< MicrovesselSolver< 3 > > MicrovesselSolver3_exposer_t;
        MicrovesselSolver3_exposer_t MicrovesselSolver3_exposer = MicrovesselSolver3_exposer_t( "MicrovesselSolver3", bp::init< >() );
        bp::scope MicrovesselSolver3_scope( MicrovesselSolver3_exposer );
        { //::MicrovesselSolver< 3 >::AddDiscreteContinuumSolver
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddDiscreteContinuumSolver_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumSolver< 3 > > ) ;
            
            MicrovesselSolver3_exposer.def( 
                "AddDiscreteContinuumSolver"
                , AddDiscreteContinuumSolver_function_type( &::MicrovesselSolver< 3 >::AddDiscreteContinuumSolver )
                , ( bp::arg("pDiscreteContinuumSolver") ) );
        
        }
        { //::MicrovesselSolver< 3 >::Create
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef ::boost::shared_ptr< MicrovesselSolver< 3 > > ( *Create_function_type )(  );
            
            MicrovesselSolver3_exposer.def( 
                "Create"
                , Create_function_type( &::MicrovesselSolver< 3 >::Create ) );
        
        }
        { //::MicrovesselSolver< 3 >::GetDiscreteContinuumSolvers
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<AbstractDiscreteContinuumSolver<3> > > ( exported_class_t::*GetDiscreteContinuumSolvers_function_type)(  ) ;
            
            MicrovesselSolver3_exposer.def( 
                "GetDiscreteContinuumSolvers"
                , GetDiscreteContinuumSolvers_function_type( &::MicrovesselSolver< 3 >::GetDiscreteContinuumSolvers ) );
        
        }
        { //::MicrovesselSolver< 3 >::Increment
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Increment_function_type)(  ) ;
            
            MicrovesselSolver3_exposer.def( 
                "Increment"
                , Increment_function_type( &::MicrovesselSolver< 3 >::Increment ) );
        
        }
        { //::MicrovesselSolver< 3 >::Run
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Run_function_type)(  ) ;
            
            MicrovesselSolver3_exposer.def( 
                "Run"
                , Run_function_type( &::MicrovesselSolver< 3 >::Run ) );
        
        }
        { //::MicrovesselSolver< 3 >::SetAngiogenesisSolver
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetAngiogenesisSolver_function_type)( ::boost::shared_ptr< AngiogenesisSolver< 3 > > ) ;
            
            MicrovesselSolver3_exposer.def( 
                "SetAngiogenesisSolver"
                , SetAngiogenesisSolver_function_type( &::MicrovesselSolver< 3 >::SetAngiogenesisSolver )
                , ( bp::arg("pAngiogenesisSolver") ) );
        
        }
        { //::MicrovesselSolver< 3 >::SetDiscreteContinuumSolversHaveCompatibleGridIndexing
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDiscreteContinuumSolversHaveCompatibleGridIndexing_function_type)( bool ) ;
            
            MicrovesselSolver3_exposer.def( 
                "SetDiscreteContinuumSolversHaveCompatibleGridIndexing"
                , SetDiscreteContinuumSolversHaveCompatibleGridIndexing_function_type( &::MicrovesselSolver< 3 >::SetDiscreteContinuumSolversHaveCompatibleGridIndexing )
                , ( bp::arg("compatibleIndexing") ) );
        
        }
        { //::MicrovesselSolver< 3 >::SetOutputFileHandler
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputFileHandler_function_type)( ::boost::shared_ptr< OutputFileHandler > ) ;
            
            MicrovesselSolver3_exposer.def( 
                "SetOutputFileHandler"
                , SetOutputFileHandler_function_type( &::MicrovesselSolver< 3 >::SetOutputFileHandler )
                , ( bp::arg("pFileHandler") ) );
        
        }
        { //::MicrovesselSolver< 3 >::SetOutputFrequency
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputFrequency_function_type)( unsigned int ) ;
            
            MicrovesselSolver3_exposer.def( 
                "SetOutputFrequency"
                , SetOutputFrequency_function_type( &::MicrovesselSolver< 3 >::SetOutputFrequency )
                , ( bp::arg("frequency") ) );
        
        }
        { //::MicrovesselSolver< 3 >::SetRegressionSolver
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRegressionSolver_function_type)( ::boost::shared_ptr< RegressionSolver< 3 > > ) ;
            
            MicrovesselSolver3_exposer.def( 
                "SetRegressionSolver"
                , SetRegressionSolver_function_type( &::MicrovesselSolver< 3 >::SetRegressionSolver )
                , ( bp::arg("pRegressionSolver") ) );
        
        }
        { //::MicrovesselSolver< 3 >::SetStructuralAdaptationSolver
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetStructuralAdaptationSolver_function_type)( ::boost::shared_ptr< StructuralAdaptationSolver< 3 > > ) ;
            
            MicrovesselSolver3_exposer.def( 
                "SetStructuralAdaptationSolver"
                , SetStructuralAdaptationSolver_function_type( &::MicrovesselSolver< 3 >::SetStructuralAdaptationSolver )
                , ( bp::arg("pStructuralAdaptationSolver") ) );
        
        }
        { //::MicrovesselSolver< 3 >::SetUpdatePdeEachSolve
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUpdatePdeEachSolve_function_type)( bool ) ;
            
            MicrovesselSolver3_exposer.def( 
                "SetUpdatePdeEachSolve"
                , SetUpdatePdeEachSolve_function_type( &::MicrovesselSolver< 3 >::SetUpdatePdeEachSolve )
                , ( bp::arg("doUpdate") ) );
        
        }
        { //::MicrovesselSolver< 3 >::SetVesselNetwork
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 3 > > ) ;
            
            MicrovesselSolver3_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::MicrovesselSolver< 3 >::SetVesselNetwork )
                , ( bp::arg("pNetwork") ) );
        
        }
        { //::MicrovesselSolver< 3 >::Setup
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*Setup_function_type)(  ) ;
            
            MicrovesselSolver3_exposer.def( 
                "Setup"
                , Setup_function_type( &::MicrovesselSolver< 3 >::Setup ) );
        
        }
        { //::MicrovesselSolver< 3 >::SetupFromModifier
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetupFromModifier_function_type)( ::AbstractCellPopulation< 3, 3 > &,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >,::std::string const & ) ;
            
            MicrovesselSolver3_exposer.def( 
                "SetupFromModifier"
                , SetupFromModifier_function_type( &::MicrovesselSolver< 3 >::SetupFromModifier )
                , ( bp::arg("rCellPopulation"), bp::arg("cellReferenceLength"), bp::arg("cellReferenceConcentration"), bp::arg("rDirectory") ) );
        
        }
        { //::MicrovesselSolver< 3 >::UpdateCellData
        
            typedef MicrovesselSolver< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellData_function_type)( ::std::vector< std::string > ) ;
            
            MicrovesselSolver3_exposer.def( 
                "UpdateCellData"
                , UpdateCellData_function_type( &::MicrovesselSolver< 3 >::UpdateCellData )
                , ( bp::arg("labels") ) );
        
        }
        MicrovesselSolver3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MicrovesselSolver<3> > >();
    }

<<<<<<< HEAD
    bp::class_< NodeBasedSimulationWrapper >( "NodeBasedSimulationWrapper", bp::init< >() )    
        .def( 
            "GetOutputPopulations"
            , (::std::vector< boost::shared_ptr<SimpleCellPopulation<3> > > ( ::NodeBasedSimulationWrapper::* )(  ))( &::NodeBasedSimulationWrapper::GetOutputPopulations ) )    
        .def( 
            "Run"
            , (void ( ::NodeBasedSimulationWrapper::* )(  ))( &::NodeBasedSimulationWrapper::Run ) )    
        .def( 
            "SetInputPopulation"
            , (void ( ::NodeBasedSimulationWrapper::* )( ::boost::shared_ptr< SimpleCellPopulation< 3 > > ))( &::NodeBasedSimulationWrapper::SetInputPopulation )
            , ( bp::arg("pInputPopulation") ) )    
        .def( 
            "SetNumberOfTimeSteps"
            , (void ( ::NodeBasedSimulationWrapper::* )( unsigned int ))( &::NodeBasedSimulationWrapper::SetNumberOfTimeSteps )
            , ( bp::arg("numberOfTimeSteps") ) )    
        .def( 
            "SetTimeStepSize"
            , (void ( ::NodeBasedSimulationWrapper::* )( double ))( &::NodeBasedSimulationWrapper::SetTimeStepSize )
            , ( bp::arg("stepSize") ) );

    bp::class_< OnLatticeSimulationWrapper >( "OnLatticeSimulationWrapper", bp::init< >() )    
        .def( 
            "GetOutputPopulations"
            , (::std::vector< boost::shared_ptr<SimpleCellPopulation<3> > > ( ::OnLatticeSimulationWrapper::* )(  ))( &::OnLatticeSimulationWrapper::GetOutputPopulations ) )    
        .def( 
            "SetAlphaMax"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetAlphaMax )
            , ( bp::arg("value") ) )    
        .def( 
            "SetBetaMax"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetBetaMax )
            , ( bp::arg("value") ) )    
        .def( 
            "SetCellPopulation"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::boost::shared_ptr< CaBasedCellPopulation< 3 > > ))( &::OnLatticeSimulationWrapper::SetCellPopulation )
            , ( bp::arg("pInputPopulation") ) )    
        .def( 
            "SetDt"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetDt )
            , ( bp::arg("timeStepSize") ) )    
        .def( 
            "SetEndTime"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetEndTime )
            , ( bp::arg("endTime") ) )    
        .def( 
            "SetNetwork"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::boost::shared_ptr< VesselNetwork< 3 > > ))( &::OnLatticeSimulationWrapper::SetNetwork )
            , ( bp::arg("pNetwork") ) )    
        .def( 
            "SetOerAlphaMax"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetOerAlphaMax )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOerAlphaMin"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetOerAlphaMin )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOerBetaMax"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetOerBetaMax )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOerBetaMin"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetOerBetaMin )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOerConstant"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetOerConstant )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOutputDirectory"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::std::string const & ))( &::OnLatticeSimulationWrapper::SetOutputDirectory )
            , ( bp::arg("rDirectory") ) )    
        .def( 
            "SetRadiotherapyDose"
            , (void ( ::OnLatticeSimulationWrapper::* )( double ))( &::OnLatticeSimulationWrapper::SetRadiotherapyDose )
            , ( bp::arg("dose") ) )    
        .def( 
            "SetRadiotherapyHitTimes"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::std::vector< double > ))( &::OnLatticeSimulationWrapper::SetRadiotherapyHitTimes )
            , ( bp::arg("hitTimes") ) )    
        .def( 
            "SetSamplingTimestepMultiple"
            , (void ( ::OnLatticeSimulationWrapper::* )( unsigned int ))( &::OnLatticeSimulationWrapper::SetSamplingTimestepMultiple )
            , ( bp::arg("samplingMultiple") ) )    
        .def( 
            "SetUseRadiotherapyCellKiller"
            , (void ( ::OnLatticeSimulationWrapper::* )( bool ))( &::OnLatticeSimulationWrapper::SetUseRadiotherapyCellKiller )
            , ( bp::arg("UseKiller") ) )    
        .def( 
            "SetVesselDistanceTolerance"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ))( &::OnLatticeSimulationWrapper::SetVesselDistanceTolerance )
            , ( bp::arg("tolerance") ) )    
        .def( 
            "Solve"
            , (void ( ::OnLatticeSimulationWrapper::* )( ::boost::shared_ptr< MicrovesselSimulationModifier< 3 > > ))( &::OnLatticeSimulationWrapper::Solve )
            , ( bp::arg("pVtModifier") ) )    
        .def( 
            "UseOer"
            , (void ( ::OnLatticeSimulationWrapper::* )( bool ))( &::OnLatticeSimulationWrapper::UseOer )
            , ( bp::arg("useOer") ) );

    bp::class_< SimulationManager >( "SimulationManager", bp::init< >() )    
        .def( 
            "SetEndTimeAndNumberOfTimeSteps"
            , (void ( ::SimulationManager::* )( double,double ))( &::SimulationManager::SetEndTimeAndNumberOfTimeSteps )
            , ( bp::arg("endTime"), bp::arg("numberOfSteps") ) )    
        .def( 
            "Setup"
            , (void ( ::SimulationManager::* )(  ))( &::SimulationManager::Setup ) )    
        .def( 
            "TearDown"
            , (void ( ::SimulationManager::* )(  ))( &::SimulationManager::TearDown ) );
=======
    bp::class_< Owen2011TrackingModifier_less__2__greater__wrapper, bp::bases< AbstractCellBasedSimulationModifier< 2, 2 > > >( "Owen2011TrackingModifier2", bp::init< >() )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::Owen2011TrackingModifier<2>::* )( ::out_stream & ))(&::Owen2011TrackingModifier< 2 >::OutputSimulationModifierParameters)
            , (void ( Owen2011TrackingModifier_less__2__greater__wrapper::* )( ::out_stream & ))(&Owen2011TrackingModifier_less__2__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::Owen2011TrackingModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&::Owen2011TrackingModifier< 2 >::SetupSolve)
            , (void ( Owen2011TrackingModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > &,::std::string ))(&Owen2011TrackingModifier_less__2__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , (void ( ::Owen2011TrackingModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::Owen2011TrackingModifier< 2 >::UpdateAtEndOfTimeStep)
            , (void ( Owen2011TrackingModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&Owen2011TrackingModifier_less__2__greater__wrapper::default_UpdateAtEndOfTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateCellData"
            , (void ( ::Owen2011TrackingModifier<2>::* )( ::AbstractCellPopulation< 2, 2 > & ))( &::Owen2011TrackingModifier< 2 >::UpdateCellData )
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfOutputTimeStep)
            , (void ( Owen2011TrackingModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&Owen2011TrackingModifier_less__2__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractCellBasedSimulationModifier<2, 2>::* )( ::AbstractCellPopulation< 2, 2 > & ))(&::AbstractCellBasedSimulationModifier< 2, 2 >::UpdateAtEndOfSolve)
            , (void ( Owen2011TrackingModifier_less__2__greater__wrapper::* )( ::AbstractCellPopulation< 2, 2 > & ))(&Owen2011TrackingModifier_less__2__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) );

    bp::class_< Owen2011TrackingModifier_less__3__greater__wrapper, bp::bases< AbstractCellBasedSimulationModifier< 3, 3 > > >( "Owen2011TrackingModifier3", bp::init< >() )    
        .def( 
            "OutputSimulationModifierParameters"
            , (void ( ::Owen2011TrackingModifier<3>::* )( ::out_stream & ))(&::Owen2011TrackingModifier< 3 >::OutputSimulationModifierParameters)
            , (void ( Owen2011TrackingModifier_less__3__greater__wrapper::* )( ::out_stream & ))(&Owen2011TrackingModifier_less__3__greater__wrapper::default_OutputSimulationModifierParameters)
            , ( bp::arg("rParamsFile") ) )    
        .def( 
            "SetupSolve"
            , (void ( ::Owen2011TrackingModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&::Owen2011TrackingModifier< 3 >::SetupSolve)
            , (void ( Owen2011TrackingModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > &,::std::string ))(&Owen2011TrackingModifier_less__3__greater__wrapper::default_SetupSolve)
            , ( bp::arg("rCellPopulation"), bp::arg("outputDirectory") ) )    
        .def( 
            "UpdateAtEndOfTimeStep"
            , (void ( ::Owen2011TrackingModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::Owen2011TrackingModifier< 3 >::UpdateAtEndOfTimeStep)
            , (void ( Owen2011TrackingModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&Owen2011TrackingModifier_less__3__greater__wrapper::default_UpdateAtEndOfTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateCellData"
            , (void ( ::Owen2011TrackingModifier<3>::* )( ::AbstractCellPopulation< 3, 3 > & ))( &::Owen2011TrackingModifier< 3 >::UpdateCellData )
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfOutputTimeStep"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfOutputTimeStep)
            , (void ( Owen2011TrackingModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&Owen2011TrackingModifier_less__3__greater__wrapper::default_UpdateAtEndOfOutputTimeStep)
            , ( bp::arg("rCellPopulation") ) )    
        .def( 
            "UpdateAtEndOfSolve"
            , (void ( ::AbstractCellBasedSimulationModifier<3, 3>::* )( ::AbstractCellPopulation< 3, 3 > & ))(&::AbstractCellBasedSimulationModifier< 3, 3 >::UpdateAtEndOfSolve)
            , (void ( Owen2011TrackingModifier_less__3__greater__wrapper::* )( ::AbstractCellPopulation< 3, 3 > & ))(&Owen2011TrackingModifier_less__3__greater__wrapper::default_UpdateAtEndOfSolve)
            , ( bp::arg("rCellPopulation") ) );
>>>>>>> 771a962055d447a8738a2e7efbc60beb1eaaa477
}
