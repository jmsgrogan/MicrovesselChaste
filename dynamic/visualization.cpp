// This file has been generated by Py++.

#include "boost/python.hpp"

#include "visualization_headers.hpp"

namespace bp = boost::python;

struct AbstractActorGenerator_less__2__greater__wrapper : AbstractActorGenerator< 2 >, bp::wrapper< AbstractActorGenerator< 2 > > {

    AbstractActorGenerator_less__2__greater__wrapper( )
    : AbstractActorGenerator<2>( )
      , bp::wrapper< AbstractActorGenerator< 2 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ){
        bp::override func_AddActor = this->get_override( "AddActor" );
        func_AddActor( pRenderer );
    }

};

struct AbstractActorGenerator_less__3__greater__wrapper : AbstractActorGenerator< 3 >, bp::wrapper< AbstractActorGenerator< 3 > > {

    AbstractActorGenerator_less__3__greater__wrapper( )
    : AbstractActorGenerator<3>( )
      , bp::wrapper< AbstractActorGenerator< 3 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ){
        bp::override func_AddActor = this->get_override( "AddActor" );
        func_AddActor( pRenderer );
    }

};

struct CellPopulationActorGenerator_less__2__greater__wrapper : CellPopulationActorGenerator< 2 >, bp::wrapper< CellPopulationActorGenerator< 2 > > {

    CellPopulationActorGenerator_less__2__greater__wrapper(CellPopulationActorGenerator<2> const & arg )
    : CellPopulationActorGenerator<2>( arg )
      , bp::wrapper< CellPopulationActorGenerator< 2 > >(){
        // copy constructor
        
    }

    CellPopulationActorGenerator_less__2__greater__wrapper( )
    : CellPopulationActorGenerator<2>( )
      , bp::wrapper< CellPopulationActorGenerator< 2 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        if( bp::override func_AddActor = this->get_override( "AddActor" ) )
            func_AddActor( pRenderer );
        else{
            this->CellPopulationActorGenerator< 2 >::AddActor( pRenderer );
        }
    }
    
    void default_AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        CellPopulationActorGenerator< 2 >::AddActor( pRenderer );
    }

};

struct CellPopulationActorGenerator_less__3__greater__wrapper : CellPopulationActorGenerator< 3 >, bp::wrapper< CellPopulationActorGenerator< 3 > > {

    CellPopulationActorGenerator_less__3__greater__wrapper(CellPopulationActorGenerator<3> const & arg )
    : CellPopulationActorGenerator<3>( arg )
      , bp::wrapper< CellPopulationActorGenerator< 3 > >(){
        // copy constructor
        
    }

    CellPopulationActorGenerator_less__3__greater__wrapper( )
    : CellPopulationActorGenerator<3>( )
      , bp::wrapper< CellPopulationActorGenerator< 3 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        if( bp::override func_AddActor = this->get_override( "AddActor" ) )
            func_AddActor( pRenderer );
        else{
            this->CellPopulationActorGenerator< 3 >::AddActor( pRenderer );
        }
    }
    
    void default_AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        CellPopulationActorGenerator< 3 >::AddActor( pRenderer );
    }

};

struct DiscreteContinuumMeshActorGenerator_less__2__greater__wrapper : DiscreteContinuumMeshActorGenerator< 2 >, bp::wrapper< DiscreteContinuumMeshActorGenerator< 2 > > {

    DiscreteContinuumMeshActorGenerator_less__2__greater__wrapper(DiscreteContinuumMeshActorGenerator<2> const & arg )
    : DiscreteContinuumMeshActorGenerator<2>( arg )
      , bp::wrapper< DiscreteContinuumMeshActorGenerator< 2 > >(){
        // copy constructor
        
    }

    DiscreteContinuumMeshActorGenerator_less__2__greater__wrapper( )
    : DiscreteContinuumMeshActorGenerator<2>( )
      , bp::wrapper< DiscreteContinuumMeshActorGenerator< 2 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        if( bp::override func_AddActor = this->get_override( "AddActor" ) )
            func_AddActor( pRenderer );
        else{
            this->DiscreteContinuumMeshActorGenerator< 2 >::AddActor( pRenderer );
        }
    }
    
    void default_AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        DiscreteContinuumMeshActorGenerator< 2 >::AddActor( pRenderer );
    }

};

struct DiscreteContinuumMeshActorGenerator_less__3__greater__wrapper : DiscreteContinuumMeshActorGenerator< 3 >, bp::wrapper< DiscreteContinuumMeshActorGenerator< 3 > > {

    DiscreteContinuumMeshActorGenerator_less__3__greater__wrapper(DiscreteContinuumMeshActorGenerator<3> const & arg )
    : DiscreteContinuumMeshActorGenerator<3>( arg )
      , bp::wrapper< DiscreteContinuumMeshActorGenerator< 3 > >(){
        // copy constructor
        
    }

    DiscreteContinuumMeshActorGenerator_less__3__greater__wrapper( )
    : DiscreteContinuumMeshActorGenerator<3>( )
      , bp::wrapper< DiscreteContinuumMeshActorGenerator< 3 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        if( bp::override func_AddActor = this->get_override( "AddActor" ) )
            func_AddActor( pRenderer );
        else{
            this->DiscreteContinuumMeshActorGenerator< 3 >::AddActor( pRenderer );
        }
    }
    
    void default_AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        DiscreteContinuumMeshActorGenerator< 3 >::AddActor( pRenderer );
    }

};

struct PartActorGenerator_less__2__greater__wrapper : PartActorGenerator< 2 >, bp::wrapper< PartActorGenerator< 2 > > {

    PartActorGenerator_less__2__greater__wrapper(PartActorGenerator<2> const & arg )
    : PartActorGenerator<2>( arg )
      , bp::wrapper< PartActorGenerator< 2 > >(){
        // copy constructor
        
    }

    PartActorGenerator_less__2__greater__wrapper( )
    : PartActorGenerator<2>( )
      , bp::wrapper< PartActorGenerator< 2 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        if( bp::override func_AddActor = this->get_override( "AddActor" ) )
            func_AddActor( pRenderer );
        else{
            this->PartActorGenerator< 2 >::AddActor( pRenderer );
        }
    }
    
    void default_AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        PartActorGenerator< 2 >::AddActor( pRenderer );
    }

};

struct PartActorGenerator_less__3__greater__wrapper : PartActorGenerator< 3 >, bp::wrapper< PartActorGenerator< 3 > > {

    PartActorGenerator_less__3__greater__wrapper(PartActorGenerator<3> const & arg )
    : PartActorGenerator<3>( arg )
      , bp::wrapper< PartActorGenerator< 3 > >(){
        // copy constructor
        
    }

    PartActorGenerator_less__3__greater__wrapper( )
    : PartActorGenerator<3>( )
      , bp::wrapper< PartActorGenerator< 3 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        if( bp::override func_AddActor = this->get_override( "AddActor" ) )
            func_AddActor( pRenderer );
        else{
            this->PartActorGenerator< 3 >::AddActor( pRenderer );
        }
    }
    
    void default_AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        PartActorGenerator< 3 >::AddActor( pRenderer );
    }

};

struct RegularGridActorGenerator_less__2__greater__wrapper : RegularGridActorGenerator< 2 >, bp::wrapper< RegularGridActorGenerator< 2 > > {

    RegularGridActorGenerator_less__2__greater__wrapper(RegularGridActorGenerator<2> const & arg )
    : RegularGridActorGenerator<2>( arg )
      , bp::wrapper< RegularGridActorGenerator< 2 > >(){
        // copy constructor
        
    }

    RegularGridActorGenerator_less__2__greater__wrapper( )
    : RegularGridActorGenerator<2>( )
      , bp::wrapper< RegularGridActorGenerator< 2 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        if( bp::override func_AddActor = this->get_override( "AddActor" ) )
            func_AddActor( pRenderer );
        else{
            this->RegularGridActorGenerator< 2 >::AddActor( pRenderer );
        }
    }
    
    void default_AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        RegularGridActorGenerator< 2 >::AddActor( pRenderer );
    }

};

struct RegularGridActorGenerator_less__3__greater__wrapper : RegularGridActorGenerator< 3 >, bp::wrapper< RegularGridActorGenerator< 3 > > {

    RegularGridActorGenerator_less__3__greater__wrapper(RegularGridActorGenerator<3> const & arg )
    : RegularGridActorGenerator<3>( arg )
      , bp::wrapper< RegularGridActorGenerator< 3 > >(){
        // copy constructor
        
    }

    RegularGridActorGenerator_less__3__greater__wrapper( )
    : RegularGridActorGenerator<3>( )
      , bp::wrapper< RegularGridActorGenerator< 3 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        if( bp::override func_AddActor = this->get_override( "AddActor" ) )
            func_AddActor( pRenderer );
        else{
            this->RegularGridActorGenerator< 3 >::AddActor( pRenderer );
        }
    }
    
    void default_AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        RegularGridActorGenerator< 3 >::AddActor( pRenderer );
    }

};

struct VesselNetworkActorGenerator_less__2__greater__wrapper : VesselNetworkActorGenerator< 2 >, bp::wrapper< VesselNetworkActorGenerator< 2 > > {

    VesselNetworkActorGenerator_less__2__greater__wrapper(VesselNetworkActorGenerator<2> const & arg )
    : VesselNetworkActorGenerator<2>( arg )
      , bp::wrapper< VesselNetworkActorGenerator< 2 > >(){
        // copy constructor
        
    }

    VesselNetworkActorGenerator_less__2__greater__wrapper( )
    : VesselNetworkActorGenerator<2>( )
      , bp::wrapper< VesselNetworkActorGenerator< 2 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        if( bp::override func_AddActor = this->get_override( "AddActor" ) )
            func_AddActor( pRenderer );
        else{
            this->VesselNetworkActorGenerator< 2 >::AddActor( pRenderer );
        }
    }
    
    void default_AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        VesselNetworkActorGenerator< 2 >::AddActor( pRenderer );
    }

};

struct VesselNetworkActorGenerator_less__3__greater__wrapper : VesselNetworkActorGenerator< 3 >, bp::wrapper< VesselNetworkActorGenerator< 3 > > {

    VesselNetworkActorGenerator_less__3__greater__wrapper(VesselNetworkActorGenerator<3> const & arg )
    : VesselNetworkActorGenerator<3>( arg )
      , bp::wrapper< VesselNetworkActorGenerator< 3 > >(){
        // copy constructor
        
    }

    VesselNetworkActorGenerator_less__3__greater__wrapper( )
    : VesselNetworkActorGenerator<3>( )
      , bp::wrapper< VesselNetworkActorGenerator< 3 > >(){
        // null constructor
    
    }

    virtual void AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        if( bp::override func_AddActor = this->get_override( "AddActor" ) )
            func_AddActor( pRenderer );
        else{
            this->VesselNetworkActorGenerator< 3 >::AddActor( pRenderer );
        }
    }
    
    void default_AddActor( ::vtkSmartPointer< vtkRenderer > pRenderer ) {
        VesselNetworkActorGenerator< 3 >::AddActor( pRenderer );
    }

};

BOOST_PYTHON_MODULE(_chaste_project_MicrovesselChaste_visualization){
    bp::class_< AbstractActorGenerator_less__2__greater__wrapper, boost::noncopyable >( "AbstractActorGenerator2", "", bp::init< >("Constructor\n/") )    
        .def( 
            "AddActor"
            , bp::pure_virtual( (void ( ::AbstractActorGenerator<2>::* )( ::vtkSmartPointer< vtkRenderer > ))(&::AbstractActorGenerator< 2 >::AddActor) )
            , ( bp::arg("pRenderer") )
            , "Add the Abstract actor to the renderer\n@param pRenderer the current renderer\n/" )    
        .def( 
            "GetColorTransferFunction"
            , (::vtkSmartPointer< vtkColorTransferFunction > ( ::AbstractActorGenerator<2>::* )(  ))( &::AbstractActorGenerator< 2 >::GetColorTransferFunction )
            , "@return return the color transfer function\n/" )    
        .def( 
            "GetDiscreteColorTransferFunction"
            , (::vtkSmartPointer< vtkColorTransferFunction > ( ::AbstractActorGenerator<2>::* )(  ))( &::AbstractActorGenerator< 2 >::GetDiscreteColorTransferFunction )
            , "@return return the discrete color transfer function\n/" )    
        .def( 
            "SetDataLabel"
            , (void ( ::AbstractActorGenerator<2>::* )( ::std::string const & ))( &::AbstractActorGenerator< 2 >::SetDataLabel )
            , ( bp::arg("rLabel") )
            , "Set the label for contouring data\n@param rLabel the label for contouring data\n/" )    
        .def( 
            "SetEdgeColor"
            , (void ( ::AbstractActorGenerator<2>::* )( ::boost::numeric::ublas::c_vector< double, 3 > const & ))( &::AbstractActorGenerator< 2 >::SetEdgeColor )
            , ( bp::arg("rColor") )
            , "Set the edge color in RGB (e.g. (255,255,255) is white)\n@param rColor the edge color\n/" )    
        .def( 
            "SetEdgeSize"
            , (void ( ::AbstractActorGenerator<2>::* )( double ))( &::AbstractActorGenerator< 2 >::SetEdgeSize )
            , ( bp::arg("size") )
            , "Set the default edge size\n@param size the default edge size\n/" )    
        .def( 
            "SetPointColor"
            , (void ( ::AbstractActorGenerator<2>::* )( ::boost::numeric::ublas::c_vector< double, 3 > const & ))( &::AbstractActorGenerator< 2 >::SetPointColor )
            , ( bp::arg("rColor") )
            , "Set the point color in RGB (e.g. (255,255,255) is white)\n@param rColor the point color\n/" )    
        .def( 
            "SetPointSize"
            , (void ( ::AbstractActorGenerator<2>::* )( double ))( &::AbstractActorGenerator< 2 >::SetPointSize )
            , ( bp::arg("size") )
            , "Set the default point size\n@param size the default point size\n/" )    
        .def( 
            "SetShowEdges"
            , (void ( ::AbstractActorGenerator<2>::* )( bool ))( &::AbstractActorGenerator< 2 >::SetShowEdges )
            , ( bp::arg("show") )
            , "Set whether to show the edges\n@param show whether to show the edges\n/" )    
        .def( 
            "SetShowPoints"
            , (void ( ::AbstractActorGenerator<2>::* )( bool ))( &::AbstractActorGenerator< 2 >::SetShowPoints )
            , ( bp::arg("show") )
            , "Set whether to show the points\n@param show whether to show the points\n/" )    
        .def( 
            "SetShowVolume"
            , (void ( ::AbstractActorGenerator<2>::* )( bool ))( &::AbstractActorGenerator< 2 >::SetShowVolume )
            , ( bp::arg("show") )
            , "Set whether to show the volume\n@param show whether to show the volumes\n/" )    
        .def( 
            "SetVolumeColor"
            , (void ( ::AbstractActorGenerator<2>::* )( ::boost::numeric::ublas::c_vector< double, 3 > const & ))( &::AbstractActorGenerator< 2 >::SetVolumeColor )
            , ( bp::arg("rColor") )
            , "Set the volume color in RGB (e.g. (255,255,255) is white)\n@param rColor the volume color\n/" )    
        .def( 
            "SetVolumeOpacity"
            , (void ( ::AbstractActorGenerator<2>::* )( double ))( &::AbstractActorGenerator< 2 >::SetVolumeOpacity )
            , ( bp::arg("opacity") )
            , "Set the opacity for the volume\n@param opacity the opacity for the volume\n/" );

    bp::class_< AbstractActorGenerator_less__3__greater__wrapper, boost::noncopyable >( "AbstractActorGenerator3", "", bp::init< >("Constructor\n/") )    
        .def( 
            "AddActor"
            , bp::pure_virtual( (void ( ::AbstractActorGenerator<3>::* )( ::vtkSmartPointer< vtkRenderer > ))(&::AbstractActorGenerator< 3 >::AddActor) )
            , ( bp::arg("pRenderer") )
            , "Add the Abstract actor to the renderer\n@param pRenderer the current renderer\n/" )    
        .def( 
            "GetColorTransferFunction"
            , (::vtkSmartPointer< vtkColorTransferFunction > ( ::AbstractActorGenerator<3>::* )(  ))( &::AbstractActorGenerator< 3 >::GetColorTransferFunction )
            , "@return return the color transfer function\n/" )    
        .def( 
            "GetDiscreteColorTransferFunction"
            , (::vtkSmartPointer< vtkColorTransferFunction > ( ::AbstractActorGenerator<3>::* )(  ))( &::AbstractActorGenerator< 3 >::GetDiscreteColorTransferFunction )
            , "@return return the discrete color transfer function\n/" )    
        .def( 
            "SetDataLabel"
            , (void ( ::AbstractActorGenerator<3>::* )( ::std::string const & ))( &::AbstractActorGenerator< 3 >::SetDataLabel )
            , ( bp::arg("rLabel") )
            , "Set the label for contouring data\n@param rLabel the label for contouring data\n/" )    
        .def( 
            "SetEdgeColor"
            , (void ( ::AbstractActorGenerator<3>::* )( ::boost::numeric::ublas::c_vector< double, 3 > const & ))( &::AbstractActorGenerator< 3 >::SetEdgeColor )
            , ( bp::arg("rColor") )
            , "Set the edge color in RGB (e.g. (255,255,255) is white)\n@param rColor the edge color\n/" )    
        .def( 
            "SetEdgeSize"
            , (void ( ::AbstractActorGenerator<3>::* )( double ))( &::AbstractActorGenerator< 3 >::SetEdgeSize )
            , ( bp::arg("size") )
            , "Set the default edge size\n@param size the default edge size\n/" )    
        .def( 
            "SetPointColor"
            , (void ( ::AbstractActorGenerator<3>::* )( ::boost::numeric::ublas::c_vector< double, 3 > const & ))( &::AbstractActorGenerator< 3 >::SetPointColor )
            , ( bp::arg("rColor") )
            , "Set the point color in RGB (e.g. (255,255,255) is white)\n@param rColor the point color\n/" )    
        .def( 
            "SetPointSize"
            , (void ( ::AbstractActorGenerator<3>::* )( double ))( &::AbstractActorGenerator< 3 >::SetPointSize )
            , ( bp::arg("size") )
            , "Set the default point size\n@param size the default point size\n/" )    
        .def( 
            "SetShowEdges"
            , (void ( ::AbstractActorGenerator<3>::* )( bool ))( &::AbstractActorGenerator< 3 >::SetShowEdges )
            , ( bp::arg("show") )
            , "Set whether to show the edges\n@param show whether to show the edges\n/" )    
        .def( 
            "SetShowPoints"
            , (void ( ::AbstractActorGenerator<3>::* )( bool ))( &::AbstractActorGenerator< 3 >::SetShowPoints )
            , ( bp::arg("show") )
            , "Set whether to show the points\n@param show whether to show the points\n/" )    
        .def( 
            "SetShowVolume"
            , (void ( ::AbstractActorGenerator<3>::* )( bool ))( &::AbstractActorGenerator< 3 >::SetShowVolume )
            , ( bp::arg("show") )
            , "Set whether to show the volume\n@param show whether to show the volumes\n/" )    
        .def( 
            "SetVolumeColor"
            , (void ( ::AbstractActorGenerator<3>::* )( ::boost::numeric::ublas::c_vector< double, 3 > const & ))( &::AbstractActorGenerator< 3 >::SetVolumeColor )
            , ( bp::arg("rColor") )
            , "Set the volume color in RGB (e.g. (255,255,255) is white)\n@param rColor the volume color\n/" )    
        .def( 
            "SetVolumeOpacity"
            , (void ( ::AbstractActorGenerator<3>::* )( double ))( &::AbstractActorGenerator< 3 >::SetVolumeOpacity )
            , ( bp::arg("opacity") )
            , "Set the opacity for the volume\n@param opacity the opacity for the volume\n/" );

    { //::CellPopulationActorGenerator< 2 >
        typedef bp::class_< CellPopulationActorGenerator_less__2__greater__wrapper, bp::bases< AbstractActorGenerator< 2 > > > CellPopulationActorGenerator2_exposer_t;
        CellPopulationActorGenerator2_exposer_t CellPopulationActorGenerator2_exposer = CellPopulationActorGenerator2_exposer_t( "CellPopulationActorGenerator2", "", bp::init< >("Constructor\n/") );
        bp::scope CellPopulationActorGenerator2_scope( CellPopulationActorGenerator2_exposer );
        { //::CellPopulationActorGenerator< 2 >::AddActor
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            typedef void ( CellPopulationActorGenerator_less__2__greater__wrapper::*default_AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "AddActor"
                , AddActor_function_type(&::CellPopulationActorGenerator< 2 >::AddActor)
                , default_AddActor_function_type(&CellPopulationActorGenerator_less__2__greater__wrapper::default_AddActor)
                , ( bp::arg("pRenderer") ) );
        
        }
        { //::CellPopulationActorGenerator< 2 >::AddCaBasedCellPopulationActor
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddCaBasedCellPopulationActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "AddCaBasedCellPopulationActor"
                , AddCaBasedCellPopulationActor_function_type( &::CellPopulationActorGenerator< 2 >::AddCaBasedCellPopulationActor )
                , ( bp::arg("pRenderer") )
                , "Specialized class for adding Ca based population\n@param pRenderer the current renderer\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::AddMeshBasedCellPopulationActor
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddMeshBasedCellPopulationActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "AddMeshBasedCellPopulationActor"
                , AddMeshBasedCellPopulationActor_function_type( &::CellPopulationActorGenerator< 2 >::AddMeshBasedCellPopulationActor )
                , ( bp::arg("pRenderer") )
                , "Specialized class for adding Mesh based population\n@param pRenderer the current renderer\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::AddPottsBasedCellPopulationActor
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddPottsBasedCellPopulationActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "AddPottsBasedCellPopulationActor"
                , AddPottsBasedCellPopulationActor_function_type( &::CellPopulationActorGenerator< 2 >::AddPottsBasedCellPopulationActor )
                , ( bp::arg("pRenderer") )
                , "Specialized class for adding Potts based population\n@param pRenderer the current renderer\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::AddVertexBasedCellPopulationActor
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddVertexBasedCellPopulationActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "AddVertexBasedCellPopulationActor"
                , AddVertexBasedCellPopulationActor_function_type( &::CellPopulationActorGenerator< 2 >::AddVertexBasedCellPopulationActor )
                , ( bp::arg("pRenderer") )
                , "Specialized class for adding Mesh based population\n@param pRenderer the current renderer\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::SetCellPopulation
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulation_function_type)( ::boost::shared_ptr< AbstractCellPopulation< 2, 2 > > ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "SetCellPopulation"
                , SetCellPopulation_function_type( &::CellPopulationActorGenerator< 2 >::SetCellPopulation )
                , ( bp::arg("pCellPopulation") )
                , "Set the CellPopulation\n@param pCellPopulation the CellPopulation to render\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::SetColorByCellData
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetColorByCellData_function_type)( bool ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "SetColorByCellData"
                , SetColorByCellData_function_type( &::CellPopulationActorGenerator< 2 >::SetColorByCellData )
                , ( bp::arg("colorByCellData") )
                , "@param colorByCellData color cells by data\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::SetColorByCellType
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetColorByCellType_function_type)( bool ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "SetColorByCellType"
                , SetColorByCellType_function_type( &::CellPopulationActorGenerator< 2 >::SetColorByCellType )
                , ( bp::arg("colorByCellType") )
                , "@param colorByCellType color cells by type\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::SetColorByUserDefined
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetColorByUserDefined_function_type)( bool ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "SetColorByUserDefined"
                , SetColorByUserDefined_function_type( &::CellPopulationActorGenerator< 2 >::SetColorByUserDefined )
                , ( bp::arg("colorByCellUserDefined") )
                , "@param colorByCellType color cells by the user defined point color\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::SetShowCellCentres
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetShowCellCentres_function_type)( bool ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "SetShowCellCentres"
                , SetShowCellCentres_function_type( &::CellPopulationActorGenerator< 2 >::SetShowCellCentres )
                , ( bp::arg("showCentres") )
                , "@param showCentres show cell centres\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::SetShowMutableMeshEdges
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetShowMutableMeshEdges_function_type)( bool ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "SetShowMutableMeshEdges"
                , SetShowMutableMeshEdges_function_type( &::CellPopulationActorGenerator< 2 >::SetShowMutableMeshEdges )
                , ( bp::arg("showEdges") )
                , "@param showEdges show the mutable mesh\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::SetShowPottsMeshEdges
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetShowPottsMeshEdges_function_type)( bool ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "SetShowPottsMeshEdges"
                , SetShowPottsMeshEdges_function_type( &::CellPopulationActorGenerator< 2 >::SetShowPottsMeshEdges )
                , ( bp::arg("showEdges") )
                , "@param showEdges show the potts mesh\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::SetShowPottsMeshOutlines
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetShowPottsMeshOutlines_function_type)( bool ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "SetShowPottsMeshOutlines"
                , SetShowPottsMeshOutlines_function_type( &::CellPopulationActorGenerator< 2 >::SetShowPottsMeshOutlines )
                , ( bp::arg("showOutlines") )
                , "@param showOutlines show the outlines of Potts cells\n/" );
        
        }
        { //::CellPopulationActorGenerator< 2 >::SetShowVoronoiMeshEdges
        
            typedef CellPopulationActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetShowVoronoiMeshEdges_function_type)( bool ) ;
            
            CellPopulationActorGenerator2_exposer.def( 
                "SetShowVoronoiMeshEdges"
                , SetShowVoronoiMeshEdges_function_type( &::CellPopulationActorGenerator< 2 >::SetShowVoronoiMeshEdges )
                , ( bp::arg("showEdges") )
                , "@param showEdges show the voronoi mesh\n/" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< CellPopulationActorGenerator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< CellPopulationActorGenerator< 2 > >, boost::shared_ptr< AbstractActorGenerator< 2 > > >();
    }

    { //::CellPopulationActorGenerator< 3 >
        typedef bp::class_< CellPopulationActorGenerator_less__3__greater__wrapper, bp::bases< AbstractActorGenerator< 3 > > > CellPopulationActorGenerator3_exposer_t;
        CellPopulationActorGenerator3_exposer_t CellPopulationActorGenerator3_exposer = CellPopulationActorGenerator3_exposer_t( "CellPopulationActorGenerator3", "", bp::init< >("Constructor\n/") );
        bp::scope CellPopulationActorGenerator3_scope( CellPopulationActorGenerator3_exposer );
        { //::CellPopulationActorGenerator< 3 >::AddActor
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            typedef void ( CellPopulationActorGenerator_less__3__greater__wrapper::*default_AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "AddActor"
                , AddActor_function_type(&::CellPopulationActorGenerator< 3 >::AddActor)
                , default_AddActor_function_type(&CellPopulationActorGenerator_less__3__greater__wrapper::default_AddActor)
                , ( bp::arg("pRenderer") ) );
        
        }
        { //::CellPopulationActorGenerator< 3 >::AddCaBasedCellPopulationActor
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCaBasedCellPopulationActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "AddCaBasedCellPopulationActor"
                , AddCaBasedCellPopulationActor_function_type( &::CellPopulationActorGenerator< 3 >::AddCaBasedCellPopulationActor )
                , ( bp::arg("pRenderer") )
                , "Specialized class for adding Ca based population\n@param pRenderer the current renderer\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::AddMeshBasedCellPopulationActor
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddMeshBasedCellPopulationActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "AddMeshBasedCellPopulationActor"
                , AddMeshBasedCellPopulationActor_function_type( &::CellPopulationActorGenerator< 3 >::AddMeshBasedCellPopulationActor )
                , ( bp::arg("pRenderer") )
                , "Specialized class for adding Mesh based population\n@param pRenderer the current renderer\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::AddPottsBasedCellPopulationActor
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddPottsBasedCellPopulationActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "AddPottsBasedCellPopulationActor"
                , AddPottsBasedCellPopulationActor_function_type( &::CellPopulationActorGenerator< 3 >::AddPottsBasedCellPopulationActor )
                , ( bp::arg("pRenderer") )
                , "Specialized class for adding Potts based population\n@param pRenderer the current renderer\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::AddVertexBasedCellPopulationActor
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddVertexBasedCellPopulationActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "AddVertexBasedCellPopulationActor"
                , AddVertexBasedCellPopulationActor_function_type( &::CellPopulationActorGenerator< 3 >::AddVertexBasedCellPopulationActor )
                , ( bp::arg("pRenderer") )
                , "Specialized class for adding Mesh based population\n@param pRenderer the current renderer\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::SetCellPopulation
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetCellPopulation_function_type)( ::boost::shared_ptr< AbstractCellPopulation< 3, 3 > > ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "SetCellPopulation"
                , SetCellPopulation_function_type( &::CellPopulationActorGenerator< 3 >::SetCellPopulation )
                , ( bp::arg("pCellPopulation") )
                , "Set the CellPopulation\n@param pCellPopulation the CellPopulation to render\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::SetColorByCellData
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetColorByCellData_function_type)( bool ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "SetColorByCellData"
                , SetColorByCellData_function_type( &::CellPopulationActorGenerator< 3 >::SetColorByCellData )
                , ( bp::arg("colorByCellData") )
                , "@param colorByCellData color cells by data\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::SetColorByCellType
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetColorByCellType_function_type)( bool ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "SetColorByCellType"
                , SetColorByCellType_function_type( &::CellPopulationActorGenerator< 3 >::SetColorByCellType )
                , ( bp::arg("colorByCellType") )
                , "@param colorByCellType color cells by type\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::SetColorByUserDefined
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetColorByUserDefined_function_type)( bool ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "SetColorByUserDefined"
                , SetColorByUserDefined_function_type( &::CellPopulationActorGenerator< 3 >::SetColorByUserDefined )
                , ( bp::arg("colorByCellUserDefined") )
                , "@param colorByCellType color cells by the user defined point color\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::SetShowCellCentres
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetShowCellCentres_function_type)( bool ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "SetShowCellCentres"
                , SetShowCellCentres_function_type( &::CellPopulationActorGenerator< 3 >::SetShowCellCentres )
                , ( bp::arg("showCentres") )
                , "@param showCentres show cell centres\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::SetShowMutableMeshEdges
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetShowMutableMeshEdges_function_type)( bool ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "SetShowMutableMeshEdges"
                , SetShowMutableMeshEdges_function_type( &::CellPopulationActorGenerator< 3 >::SetShowMutableMeshEdges )
                , ( bp::arg("showEdges") )
                , "@param showEdges show the mutable mesh\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::SetShowPottsMeshEdges
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetShowPottsMeshEdges_function_type)( bool ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "SetShowPottsMeshEdges"
                , SetShowPottsMeshEdges_function_type( &::CellPopulationActorGenerator< 3 >::SetShowPottsMeshEdges )
                , ( bp::arg("showEdges") )
                , "@param showEdges show the potts mesh\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::SetShowPottsMeshOutlines
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetShowPottsMeshOutlines_function_type)( bool ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "SetShowPottsMeshOutlines"
                , SetShowPottsMeshOutlines_function_type( &::CellPopulationActorGenerator< 3 >::SetShowPottsMeshOutlines )
                , ( bp::arg("showOutlines") )
                , "@param showOutlines show the outlines of Potts cells\n/" );
        
        }
        { //::CellPopulationActorGenerator< 3 >::SetShowVoronoiMeshEdges
        
            typedef CellPopulationActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetShowVoronoiMeshEdges_function_type)( bool ) ;
            
            CellPopulationActorGenerator3_exposer.def( 
                "SetShowVoronoiMeshEdges"
                , SetShowVoronoiMeshEdges_function_type( &::CellPopulationActorGenerator< 3 >::SetShowVoronoiMeshEdges )
                , ( bp::arg("showEdges") )
                , "@param showEdges show the voronoi mesh\n/" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< CellPopulationActorGenerator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< CellPopulationActorGenerator< 3 > >, boost::shared_ptr< AbstractActorGenerator< 3 > > >();
    }

    { //::DiscreteContinuumMeshActorGenerator< 2 >
        typedef bp::class_< DiscreteContinuumMeshActorGenerator_less__2__greater__wrapper, bp::bases< AbstractActorGenerator< 2 > > > DiscreteContinuumMeshActorGenerator2_exposer_t;
        DiscreteContinuumMeshActorGenerator2_exposer_t DiscreteContinuumMeshActorGenerator2_exposer = DiscreteContinuumMeshActorGenerator2_exposer_t( "DiscreteContinuumMeshActorGenerator2", "", bp::init< >("Constructor\n/") );
        bp::scope DiscreteContinuumMeshActorGenerator2_scope( DiscreteContinuumMeshActorGenerator2_exposer );
        { //::DiscreteContinuumMeshActorGenerator< 2 >::AddActor
        
            typedef DiscreteContinuumMeshActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            typedef void ( DiscreteContinuumMeshActorGenerator_less__2__greater__wrapper::*default_AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            DiscreteContinuumMeshActorGenerator2_exposer.def( 
                "AddActor"
                , AddActor_function_type(&::DiscreteContinuumMeshActorGenerator< 2 >::AddActor)
                , default_AddActor_function_type(&DiscreteContinuumMeshActorGenerator_less__2__greater__wrapper::default_AddActor)
                , ( bp::arg("pRenderer") ) );
        
        }
        { //::DiscreteContinuumMeshActorGenerator< 2 >::SetDiscreteContinuumMesh
        
            typedef DiscreteContinuumMeshActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetDiscreteContinuumMesh_function_type)( ::boost::shared_ptr< DiscreteContinuumMesh< 2, 2 > > ) ;
            
            DiscreteContinuumMeshActorGenerator2_exposer.def( 
                "SetDiscreteContinuumMesh"
                , SetDiscreteContinuumMesh_function_type( &::DiscreteContinuumMeshActorGenerator< 2 >::SetDiscreteContinuumMesh )
                , ( bp::arg("pDiscreteContinuumMesh") )
                , "Set the DiscreteContinuumMesh\n@param pDiscreteContinuumMesh the DiscreteContinuumMesh to render\n/" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< DiscreteContinuumMeshActorGenerator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMeshActorGenerator< 2 > >, boost::shared_ptr< AbstractActorGenerator< 2 > > >();
    }

    { //::DiscreteContinuumMeshActorGenerator< 3 >
        typedef bp::class_< DiscreteContinuumMeshActorGenerator_less__3__greater__wrapper, bp::bases< AbstractActorGenerator< 3 > > > DiscreteContinuumMeshActorGenerator3_exposer_t;
        DiscreteContinuumMeshActorGenerator3_exposer_t DiscreteContinuumMeshActorGenerator3_exposer = DiscreteContinuumMeshActorGenerator3_exposer_t( "DiscreteContinuumMeshActorGenerator3", "", bp::init< >("Constructor\n/") );
        bp::scope DiscreteContinuumMeshActorGenerator3_scope( DiscreteContinuumMeshActorGenerator3_exposer );
        { //::DiscreteContinuumMeshActorGenerator< 3 >::AddActor
        
            typedef DiscreteContinuumMeshActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            typedef void ( DiscreteContinuumMeshActorGenerator_less__3__greater__wrapper::*default_AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            DiscreteContinuumMeshActorGenerator3_exposer.def( 
                "AddActor"
                , AddActor_function_type(&::DiscreteContinuumMeshActorGenerator< 3 >::AddActor)
                , default_AddActor_function_type(&DiscreteContinuumMeshActorGenerator_less__3__greater__wrapper::default_AddActor)
                , ( bp::arg("pRenderer") ) );
        
        }
        { //::DiscreteContinuumMeshActorGenerator< 3 >::SetDiscreteContinuumMesh
        
            typedef DiscreteContinuumMeshActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDiscreteContinuumMesh_function_type)( ::boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > > ) ;
            
            DiscreteContinuumMeshActorGenerator3_exposer.def( 
                "SetDiscreteContinuumMesh"
                , SetDiscreteContinuumMesh_function_type( &::DiscreteContinuumMeshActorGenerator< 3 >::SetDiscreteContinuumMesh )
                , ( bp::arg("pDiscreteContinuumMesh") )
                , "Set the DiscreteContinuumMesh\n@param pDiscreteContinuumMesh the DiscreteContinuumMesh to render\n/" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< DiscreteContinuumMeshActorGenerator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMeshActorGenerator< 3 > >, boost::shared_ptr< AbstractActorGenerator< 3 > > >();
    }

    bp::class_< MicrovesselVtkScene< 2 > >( "MicrovesselVtkScene2", "", bp::init< >("Constructor\n/") )    
        .def( 
            "End"
            , (void ( ::MicrovesselVtkScene<2>::* )(  ))( &::MicrovesselVtkScene< 2 >::End )
            , "Shut down the scene and close the animation\n/" )    
        .def( 
            "GetCellPopulationActorGenerator"
            , (::boost::shared_ptr< CellPopulationActorGenerator< 2 > > ( ::MicrovesselVtkScene<2>::* )(  ))( &::MicrovesselVtkScene< 2 >::GetCellPopulationActorGenerator )
            , "" )    
        .def( 
            "GetDiscreteContinuumMeshActorGenerator"
            , (::boost::shared_ptr< DiscreteContinuumMeshActorGenerator< 2 > > ( ::MicrovesselVtkScene<2>::* )(  ))( &::MicrovesselVtkScene< 2 >::GetDiscreteContinuumMeshActorGenerator )
            , "" )    
        .def( 
            "GetPartActorGenerator"
            , (::boost::shared_ptr< PartActorGenerator< 2 > > ( ::MicrovesselVtkScene<2>::* )(  ))( &::MicrovesselVtkScene< 2 >::GetPartActorGenerator )
            , "" )    
        .def( 
            "GetRegularGridActorGenerator"
            , (::boost::shared_ptr< RegularGridActorGenerator< 2 > > ( ::MicrovesselVtkScene<2>::* )(  ))( &::MicrovesselVtkScene< 2 >::GetRegularGridActorGenerator )
            , "" )    
        .def( 
            "GetVesselNetworkActorGenerator"
            , (::boost::shared_ptr< VesselNetworkActorGenerator< 2 > > ( ::MicrovesselVtkScene<2>::* )(  ))( &::MicrovesselVtkScene< 2 >::GetVesselNetworkActorGenerator )
            , "" )    
        .def( 
            "ResetRenderer"
            , (void ( ::MicrovesselVtkScene<2>::* )( unsigned int ))( &::MicrovesselVtkScene< 2 >::ResetRenderer )
            , ( bp::arg("timeStep")=(unsigned int)(0) )
            , "Update the renderer, this will update the population actor and write output images\n@param timeStep the curren time step, for annotating output files\n/" )    
        .def( 
            "SetCellPopulation"
            , (void ( ::MicrovesselVtkScene<2>::* )( ::boost::shared_ptr< AbstractCellPopulation< 2, 2 > > ))( &::MicrovesselVtkScene< 2 >::SetCellPopulation )
            , ( bp::arg("pCellPopulation") )
            , "Set the cell population\n@param pCellPopulation the cell population for rendering\n/" )    
        .def( 
            "SetIsInteractive"
            , (void ( ::MicrovesselVtkScene<2>::* )( bool ))( &::MicrovesselVtkScene< 2 >::SetIsInteractive )
            , ( bp::arg("isInteractive") )
            , "" )    
        .def( 
            "SetMesh"
            , (void ( ::MicrovesselVtkScene<2>::* )( ::boost::shared_ptr< DiscreteContinuumMesh< 2, 2 > > ))( &::MicrovesselVtkScene< 2 >::SetMesh )
            , ( bp::arg("pMesh") )
            , "" )    
        .def( 
            "SetOutputFilePath"
            , (void ( ::MicrovesselVtkScene<2>::* )( ::std::string const & ))( &::MicrovesselVtkScene< 2 >::SetOutputFilePath )
            , ( bp::arg("rPath") )
            , "Set the path for output\n@param rPath the path for output\n/" )    
        .def( 
            "SetPart"
            , (void ( ::MicrovesselVtkScene<2>::* )( ::boost::shared_ptr< Part< 2 > > ))( &::MicrovesselVtkScene< 2 >::SetPart )
            , ( bp::arg("pPart") )
            , "" )    
        .def( 
            "SetRegularGrid"
            , (void ( ::MicrovesselVtkScene<2>::* )( ::boost::shared_ptr< RegularGrid< 2 > > ))( &::MicrovesselVtkScene< 2 >::SetRegularGrid )
            , ( bp::arg("pGrid") )
            , "" )    
        .def( 
            "SetSaveAsAnimation"
            , (void ( ::MicrovesselVtkScene<2>::* )( bool ))( &::MicrovesselVtkScene< 2 >::SetSaveAsAnimation )
            , ( bp::arg("saveAsAnimation") )
            , "" )    
        .def( 
            "SetSaveAsImages"
            , (void ( ::MicrovesselVtkScene<2>::* )( bool ))( &::MicrovesselVtkScene< 2 >::SetSaveAsImages )
            , ( bp::arg("saveAsImages") )
            , "" )    
        .def( 
            "SetVesselNetwork"
            , (void ( ::MicrovesselVtkScene<2>::* )( ::boost::shared_ptr< VesselNetwork< 2 > > ))( &::MicrovesselVtkScene< 2 >::SetVesselNetwork )
            , ( bp::arg("pNetwork") )
            , "" )    
        .def( 
            "Start"
            , (void ( ::MicrovesselVtkScene<2>::* )(  ))( &::MicrovesselVtkScene< 2 >::Start )
            , "Render the scene\n/" )    
        .def( 
            "StartInteractiveEventHandler"
            , (void ( ::MicrovesselVtkScene<2>::* )(  ))( &::MicrovesselVtkScene< 2 >::StartInteractiveEventHandler )
            , "" );

    bp::class_< MicrovesselVtkScene< 3 > >( "MicrovesselVtkScene3", "", bp::init< >("Constructor\n/") )    
        .def( 
            "End"
            , (void ( ::MicrovesselVtkScene<3>::* )(  ))( &::MicrovesselVtkScene< 3 >::End )
            , "Shut down the scene and close the animation\n/" )    
        .def( 
            "GetCellPopulationActorGenerator"
            , (::boost::shared_ptr< CellPopulationActorGenerator< 3 > > ( ::MicrovesselVtkScene<3>::* )(  ))( &::MicrovesselVtkScene< 3 >::GetCellPopulationActorGenerator )
            , "" )    
        .def( 
            "GetDiscreteContinuumMeshActorGenerator"
            , (::boost::shared_ptr< DiscreteContinuumMeshActorGenerator< 3 > > ( ::MicrovesselVtkScene<3>::* )(  ))( &::MicrovesselVtkScene< 3 >::GetDiscreteContinuumMeshActorGenerator )
            , "" )    
        .def( 
            "GetPartActorGenerator"
            , (::boost::shared_ptr< PartActorGenerator< 3 > > ( ::MicrovesselVtkScene<3>::* )(  ))( &::MicrovesselVtkScene< 3 >::GetPartActorGenerator )
            , "" )    
        .def( 
            "GetRegularGridActorGenerator"
            , (::boost::shared_ptr< RegularGridActorGenerator< 3 > > ( ::MicrovesselVtkScene<3>::* )(  ))( &::MicrovesselVtkScene< 3 >::GetRegularGridActorGenerator )
            , "" )    
        .def( 
            "GetVesselNetworkActorGenerator"
            , (::boost::shared_ptr< VesselNetworkActorGenerator< 3 > > ( ::MicrovesselVtkScene<3>::* )(  ))( &::MicrovesselVtkScene< 3 >::GetVesselNetworkActorGenerator )
            , "" )    
        .def( 
            "ResetRenderer"
            , (void ( ::MicrovesselVtkScene<3>::* )( unsigned int ))( &::MicrovesselVtkScene< 3 >::ResetRenderer )
            , ( bp::arg("timeStep")=(unsigned int)(0) )
            , "Update the renderer, this will update the population actor and write output images\n@param timeStep the curren time step, for annotating output files\n/" )    
        .def( 
            "SetCellPopulation"
            , (void ( ::MicrovesselVtkScene<3>::* )( ::boost::shared_ptr< AbstractCellPopulation< 3, 3 > > ))( &::MicrovesselVtkScene< 3 >::SetCellPopulation )
            , ( bp::arg("pCellPopulation") )
            , "Set the cell population\n@param pCellPopulation the cell population for rendering\n/" )    
        .def( 
            "SetIsInteractive"
            , (void ( ::MicrovesselVtkScene<3>::* )( bool ))( &::MicrovesselVtkScene< 3 >::SetIsInteractive )
            , ( bp::arg("isInteractive") )
            , "" )    
        .def( 
            "SetMesh"
            , (void ( ::MicrovesselVtkScene<3>::* )( ::boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > > ))( &::MicrovesselVtkScene< 3 >::SetMesh )
            , ( bp::arg("pMesh") )
            , "" )    
        .def( 
            "SetOutputFilePath"
            , (void ( ::MicrovesselVtkScene<3>::* )( ::std::string const & ))( &::MicrovesselVtkScene< 3 >::SetOutputFilePath )
            , ( bp::arg("rPath") )
            , "Set the path for output\n@param rPath the path for output\n/" )    
        .def( 
            "SetPart"
            , (void ( ::MicrovesselVtkScene<3>::* )( ::boost::shared_ptr< Part< 3 > > ))( &::MicrovesselVtkScene< 3 >::SetPart )
            , ( bp::arg("pPart") )
            , "" )    
        .def( 
            "SetRegularGrid"
            , (void ( ::MicrovesselVtkScene<3>::* )( ::boost::shared_ptr< RegularGrid< 3 > > ))( &::MicrovesselVtkScene< 3 >::SetRegularGrid )
            , ( bp::arg("pGrid") )
            , "" )    
        .def( 
            "SetSaveAsAnimation"
            , (void ( ::MicrovesselVtkScene<3>::* )( bool ))( &::MicrovesselVtkScene< 3 >::SetSaveAsAnimation )
            , ( bp::arg("saveAsAnimation") )
            , "" )    
        .def( 
            "SetSaveAsImages"
            , (void ( ::MicrovesselVtkScene<3>::* )( bool ))( &::MicrovesselVtkScene< 3 >::SetSaveAsImages )
            , ( bp::arg("saveAsImages") )
            , "" )    
        .def( 
            "SetVesselNetwork"
            , (void ( ::MicrovesselVtkScene<3>::* )( ::boost::shared_ptr< VesselNetwork< 3 > > ))( &::MicrovesselVtkScene< 3 >::SetVesselNetwork )
            , ( bp::arg("pNetwork") )
            , "" )    
        .def( 
            "Start"
            , (void ( ::MicrovesselVtkScene<3>::* )(  ))( &::MicrovesselVtkScene< 3 >::Start )
            , "Render the scene\n/" )    
        .def( 
            "StartInteractiveEventHandler"
            , (void ( ::MicrovesselVtkScene<3>::* )(  ))( &::MicrovesselVtkScene< 3 >::StartInteractiveEventHandler )
            , "" );

    { //::PartActorGenerator< 2 >
        typedef bp::class_< PartActorGenerator_less__2__greater__wrapper, bp::bases< AbstractActorGenerator< 2 > > > PartActorGenerator2_exposer_t;
        PartActorGenerator2_exposer_t PartActorGenerator2_exposer = PartActorGenerator2_exposer_t( "PartActorGenerator2", "", bp::init< >("Constructor\n/") );
        bp::scope PartActorGenerator2_scope( PartActorGenerator2_exposer );
        { //::PartActorGenerator< 2 >::AddActor
        
            typedef PartActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            typedef void ( PartActorGenerator_less__2__greater__wrapper::*default_AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            PartActorGenerator2_exposer.def( 
                "AddActor"
                , AddActor_function_type(&::PartActorGenerator< 2 >::AddActor)
                , default_AddActor_function_type(&PartActorGenerator_less__2__greater__wrapper::default_AddActor)
                , ( bp::arg("pRenderer") ) );
        
        }
        { //::PartActorGenerator< 2 >::SetPart
        
            typedef PartActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetPart_function_type)( ::boost::shared_ptr< Part< 2 > > ) ;
            
            PartActorGenerator2_exposer.def( 
                "SetPart"
                , SetPart_function_type( &::PartActorGenerator< 2 >::SetPart )
                , ( bp::arg("pPart") )
                , "Set the part\n@param pPart the part to render\n/" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< PartActorGenerator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< PartActorGenerator< 2 > >, boost::shared_ptr< AbstractActorGenerator< 2 > > >();
    }

    { //::PartActorGenerator< 3 >
        typedef bp::class_< PartActorGenerator_less__3__greater__wrapper, bp::bases< AbstractActorGenerator< 3 > > > PartActorGenerator3_exposer_t;
        PartActorGenerator3_exposer_t PartActorGenerator3_exposer = PartActorGenerator3_exposer_t( "PartActorGenerator3", "", bp::init< >("Constructor\n/") );
        bp::scope PartActorGenerator3_scope( PartActorGenerator3_exposer );
        { //::PartActorGenerator< 3 >::AddActor
        
            typedef PartActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            typedef void ( PartActorGenerator_less__3__greater__wrapper::*default_AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            PartActorGenerator3_exposer.def( 
                "AddActor"
                , AddActor_function_type(&::PartActorGenerator< 3 >::AddActor)
                , default_AddActor_function_type(&PartActorGenerator_less__3__greater__wrapper::default_AddActor)
                , ( bp::arg("pRenderer") ) );
        
        }
        { //::PartActorGenerator< 3 >::SetPart
        
            typedef PartActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetPart_function_type)( ::boost::shared_ptr< Part< 3 > > ) ;
            
            PartActorGenerator3_exposer.def( 
                "SetPart"
                , SetPart_function_type( &::PartActorGenerator< 3 >::SetPart )
                , ( bp::arg("pPart") )
                , "Set the part\n@param pPart the part to render\n/" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< PartActorGenerator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< PartActorGenerator< 3 > >, boost::shared_ptr< AbstractActorGenerator< 3 > > >();
    }

    { //::RegularGridActorGenerator< 2 >
        typedef bp::class_< RegularGridActorGenerator_less__2__greater__wrapper, bp::bases< AbstractActorGenerator< 2 > > > RegularGridActorGenerator2_exposer_t;
        RegularGridActorGenerator2_exposer_t RegularGridActorGenerator2_exposer = RegularGridActorGenerator2_exposer_t( "RegularGridActorGenerator2", "", bp::init< >("Constructor\n/") );
        bp::scope RegularGridActorGenerator2_scope( RegularGridActorGenerator2_exposer );
        { //::RegularGridActorGenerator< 2 >::AddActor
        
            typedef RegularGridActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            typedef void ( RegularGridActorGenerator_less__2__greater__wrapper::*default_AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            RegularGridActorGenerator2_exposer.def( 
                "AddActor"
                , AddActor_function_type(&::RegularGridActorGenerator< 2 >::AddActor)
                , default_AddActor_function_type(&RegularGridActorGenerator_less__2__greater__wrapper::default_AddActor)
                , ( bp::arg("pRenderer") ) );
        
        }
        { //::RegularGridActorGenerator< 2 >::SetEdgeOpacity
        
            typedef RegularGridActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetEdgeOpacity_function_type)( double ) ;
            
            RegularGridActorGenerator2_exposer.def( 
                "SetEdgeOpacity"
                , SetEdgeOpacity_function_type( &::RegularGridActorGenerator< 2 >::SetEdgeOpacity )
                , ( bp::arg("opacity") )
                , "Set the opacity for the edges\n@param opacity the opacity for the edges\n/" );
        
        }
        { //::RegularGridActorGenerator< 2 >::SetRegularGrid
        
            typedef RegularGridActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetRegularGrid_function_type)( ::boost::shared_ptr< RegularGrid< 2 > > ) ;
            
            RegularGridActorGenerator2_exposer.def( 
                "SetRegularGrid"
                , SetRegularGrid_function_type( &::RegularGridActorGenerator< 2 >::SetRegularGrid )
                , ( bp::arg("pRegularGrid") )
                , "Set the RegularGrid\n@param pRegularGrid the RegularGrid to render\n/" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< RegularGridActorGenerator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< RegularGridActorGenerator< 2 > >, boost::shared_ptr< AbstractActorGenerator< 2 > > >();
    }

    { //::RegularGridActorGenerator< 3 >
        typedef bp::class_< RegularGridActorGenerator_less__3__greater__wrapper, bp::bases< AbstractActorGenerator< 3 > > > RegularGridActorGenerator3_exposer_t;
        RegularGridActorGenerator3_exposer_t RegularGridActorGenerator3_exposer = RegularGridActorGenerator3_exposer_t( "RegularGridActorGenerator3", "", bp::init< >("Constructor\n/") );
        bp::scope RegularGridActorGenerator3_scope( RegularGridActorGenerator3_exposer );
        { //::RegularGridActorGenerator< 3 >::AddActor
        
            typedef RegularGridActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            typedef void ( RegularGridActorGenerator_less__3__greater__wrapper::*default_AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            RegularGridActorGenerator3_exposer.def( 
                "AddActor"
                , AddActor_function_type(&::RegularGridActorGenerator< 3 >::AddActor)
                , default_AddActor_function_type(&RegularGridActorGenerator_less__3__greater__wrapper::default_AddActor)
                , ( bp::arg("pRenderer") ) );
        
        }
        { //::RegularGridActorGenerator< 3 >::SetEdgeOpacity
        
            typedef RegularGridActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetEdgeOpacity_function_type)( double ) ;
            
            RegularGridActorGenerator3_exposer.def( 
                "SetEdgeOpacity"
                , SetEdgeOpacity_function_type( &::RegularGridActorGenerator< 3 >::SetEdgeOpacity )
                , ( bp::arg("opacity") )
                , "Set the opacity for the edges\n@param opacity the opacity for the edges\n/" );
        
        }
        { //::RegularGridActorGenerator< 3 >::SetRegularGrid
        
            typedef RegularGridActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRegularGrid_function_type)( ::boost::shared_ptr< RegularGrid< 3 > > ) ;
            
            RegularGridActorGenerator3_exposer.def( 
                "SetRegularGrid"
                , SetRegularGrid_function_type( &::RegularGridActorGenerator< 3 >::SetRegularGrid )
                , ( bp::arg("pRegularGrid") )
                , "Set the RegularGrid\n@param pRegularGrid the RegularGrid to render\n/" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< RegularGridActorGenerator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< RegularGridActorGenerator< 3 > >, boost::shared_ptr< AbstractActorGenerator< 3 > > >();
    }

    { //::VesselNetworkActorGenerator< 2 >
        typedef bp::class_< VesselNetworkActorGenerator_less__2__greater__wrapper, bp::bases< AbstractActorGenerator< 2 > > > VesselNetworkActorGenerator2_exposer_t;
        VesselNetworkActorGenerator2_exposer_t VesselNetworkActorGenerator2_exposer = VesselNetworkActorGenerator2_exposer_t( "VesselNetworkActorGenerator2", "", bp::init< >("Constructor\n/") );
        bp::scope VesselNetworkActorGenerator2_scope( VesselNetworkActorGenerator2_exposer );
        { //::VesselNetworkActorGenerator< 2 >::AddActor
        
            typedef VesselNetworkActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            typedef void ( VesselNetworkActorGenerator_less__2__greater__wrapper::*default_AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            VesselNetworkActorGenerator2_exposer.def( 
                "AddActor"
                , AddActor_function_type(&::VesselNetworkActorGenerator< 2 >::AddActor)
                , default_AddActor_function_type(&VesselNetworkActorGenerator_less__2__greater__wrapper::default_AddActor)
                , ( bp::arg("pRenderer") ) );
        
        }
        { //::VesselNetworkActorGenerator< 2 >::SetVesselNetwork
        
            typedef VesselNetworkActorGenerator< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 2 > > ) ;
            
            VesselNetworkActorGenerator2_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::VesselNetworkActorGenerator< 2 >::SetVesselNetwork )
                , ( bp::arg("pVesselNetwork") )
                , "Set the VesselNetwork\n@param pVesselNetwork the VesselNetwork to render\n/" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< VesselNetworkActorGenerator<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselNetworkActorGenerator< 2 > >, boost::shared_ptr< AbstractActorGenerator< 2 > > >();
    }

    { //::VesselNetworkActorGenerator< 3 >
        typedef bp::class_< VesselNetworkActorGenerator_less__3__greater__wrapper, bp::bases< AbstractActorGenerator< 3 > > > VesselNetworkActorGenerator3_exposer_t;
        VesselNetworkActorGenerator3_exposer_t VesselNetworkActorGenerator3_exposer = VesselNetworkActorGenerator3_exposer_t( "VesselNetworkActorGenerator3", "", bp::init< >("Constructor\n/") );
        bp::scope VesselNetworkActorGenerator3_scope( VesselNetworkActorGenerator3_exposer );
        { //::VesselNetworkActorGenerator< 3 >::AddActor
        
            typedef VesselNetworkActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            typedef void ( VesselNetworkActorGenerator_less__3__greater__wrapper::*default_AddActor_function_type)( ::vtkSmartPointer< vtkRenderer > ) ;
            
            VesselNetworkActorGenerator3_exposer.def( 
                "AddActor"
                , AddActor_function_type(&::VesselNetworkActorGenerator< 3 >::AddActor)
                , default_AddActor_function_type(&VesselNetworkActorGenerator_less__3__greater__wrapper::default_AddActor)
                , ( bp::arg("pRenderer") ) );
        
        }
        { //::VesselNetworkActorGenerator< 3 >::SetVesselNetwork
        
            typedef VesselNetworkActorGenerator< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetVesselNetwork_function_type)( ::boost::shared_ptr< VesselNetwork< 3 > > ) ;
            
            VesselNetworkActorGenerator3_exposer.def( 
                "SetVesselNetwork"
                , SetVesselNetwork_function_type( &::VesselNetworkActorGenerator< 3 >::SetVesselNetwork )
                , ( bp::arg("pVesselNetwork") )
                , "Set the VesselNetwork\n@param pVesselNetwork the VesselNetwork to render\n/" );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< VesselNetworkActorGenerator<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselNetworkActorGenerator< 3 > >, boost::shared_ptr< AbstractActorGenerator< 3 > > >();
    }
}
