// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "wrapper_header_collection.hpp"
#include "DiscreteContinuumMesh3_3.pypp.hpp"

namespace bp = boost::python;

struct DiscreteContinuumMesh_less__3_comma__3__greater__wrapper : DiscreteContinuumMesh< 3, 3 >, bp::wrapper< DiscreteContinuumMesh< 3, 3 > > {

    DiscreteContinuumMesh_less__3_comma__3__greater__wrapper( )
    : DiscreteContinuumMesh<3, 3>( )
      , bp::wrapper< DiscreteContinuumMesh< 3, 3 > >(){
        // null constructor
    
    }

    virtual ::DimensionalChastePoint< 3 > GetGlobalCellLocation( unsigned int index ) {
        if( bp::override func_GetGlobalCellLocation = this->get_override( "GetGlobalCellLocation" ) )
            return func_GetGlobalCellLocation( index );
        else{
            return this->DiscreteContinuumMesh< 3, 3 >::GetGlobalCellLocation( index );
        }
    }
    
    ::DimensionalChastePoint< 3 > default_GetGlobalCellLocation( unsigned int index ) {
        return DiscreteContinuumMesh< 3, 3 >::GetGlobalCellLocation( index );
    }

    virtual void SetUpVtkGrid(  ) {
        if( bp::override func_SetUpVtkGrid = this->get_override( "SetUpVtkGrid" ) )
            func_SetUpVtkGrid(  );
        else{
            this->DiscreteContinuumMesh< 3, 3 >::SetUpVtkGrid(  );
        }
    }
    
    void default_SetUpVtkGrid(  ) {
        DiscreteContinuumMesh< 3, 3 >::SetUpVtkGrid( );
    }

    virtual void AddCellData( ::std::vector< double > const & rCellValues, ::std::string const & rName="Default Data" ) {
        if( bp::override func_AddCellData = this->get_override( "AddCellData" ) )
            func_AddCellData( boost::ref(rCellValues), rName );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::AddCellData( boost::ref(rCellValues), rName );
        }
    }
    
    void default_AddCellData( ::std::vector< double > const & rCellValues, ::std::string const & rName="Default Data" ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::AddCellData( boost::ref(rCellValues), rName );
    }

    virtual void AddPointData( ::std::vector< double > const & rPointValues, ::std::string const & rName="Default Data" ) {
        if( bp::override func_AddPointData = this->get_override( "AddPointData" ) )
            func_AddPointData( boost::ref(rPointValues), rName );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::AddPointData( boost::ref(rPointValues), rName );
        }
    }
    
    void default_AddPointData( ::std::vector< double > const & rPointValues, ::std::string const & rName="Default Data" ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::AddPointData( boost::ref(rPointValues), rName );
    }

    virtual void AllGatherAllCellData(  ) {
        if( bp::override func_AllGatherAllCellData = this->get_override( "AllGatherAllCellData" ) )
            func_AllGatherAllCellData(  );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherAllCellData(  );
        }
    }
    
    void default_AllGatherAllCellData(  ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherAllCellData( );
    }

    virtual void AllGatherAllPointData(  ) {
        if( bp::override func_AllGatherAllPointData = this->get_override( "AllGatherAllPointData" ) )
            func_AllGatherAllPointData(  );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherAllPointData(  );
        }
    }
    
    void default_AllGatherAllPointData(  ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherAllPointData( );
    }

    virtual void AllGatherCellData( ::std::string const & rName ) {
        if( bp::override func_AllGatherCellData = this->get_override( "AllGatherCellData" ) )
            func_AllGatherCellData( rName );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherCellData( rName );
        }
    }
    
    void default_AllGatherCellData( ::std::string const & rName ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherCellData( rName );
    }

    virtual void AllGatherPointData( ::std::string const & rName ) {
        if( bp::override func_AllGatherPointData = this->get_override( "AllGatherPointData" ) )
            func_AllGatherPointData( rName );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherPointData( rName );
        }
    }
    
    void default_AllGatherPointData( ::std::string const & rName ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherPointData( rName );
    }

    virtual void GatherAllCellData(  ) {
        if( bp::override func_GatherAllCellData = this->get_override( "GatherAllCellData" ) )
            func_GatherAllCellData(  );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::GatherAllCellData(  );
        }
    }
    
    void default_GatherAllCellData(  ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::GatherAllCellData( );
    }

    virtual void GatherAllPointData(  ) {
        if( bp::override func_GatherAllPointData = this->get_override( "GatherAllPointData" ) )
            func_GatherAllPointData(  );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::GatherAllPointData(  );
        }
    }
    
    void default_GatherAllPointData(  ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::GatherAllPointData( );
    }

    virtual void GatherCellData( ::std::string const & rName ) {
        if( bp::override func_GatherCellData = this->get_override( "GatherCellData" ) )
            func_GatherCellData( rName );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::GatherCellData( rName );
        }
    }
    
    void default_GatherCellData( ::std::string const & rName ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::GatherCellData( rName );
    }

    virtual void GatherPointData( ::std::string const & rName ) {
        if( bp::override func_GatherPointData = this->get_override( "GatherPointData" ) )
            func_GatherPointData( rName );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::GatherPointData( rName );
        }
    }
    
    void default_GatherPointData( ::std::string const & rName ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::GatherPointData( rName );
    }

    virtual ::vtkSmartPointer< vtkPolyData > GetBoundingGeometry(  ) {
        if( bp::override func_GetBoundingGeometry = this->get_override( "GetBoundingGeometry" ) )
            return func_GetBoundingGeometry(  );
        else{
            return this->AbstractDiscreteContinuumGrid< 3, 3 >::GetBoundingGeometry(  );
        }
    }
    
    ::vtkSmartPointer< vtkPolyData > default_GetBoundingGeometry(  ) {
        return AbstractDiscreteContinuumGrid< 3, 3 >::GetBoundingGeometry( );
    }

    virtual ::DimensionalChastePoint< 3 > GetCellLocation( unsigned int index ) {
        if( bp::override func_GetCellLocation = this->get_override( "GetCellLocation" ) )
            return func_GetCellLocation( index );
        else{
            return this->AbstractDiscreteContinuumGrid< 3, 3 >::GetCellLocation( index );
        }
    }
    
    ::DimensionalChastePoint< 3 > default_GetCellLocation( unsigned int index ) {
        return AbstractDiscreteContinuumGrid< 3, 3 >::GetCellLocation( index );
    }

    virtual unsigned int GetGlobalIndex( unsigned int localIndex ) {
        if( bp::override func_GetGlobalIndex = this->get_override( "GetGlobalIndex" ) )
            return func_GetGlobalIndex( localIndex );
        else{
            return this->AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalIndex( localIndex );
        }
    }
    
    unsigned int default_GetGlobalIndex( unsigned int localIndex ) {
        return AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalIndex( localIndex );
    }

    virtual ::DimensionalChastePoint< 3 > GetGlobalPoint( unsigned int index ) {
        if( bp::override func_GetGlobalPoint = this->get_override( "GetGlobalPoint" ) )
            return func_GetGlobalPoint( index );
        else{
            return this->AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalPoint( index );
        }
    }
    
    ::DimensionalChastePoint< 3 > default_GetGlobalPoint( unsigned int index ) {
        return AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalPoint( index );
    }

    virtual ::vtkSmartPointer< vtkDataSet > GetGlobalVtkGrid(  ) {
        if( bp::override func_GetGlobalVtkGrid = this->get_override( "GetGlobalVtkGrid" ) )
            return func_GetGlobalVtkGrid(  );
        else{
            return this->AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalVtkGrid(  );
        }
    }
    
    ::vtkSmartPointer< vtkDataSet > default_GetGlobalVtkGrid(  ) {
        return AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalVtkGrid( );
    }

    virtual int GetLocalIndex( unsigned int globalIndex ) {
        if( bp::override func_GetLocalIndex = this->get_override( "GetLocalIndex" ) )
            return func_GetLocalIndex( globalIndex );
        else{
            return this->AbstractDiscreteContinuumGrid< 3, 3 >::GetLocalIndex( globalIndex );
        }
    }
    
    int default_GetLocalIndex( unsigned int globalIndex ) {
        return AbstractDiscreteContinuumGrid< 3, 3 >::GetLocalIndex( globalIndex );
    }

    virtual ::DimensionalChastePoint< 3 > GetPoint( unsigned int index ) {
        if( bp::override func_GetPoint = this->get_override( "GetPoint" ) )
            return func_GetPoint( index );
        else{
            return this->AbstractDiscreteContinuumGrid< 3, 3 >::GetPoint( index );
        }
    }
    
    ::DimensionalChastePoint< 3 > default_GetPoint( unsigned int index ) {
        return AbstractDiscreteContinuumGrid< 3, 3 >::GetPoint( index );
    }

    virtual ::vtkSmartPointer< vtkPoints > GetPoints(  ) {
        if( bp::override func_GetPoints = this->get_override( "GetPoints" ) )
            return func_GetPoints(  );
        else{
            return this->AbstractDiscreteContinuumGrid< 3, 3 >::GetPoints(  );
        }
    }
    
    ::vtkSmartPointer< vtkPoints > default_GetPoints(  ) {
        return AbstractDiscreteContinuumGrid< 3, 3 >::GetPoints( );
    }

    virtual ::vtkSmartPointer< vtkCellLocator > GetVtkCellLocator(  ) {
        if( bp::override func_GetVtkCellLocator = this->get_override( "GetVtkCellLocator" ) )
            return func_GetVtkCellLocator(  );
        else{
            return this->AbstractDiscreteContinuumGrid< 3, 3 >::GetVtkCellLocator(  );
        }
    }
    
    ::vtkSmartPointer< vtkCellLocator > default_GetVtkCellLocator(  ) {
        return AbstractDiscreteContinuumGrid< 3, 3 >::GetVtkCellLocator( );
    }

    virtual ::vtkSmartPointer< vtkDataSet > GetVtkGrid(  ) {
        if( bp::override func_GetVtkGrid = this->get_override( "GetVtkGrid" ) )
            return func_GetVtkGrid(  );
        else{
            return this->AbstractDiscreteContinuumGrid< 3, 3 >::GetVtkGrid(  );
        }
    }
    
    ::vtkSmartPointer< vtkDataSet > default_GetVtkGrid(  ) {
        return AbstractDiscreteContinuumGrid< 3, 3 >::GetVtkGrid( );
    }

    virtual void SetUpVtkCellLocator(  ) {
        if( bp::override func_SetUpVtkCellLocator = this->get_override( "SetUpVtkCellLocator" ) )
            func_SetUpVtkCellLocator(  );
        else{
            this->AbstractDiscreteContinuumGrid< 3, 3 >::SetUpVtkCellLocator(  );
        }
    }
    
    void default_SetUpVtkCellLocator(  ) {
        AbstractDiscreteContinuumGrid< 3, 3 >::SetUpVtkCellLocator( );
    }

};

void register_DiscreteContinuumMesh3_3_class(){

    { //::DiscreteContinuumMesh< 3, 3 >
        typedef bp::class_< DiscreteContinuumMesh_less__3_comma__3__greater__wrapper, bp::bases< AbstractDiscreteContinuumGrid< 3, 3 > >, boost::noncopyable > DiscreteContinuumMesh3_3_exposer_t;
        DiscreteContinuumMesh3_3_exposer_t DiscreteContinuumMesh3_3_exposer = DiscreteContinuumMesh3_3_exposer_t( "DiscreteContinuumMesh3_3", bp::init< >() );
        bp::scope DiscreteContinuumMesh3_3_scope( DiscreteContinuumMesh3_3_exposer );
        { //::DiscreteContinuumMesh< 3, 3 >::Create
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > > ( *Create_function_type )(  );
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "Create"
                , Create_function_type( &::DiscreteContinuumMesh< 3, 3 >::Create ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetConnectivity
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< std::vector< unsigned int > > ( exported_class_t::*GetConnectivity_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetConnectivity"
                , GetConnectivity_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetConnectivity ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetElementPartitioning
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetElementPartitioning_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetElementPartitioning"
                , GetElementPartitioning_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetElementPartitioning ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetGlobalCellLocation
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::DimensionalChastePoint< 3 > ( exported_class_t::*GetGlobalCellLocation_function_type)( unsigned int ) ;
            typedef ::DimensionalChastePoint< 3 > ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetGlobalCellLocation_function_type)( unsigned int ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetGlobalCellLocation"
                , GetGlobalCellLocation_function_type(&::DiscreteContinuumMesh< 3, 3 >::GetGlobalCellLocation)
                , default_GetGlobalCellLocation_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetGlobalCellLocation)
                , ( bp::arg("index") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::GetPointLocations
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkPoints > ( exported_class_t::*GetPointLocations_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetPointLocations"
                , GetPointLocations_function_type( &::DiscreteContinuumMesh< 3, 3 >::GetPointLocations ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::ImportDiscreteContinuumMeshFromTetgen
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*ImportDiscreteContinuumMeshFromTetgen_function_type)( ::tetgen::tetgenio &,unsigned int,int *,unsigned int,int *,int * ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "ImportDiscreteContinuumMeshFromTetgen"
                , ImportDiscreteContinuumMeshFromTetgen_function_type( &::DiscreteContinuumMesh< 3, 3 >::ImportDiscreteContinuumMeshFromTetgen )
                , ( bp::arg("mesherOutput"), bp::arg("numberOfElements"), bp::arg("elementList"), bp::arg("numberOfFaces"), bp::arg("faceList"), bp::arg("edgeMarkerList") ) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::SetUpVtkGrid
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUpVtkGrid_function_type)(  ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_SetUpVtkGrid_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetUpVtkGrid"
                , SetUpVtkGrid_function_type(&::DiscreteContinuumMesh< 3, 3 >::SetUpVtkGrid)
                , default_SetUpVtkGrid_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_SetUpVtkGrid) );
        
        }
        { //::DiscreteContinuumMesh< 3, 3 >::rGetCellVolumes
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::std::vector< double > const & ( exported_class_t::*rGetCellVolumes_function_type)( bool,bool ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "rGetCellVolumes"
                , rGetCellVolumes_function_type(&::DiscreteContinuumMesh< 3, 3 >::rGetCellVolumes)
                , ( bp::arg("update")=(bool)(false), bp::arg("jiggle")=(bool)(false) )
                , bp::return_internal_reference< >() );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::AddCellData
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddCellData_function_type)( ::std::vector< double > const &,::std::string const & ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_AddCellData_function_type)( ::std::vector< double > const &,::std::string const & ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "AddCellData"
                , AddCellData_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::AddCellData)
                , default_AddCellData_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_AddCellData)
                , ( bp::arg("rCellValues"), bp::arg("rName")="Default Data" ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::AddPointData
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AddPointData_function_type)( ::std::vector< double > const &,::std::string const & ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_AddPointData_function_type)( ::std::vector< double > const &,::std::string const & ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "AddPointData"
                , AddPointData_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::AddPointData)
                , default_AddPointData_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_AddPointData)
                , ( bp::arg("rPointValues"), bp::arg("rName")="Default Data" ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherAllCellData
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AllGatherAllCellData_function_type)(  ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_AllGatherAllCellData_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "AllGatherAllCellData"
                , AllGatherAllCellData_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherAllCellData)
                , default_AllGatherAllCellData_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_AllGatherAllCellData) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherAllPointData
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AllGatherAllPointData_function_type)(  ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_AllGatherAllPointData_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "AllGatherAllPointData"
                , AllGatherAllPointData_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherAllPointData)
                , default_AllGatherAllPointData_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_AllGatherAllPointData) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherCellData
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AllGatherCellData_function_type)( ::std::string const & ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_AllGatherCellData_function_type)( ::std::string const & ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "AllGatherCellData"
                , AllGatherCellData_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherCellData)
                , default_AllGatherCellData_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_AllGatherCellData)
                , ( bp::arg("rName") ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherPointData
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*AllGatherPointData_function_type)( ::std::string const & ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_AllGatherPointData_function_type)( ::std::string const & ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "AllGatherPointData"
                , AllGatherPointData_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::AllGatherPointData)
                , default_AllGatherPointData_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_AllGatherPointData)
                , ( bp::arg("rName") ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GatherAllCellData
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*GatherAllCellData_function_type)(  ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GatherAllCellData_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GatherAllCellData"
                , GatherAllCellData_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GatherAllCellData)
                , default_GatherAllCellData_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GatherAllCellData) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GatherAllPointData
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*GatherAllPointData_function_type)(  ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GatherAllPointData_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GatherAllPointData"
                , GatherAllPointData_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GatherAllPointData)
                , default_GatherAllPointData_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GatherAllPointData) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GatherCellData
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*GatherCellData_function_type)( ::std::string const & ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GatherCellData_function_type)( ::std::string const & ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GatherCellData"
                , GatherCellData_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GatherCellData)
                , default_GatherCellData_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GatherCellData)
                , ( bp::arg("rName") ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GatherPointData
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*GatherPointData_function_type)( ::std::string const & ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GatherPointData_function_type)( ::std::string const & ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GatherPointData"
                , GatherPointData_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GatherPointData)
                , default_GatherPointData_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GatherPointData)
                , ( bp::arg("rName") ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GetBoundingGeometry
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkPolyData > ( exported_class_t::*GetBoundingGeometry_function_type)(  ) ;
            typedef ::vtkSmartPointer< vtkPolyData > ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetBoundingGeometry_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetBoundingGeometry"
                , GetBoundingGeometry_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GetBoundingGeometry)
                , default_GetBoundingGeometry_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetBoundingGeometry) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GetCellLocation
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::DimensionalChastePoint< 3 > ( exported_class_t::*GetCellLocation_function_type)( unsigned int ) ;
            typedef ::DimensionalChastePoint< 3 > ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetCellLocation_function_type)( unsigned int ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetCellLocation"
                , GetCellLocation_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GetCellLocation)
                , default_GetCellLocation_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetCellLocation)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalIndex
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetGlobalIndex_function_type)( unsigned int ) ;
            typedef unsigned int ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetGlobalIndex_function_type)( unsigned int ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetGlobalIndex"
                , GetGlobalIndex_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalIndex)
                , default_GetGlobalIndex_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetGlobalIndex)
                , ( bp::arg("localIndex") ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalPoint
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::DimensionalChastePoint< 3 > ( exported_class_t::*GetGlobalPoint_function_type)( unsigned int ) ;
            typedef ::DimensionalChastePoint< 3 > ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetGlobalPoint_function_type)( unsigned int ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetGlobalPoint"
                , GetGlobalPoint_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalPoint)
                , default_GetGlobalPoint_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetGlobalPoint)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalVtkGrid
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkDataSet > ( exported_class_t::*GetGlobalVtkGrid_function_type)(  ) ;
            typedef ::vtkSmartPointer< vtkDataSet > ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetGlobalVtkGrid_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetGlobalVtkGrid"
                , GetGlobalVtkGrid_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GetGlobalVtkGrid)
                , default_GetGlobalVtkGrid_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetGlobalVtkGrid) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GetLocalIndex
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef int ( exported_class_t::*GetLocalIndex_function_type)( unsigned int ) ;
            typedef int ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetLocalIndex_function_type)( unsigned int ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetLocalIndex"
                , GetLocalIndex_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GetLocalIndex)
                , default_GetLocalIndex_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetLocalIndex)
                , ( bp::arg("globalIndex") ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GetPoint
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::DimensionalChastePoint< 3 > ( exported_class_t::*GetPoint_function_type)( unsigned int ) ;
            typedef ::DimensionalChastePoint< 3 > ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetPoint_function_type)( unsigned int ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetPoint"
                , GetPoint_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GetPoint)
                , default_GetPoint_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetPoint)
                , ( bp::arg("index") ) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GetPoints
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkPoints > ( exported_class_t::*GetPoints_function_type)(  ) ;
            typedef ::vtkSmartPointer< vtkPoints > ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetPoints_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetPoints"
                , GetPoints_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GetPoints)
                , default_GetPoints_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetPoints) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GetVtkCellLocator
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkCellLocator > ( exported_class_t::*GetVtkCellLocator_function_type)(  ) ;
            typedef ::vtkSmartPointer< vtkCellLocator > ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetVtkCellLocator_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetVtkCellLocator"
                , GetVtkCellLocator_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GetVtkCellLocator)
                , default_GetVtkCellLocator_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetVtkCellLocator) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::GetVtkGrid
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkDataSet > ( exported_class_t::*GetVtkGrid_function_type)(  ) ;
            typedef ::vtkSmartPointer< vtkDataSet > ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_GetVtkGrid_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "GetVtkGrid"
                , GetVtkGrid_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::GetVtkGrid)
                , default_GetVtkGrid_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_GetVtkGrid) );
        
        }
        { //::AbstractDiscreteContinuumGrid< 3, 3 >::SetUpVtkCellLocator
        
            typedef DiscreteContinuumMesh< 3, 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUpVtkCellLocator_function_type)(  ) ;
            typedef void ( DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::*default_SetUpVtkCellLocator_function_type)(  ) ;
            
            DiscreteContinuumMesh3_3_exposer.def( 
                "SetUpVtkCellLocator"
                , SetUpVtkCellLocator_function_type(&::AbstractDiscreteContinuumGrid< 3, 3 >::SetUpVtkCellLocator)
                , default_SetUpVtkCellLocator_function_type(&DiscreteContinuumMesh_less__3_comma__3__greater__wrapper::default_SetUpVtkCellLocator) );
        
        }
        DiscreteContinuumMesh3_3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< DiscreteContinuumMesh<3, 3> > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > >, boost::shared_ptr< AbstractDiscreteContinuumGrid< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > >, boost::shared_ptr< TetrahedralMesh< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > >, boost::shared_ptr< AbstractTetrahedralMesh< 3, 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< DiscreteContinuumMesh< 3, 3 > >, boost::shared_ptr< AbstractMesh< 3, 3 > > >();
    }

}
