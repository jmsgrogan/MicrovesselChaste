// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "wrapper_header_collection.hpp"
#include "AbstractFiniteElementSolverBase3.pypp.hpp"

namespace bp = boost::python;

struct AbstractFiniteElementSolverBase_less__3__greater__wrapper : AbstractFiniteElementSolverBase< 3 >, bp::wrapper< AbstractFiniteElementSolverBase< 3 > > {

    AbstractFiniteElementSolverBase_less__3__greater__wrapper(AbstractFiniteElementSolverBase<3> const & arg )
    : AbstractFiniteElementSolverBase<3>( arg )
      , bp::wrapper< AbstractFiniteElementSolverBase< 3 > >(){
        // copy constructor
        
    }

    AbstractFiniteElementSolverBase_less__3__greater__wrapper( )
    : AbstractFiniteElementSolverBase<3>( )
      , bp::wrapper< AbstractFiniteElementSolverBase< 3 > >(){
        // null constructor
    
    }

    virtual void Setup(  ) {
        if( bp::override func_Setup = this->get_override( "Setup" ) )
            func_Setup(  );
        else{
            this->AbstractFiniteElementSolverBase< 3 >::Setup(  );
        }
    }
    
    void default_Setup(  ) {
        AbstractFiniteElementSolverBase< 3 >::Setup( );
    }

    virtual void Solve(  ) {
        if( bp::override func_Solve = this->get_override( "Solve" ) )
            func_Solve(  );
        else{
            this->AbstractFiniteElementSolverBase< 3 >::Solve(  );
        }
    }
    
    void default_Solve(  ) {
        AbstractFiniteElementSolverBase< 3 >::Solve( );
    }

    virtual void Update(  ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update(  );
        else{
            this->AbstractFiniteElementSolverBase< 3 >::Update(  );
        }
    }
    
    void default_Update(  ) {
        AbstractFiniteElementSolverBase< 3 >::Update( );
    }

    virtual ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > GetConcentrations(  ) {
        if( bp::override func_GetConcentrations = this->get_override( "GetConcentrations" ) )
            return func_GetConcentrations(  );
        else{
            return this->AbstractDiscreteContinuumSolver< 3 >::GetConcentrations(  );
        }
    }
    
    ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > default_GetConcentrations(  ) {
        return AbstractDiscreteContinuumSolver< 3 >::GetConcentrations( );
    }

    virtual ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > GetConcentrations( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 3, 3 > > pGrid ) {
        if( bp::override func_GetConcentrations = this->get_override( "GetConcentrations" ) )
            return func_GetConcentrations( pGrid );
        else{
            return this->AbstractDiscreteContinuumSolver< 3 >::GetConcentrations( pGrid );
        }
    }
    
    ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > default_GetConcentrations( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 3, 3 > > pGrid ) {
        return AbstractDiscreteContinuumSolver< 3 >::GetConcentrations( pGrid );
    }

    virtual ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > GetConcentrations( ::vtkSmartPointer< vtkPoints > pSamplePoints ) {
        if( bp::override func_GetConcentrations = this->get_override( "GetConcentrations" ) )
            return func_GetConcentrations( pSamplePoints );
        else{
            return this->AbstractDiscreteContinuumSolver< 3 >::GetConcentrations( pSamplePoints );
        }
    }
    
    ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > default_GetConcentrations( ::vtkSmartPointer< vtkPoints > pSamplePoints ) {
        return AbstractDiscreteContinuumSolver< 3 >::GetConcentrations( pSamplePoints );
    }

    virtual ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > GetConcentrationsAtCentroids(  ) {
        if( bp::override func_GetConcentrationsAtCentroids = this->get_override( "GetConcentrationsAtCentroids" ) )
            return func_GetConcentrationsAtCentroids(  );
        else{
            return this->AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::GetConcentrationsAtCentroids(  );
        }
    }
    
    ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > default_GetConcentrationsAtCentroids(  ) {
        return AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::GetConcentrationsAtCentroids( );
    }

    virtual ::std::vector< double > GetSolution(  ) {
        if( bp::override func_GetSolution = this->get_override( "GetSolution" ) )
            return func_GetSolution(  );
        else{
            return this->AbstractDiscreteContinuumSolver< 3 >::GetSolution(  );
        }
    }
    
    ::std::vector< double > default_GetSolution(  ) {
        return AbstractDiscreteContinuumSolver< 3 >::GetSolution( );
    }

    virtual ::std::vector< double > GetSolution( ::vtkSmartPointer< vtkPoints > pSamplePoints ) {
        if( bp::override func_GetSolution = this->get_override( "GetSolution" ) )
            return func_GetSolution( pSamplePoints );
        else{
            return this->AbstractDiscreteContinuumSolver< 3 >::GetSolution( pSamplePoints );
        }
    }
    
    ::std::vector< double > default_GetSolution( ::vtkSmartPointer< vtkPoints > pSamplePoints ) {
        return AbstractDiscreteContinuumSolver< 3 >::GetSolution( pSamplePoints );
    }

    virtual ::std::vector< double > GetSolution( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 3, 3 > > pGrid ) {
        if( bp::override func_GetSolution = this->get_override( "GetSolution" ) )
            return func_GetSolution( pGrid );
        else{
            return this->AbstractDiscreteContinuumSolver< 3 >::GetSolution( pGrid );
        }
    }
    
    ::std::vector< double > default_GetSolution( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 3, 3 > > pGrid ) {
        return AbstractDiscreteContinuumSolver< 3 >::GetSolution( pGrid );
    }

    virtual ::vtkSmartPointer< vtkDataSet > GetVtkSolution(  ) {
        if( bp::override func_GetVtkSolution = this->get_override( "GetVtkSolution" ) )
            return func_GetVtkSolution(  );
        else{
            return this->AbstractDiscreteContinuumSolver< 3 >::GetVtkSolution(  );
        }
    }
    
    ::vtkSmartPointer< vtkDataSet > default_GetVtkSolution(  ) {
        return AbstractDiscreteContinuumSolver< 3 >::GetVtkSolution( );
    }

    virtual void UpdateCellData(  ) {
        if( bp::override func_UpdateCellData = this->get_override( "UpdateCellData" ) )
            func_UpdateCellData(  );
        else{
            this->AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateCellData(  );
        }
    }
    
    void default_UpdateCellData(  ) {
        AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateCellData( );
    }

    virtual void UpdateElementSolution( ::std::vector< double > const & rData ) {
        if( bp::override func_UpdateElementSolution = this->get_override( "UpdateElementSolution" ) )
            func_UpdateElementSolution( boost::ref(rData) );
        else{
            this->AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateElementSolution( boost::ref(rData) );
        }
    }
    
    void default_UpdateElementSolution( ::std::vector< double > const & rData ) {
        AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateElementSolution( boost::ref(rData) );
    }

    virtual void UpdateSolution( ::std::vector< double > const & rData ) {
        if( bp::override func_UpdateSolution = this->get_override( "UpdateSolution" ) )
            func_UpdateSolution( boost::ref(rData) );
        else{
            this->AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateSolution( boost::ref(rData) );
        }
    }
    
    void default_UpdateSolution( ::std::vector< double > const & rData ) {
        AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateSolution( boost::ref(rData) );
    }

    virtual void UpdateSolution( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > const & rData ) {
        if( bp::override func_UpdateSolution = this->get_override( "UpdateSolution" ) )
            func_UpdateSolution( boost::ref(rData) );
        else{
            this->AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateSolution( boost::ref(rData) );
        }
    }
    
    void default_UpdateSolution( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > const & rData ) {
        AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateSolution( boost::ref(rData) );
    }

    virtual void Write(  ) {
        if( bp::override func_Write = this->get_override( "Write" ) )
            func_Write(  );
        else{
            this->AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::Write(  );
        }
    }
    
    void default_Write(  ) {
        AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::Write( );
    }

};

void register_AbstractFiniteElementSolverBase3_class(){

    { //::AbstractFiniteElementSolverBase< 3 >
        typedef bp::class_< AbstractFiniteElementSolverBase_less__3__greater__wrapper, bp::bases< AbstractUnstructuredGridDiscreteContinuumSolver< 3 > > > AbstractFiniteElementSolverBase3_exposer_t;
        AbstractFiniteElementSolverBase3_exposer_t AbstractFiniteElementSolverBase3_exposer = AbstractFiniteElementSolverBase3_exposer_t( "AbstractFiniteElementSolverBase3", bp::init< >() );
        bp::scope AbstractFiniteElementSolverBase3_scope( AbstractFiniteElementSolverBase3_exposer );
        { //::AbstractFiniteElementSolverBase< 3 >::Create
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef ::boost::shared_ptr< AbstractFiniteElementSolverBase< 3 > > ( *Create_function_type )(  );
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "Create"
                , Create_function_type( &::AbstractFiniteElementSolverBase< 3 >::Create ) );
        
        }
        { //::AbstractFiniteElementSolverBase< 3 >::SetGuess
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetGuess_function_type)( ::std::vector< double > const & ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "SetGuess"
                , SetGuess_function_type( &::AbstractFiniteElementSolverBase< 3 >::SetGuess )
                , ( bp::arg("guess") ) );
        
        }
        { //::AbstractFiniteElementSolverBase< 3 >::SetUseSimpleNetonSolver
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetUseSimpleNetonSolver_function_type)( bool ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "SetUseSimpleNetonSolver"
                , SetUseSimpleNetonSolver_function_type( &::AbstractFiniteElementSolverBase< 3 >::SetUseSimpleNetonSolver )
                , ( bp::arg("useNewton") ) );
        
        }
        { //::AbstractFiniteElementSolverBase< 3 >::Setup
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef void ( exported_class_t::*Setup_function_type)(  ) ;
            typedef void ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_Setup_function_type)(  ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "Setup"
                , Setup_function_type(&::AbstractFiniteElementSolverBase< 3 >::Setup)
                , default_Setup_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_Setup) );
        
        }
        { //::AbstractFiniteElementSolverBase< 3 >::Solve
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef void ( exported_class_t::*Solve_function_type)(  ) ;
            typedef void ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_Solve_function_type)(  ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "Solve"
                , Solve_function_type(&::AbstractFiniteElementSolverBase< 3 >::Solve)
                , default_Solve_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_Solve) );
        
        }
        { //::AbstractFiniteElementSolverBase< 3 >::Update
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)(  ) ;
            typedef void ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_Update_function_type)(  ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "Update"
                , Update_function_type(&::AbstractFiniteElementSolverBase< 3 >::Update)
                , default_Update_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_Update) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 3 >::GetConcentrations
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( exported_class_t::*GetConcentrations_function_type)(  ) ;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_GetConcentrations_function_type)(  ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "GetConcentrations"
                , GetConcentrations_function_type(&::AbstractDiscreteContinuumSolver< 3 >::GetConcentrations)
                , default_GetConcentrations_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_GetConcentrations) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 3 >::GetConcentrations
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( exported_class_t::*GetConcentrations_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 3, 3 > > ) ;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_GetConcentrations_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 3, 3 > > ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "GetConcentrations"
                , GetConcentrations_function_type(&::AbstractDiscreteContinuumSolver< 3 >::GetConcentrations)
                , default_GetConcentrations_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_GetConcentrations)
                , ( bp::arg("pGrid") ) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 3 >::GetConcentrations
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( exported_class_t::*GetConcentrations_function_type)( ::vtkSmartPointer< vtkPoints > ) ;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_GetConcentrations_function_type)( ::vtkSmartPointer< vtkPoints > ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "GetConcentrations"
                , GetConcentrations_function_type(&::AbstractDiscreteContinuumSolver< 3 >::GetConcentrations)
                , default_GetConcentrations_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_GetConcentrations)
                , ( bp::arg("pSamplePoints") ) );
        
        }
        { //::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::GetConcentrationsAtCentroids
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( exported_class_t::*GetConcentrationsAtCentroids_function_type)(  ) ;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_GetConcentrationsAtCentroids_function_type)(  ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "GetConcentrationsAtCentroids"
                , GetConcentrationsAtCentroids_function_type(&::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::GetConcentrationsAtCentroids)
                , default_GetConcentrationsAtCentroids_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_GetConcentrationsAtCentroids) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 3 >::GetSolution
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef ::std::vector< double > ( exported_class_t::*GetSolution_function_type)(  ) ;
            typedef ::std::vector< double > ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_GetSolution_function_type)(  ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "GetSolution"
                , GetSolution_function_type(&::AbstractDiscreteContinuumSolver< 3 >::GetSolution)
                , default_GetSolution_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_GetSolution) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 3 >::GetSolution
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef ::std::vector< double > ( exported_class_t::*GetSolution_function_type)( ::vtkSmartPointer< vtkPoints > ) ;
            typedef ::std::vector< double > ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_GetSolution_function_type)( ::vtkSmartPointer< vtkPoints > ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "GetSolution"
                , GetSolution_function_type(&::AbstractDiscreteContinuumSolver< 3 >::GetSolution)
                , default_GetSolution_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_GetSolution)
                , ( bp::arg("pSamplePoints") ) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 3 >::GetSolution
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef ::std::vector< double > ( exported_class_t::*GetSolution_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 3, 3 > > ) ;
            typedef ::std::vector< double > ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_GetSolution_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 3, 3 > > ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "GetSolution"
                , GetSolution_function_type(&::AbstractDiscreteContinuumSolver< 3 >::GetSolution)
                , default_GetSolution_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_GetSolution)
                , ( bp::arg("pGrid") ) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 3 >::GetVtkSolution
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkDataSet > ( exported_class_t::*GetVtkSolution_function_type)(  ) ;
            typedef ::vtkSmartPointer< vtkDataSet > ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_GetVtkSolution_function_type)(  ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "GetVtkSolution"
                , GetVtkSolution_function_type(&::AbstractDiscreteContinuumSolver< 3 >::GetVtkSolution)
                , default_GetVtkSolution_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_GetVtkSolution) );
        
        }
        { //::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateCellData
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellData_function_type)(  ) ;
            typedef void ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_UpdateCellData_function_type)(  ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "UpdateCellData"
                , UpdateCellData_function_type(&::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateCellData)
                , default_UpdateCellData_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_UpdateCellData) );
        
        }
        { //::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateElementSolution
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateElementSolution_function_type)( ::std::vector< double > const & ) ;
            typedef void ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_UpdateElementSolution_function_type)( ::std::vector< double > const & ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "UpdateElementSolution"
                , UpdateElementSolution_function_type(&::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateElementSolution)
                , default_UpdateElementSolution_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_UpdateElementSolution)
                , ( bp::arg("rData") ) );
        
        }
        { //::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateSolution
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateSolution_function_type)( ::std::vector< double > const & ) ;
            typedef void ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_UpdateSolution_function_type)( ::std::vector< double > const & ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "UpdateSolution"
                , UpdateSolution_function_type(&::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateSolution)
                , default_UpdateSolution_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_UpdateSolution)
                , ( bp::arg("rData") ) );
        
        }
        { //::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateSolution
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateSolution_function_type)( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > const & ) ;
            typedef void ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_UpdateSolution_function_type)( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > const & ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "UpdateSolution"
                , UpdateSolution_function_type(&::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::UpdateSolution)
                , default_UpdateSolution_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_UpdateSolution)
                , ( bp::arg("rData") ) );
        
        }
        { //::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::Write
        
            typedef AbstractFiniteElementSolverBase< 3 > exported_class_t;
            typedef void ( exported_class_t::*Write_function_type)(  ) ;
            typedef void ( AbstractFiniteElementSolverBase_less__3__greater__wrapper::*default_Write_function_type)(  ) ;
            
            AbstractFiniteElementSolverBase3_exposer.def( 
                "Write"
                , Write_function_type(&::AbstractUnstructuredGridDiscreteContinuumSolver< 3 >::Write)
                , default_Write_function_type(&AbstractFiniteElementSolverBase_less__3__greater__wrapper::default_Write) );
        
        }
        AbstractFiniteElementSolverBase3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< AbstractFiniteElementSolverBase<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractFiniteElementSolverBase< 3 > >, boost::shared_ptr< AbstractUnstructuredGridDiscreteContinuumSolver< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< AbstractFiniteElementSolverBase< 3 > >, boost::shared_ptr< AbstractDiscreteContinuumSolver< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< SimpleNonLinearEllipticFiniteElementSolver< 3 > >, boost::shared_ptr< AbstractFiniteElementSolverBase< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< SimpleParabolicFiniteElementSolver< 3 > >, boost::shared_ptr< AbstractFiniteElementSolverBase< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< CoupledLumpedSystemFiniteElementSolver< 3 > >, boost::shared_ptr< AbstractFiniteElementSolverBase< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< SimpleLinearEllipticFiniteElementSolver< 3 > >, boost::shared_ptr< AbstractFiniteElementSolverBase< 3 > > >();
    }

}
