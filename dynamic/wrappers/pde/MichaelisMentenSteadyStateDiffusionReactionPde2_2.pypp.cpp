// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "wrapper_header_collection.hpp"
#include "MichaelisMentenSteadyStateDiffusionReactionPde2_2.pypp.hpp"

namespace bp = boost::python;

struct MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper : MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >, bp::wrapper< MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > > {

    MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper(MichaelisMentenSteadyStateDiffusionReactionPde<2, 2> const & arg )
    : MichaelisMentenSteadyStateDiffusionReactionPde<2, 2>( arg )
      , bp::wrapper< MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > >(){
        // copy constructor
        
    }

    MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper( )
    : MichaelisMentenSteadyStateDiffusionReactionPde<2, 2>( )
      , bp::wrapper< MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > >(){
        // null constructor
    
    }

    virtual double ComputeLinearSourceTerm( ::ChastePoint< 2 > const & rX ) {
        if( bp::override func_ComputeLinearSourceTerm = this->get_override( "ComputeLinearSourceTerm" ) )
            return func_ComputeLinearSourceTerm( boost::ref(rX) );
        else{
            return this->MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeLinearSourceTerm( boost::ref(rX) );
        }
    }
    
    double default_ComputeLinearSourceTerm( ::ChastePoint< 2 > const & rX ) {
        return MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeLinearSourceTerm( boost::ref(rX) );
    }

    virtual double ComputeNonlinearSourceTerm( ::ChastePoint< 2 > const & rX, double u ) {
        if( bp::override func_ComputeNonlinearSourceTerm = this->get_override( "ComputeNonlinearSourceTerm" ) )
            return func_ComputeNonlinearSourceTerm( boost::ref(rX), u );
        else{
            return this->MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTerm( boost::ref(rX), u );
        }
    }
    
    double default_ComputeNonlinearSourceTerm( ::ChastePoint< 2 > const & rX, double u ) {
        return MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTerm( boost::ref(rX), u );
    }

    virtual ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ComputeNonlinearSourceTerm( unsigned int gridIndex, ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > u ) {
        if( bp::override func_ComputeNonlinearSourceTerm = this->get_override( "ComputeNonlinearSourceTerm" ) )
            return func_ComputeNonlinearSourceTerm( gridIndex, u );
        else{
            return this->MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTerm( gridIndex, u );
        }
    }
    
    ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > default_ComputeNonlinearSourceTerm( unsigned int gridIndex, ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > u ) {
        return MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTerm( gridIndex, u );
    }

    virtual double ComputeNonlinearSourceTermPrime( ::ChastePoint< 2 > const & rX, double u ) {
        if( bp::override func_ComputeNonlinearSourceTermPrime = this->get_override( "ComputeNonlinearSourceTermPrime" ) )
            return func_ComputeNonlinearSourceTermPrime( boost::ref(rX), u );
        else{
            return this->MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTermPrime( boost::ref(rX), u );
        }
    }
    
    double default_ComputeNonlinearSourceTermPrime( ::ChastePoint< 2 > const & rX, double u ) {
        return MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTermPrime( boost::ref(rX), u );
    }

    virtual ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ComputeNonlinearSourceTermPrime( unsigned int gridIndex, ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > u ) {
        if( bp::override func_ComputeNonlinearSourceTermPrime = this->get_override( "ComputeNonlinearSourceTermPrime" ) )
            return func_ComputeNonlinearSourceTermPrime( gridIndex, u );
        else{
            return this->MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTermPrime( gridIndex, u );
        }
    }
    
    ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > default_ComputeNonlinearSourceTermPrime( unsigned int gridIndex, ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > u ) {
        return MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTermPrime( gridIndex, u );
    }

    virtual ::boost::numeric::ublas::c_matrix< double, 2, 2 > ComputeDiffusionTerm( ::ChastePoint< 2 > const & rX, double u ) {
        if( bp::override func_ComputeDiffusionTerm = this->get_override( "ComputeDiffusionTerm" ) )
            return func_ComputeDiffusionTerm( boost::ref(rX), u );
        else{
            return this->AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeDiffusionTerm( boost::ref(rX), u );
        }
    }
    
    ::boost::numeric::ublas::c_matrix< double, 2, 2 > default_ComputeDiffusionTerm( ::ChastePoint< 2 > const & rX, double u ) {
        return AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeDiffusionTerm( boost::ref(rX), u );
    }

    virtual ::boost::numeric::ublas::c_matrix< double, 2, 2 > ComputeDiffusionTermPrime( ::ChastePoint< 2 > const & rX, double u ) {
        if( bp::override func_ComputeDiffusionTermPrime = this->get_override( "ComputeDiffusionTermPrime" ) )
            return func_ComputeDiffusionTermPrime( boost::ref(rX), u );
        else{
            return this->AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeDiffusionTermPrime( boost::ref(rX), u );
        }
    }
    
    ::boost::numeric::ublas::c_matrix< double, 2, 2 > default_ComputeDiffusionTermPrime( ::ChastePoint< 2 > const & rX, double u ) {
        return AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeDiffusionTermPrime( boost::ref(rX), u );
    }

    virtual ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ComputeLinearSourceTerm( unsigned int gridIndex=0 ) {
        if( bp::override func_ComputeLinearSourceTerm = this->get_override( "ComputeLinearSourceTerm" ) )
            return func_ComputeLinearSourceTerm( gridIndex );
        else{
            return this->AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeLinearSourceTerm( gridIndex );
        }
    }
    
    ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > default_ComputeLinearSourceTerm( unsigned int gridIndex=0 ) {
        return AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeLinearSourceTerm( gridIndex );
    }

    virtual void UpdateDiscreteSourceStrengths(  ) {
        if( bp::override func_UpdateDiscreteSourceStrengths = this->get_override( "UpdateDiscreteSourceStrengths" ) )
            func_UpdateDiscreteSourceStrengths(  );
        else{
            this->AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::UpdateDiscreteSourceStrengths(  );
        }
    }
    
    void default_UpdateDiscreteSourceStrengths(  ) {
        AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::UpdateDiscreteSourceStrengths( );
    }

};

void register_MichaelisMentenSteadyStateDiffusionReactionPde2_2_class(){

    { //::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >
        typedef bp::class_< MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper, bp::bases< AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 > > > MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer_t;
        MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer_t MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer = MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer_t( "MichaelisMentenSteadyStateDiffusionReactionPde2_2", bp::init< >() );
        bp::scope MichaelisMentenSteadyStateDiffusionReactionPde2_2_scope( MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer );
        { //::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeLinearSourceTerm
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*ComputeLinearSourceTerm_function_type)( ::ChastePoint< 2 > const & ) ;
            typedef double ( MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::*default_ComputeLinearSourceTerm_function_type)( ::ChastePoint< 2 > const & ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "ComputeLinearSourceTerm"
                , ComputeLinearSourceTerm_function_type(&::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeLinearSourceTerm)
                , default_ComputeLinearSourceTerm_function_type(&MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::default_ComputeLinearSourceTerm)
                , ( bp::arg("rX") ) );
        
        }
        { //::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTerm
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*ComputeNonlinearSourceTerm_function_type)( ::ChastePoint< 2 > const &,double ) ;
            typedef double ( MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::*default_ComputeNonlinearSourceTerm_function_type)( ::ChastePoint< 2 > const &,double ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "ComputeNonlinearSourceTerm"
                , ComputeNonlinearSourceTerm_function_type(&::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTerm)
                , default_ComputeNonlinearSourceTerm_function_type(&MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::default_ComputeNonlinearSourceTerm)
                , ( bp::arg("rX"), bp::arg("u") ) );
        
        }
        { //::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTerm
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*ComputeNonlinearSourceTerm_function_type)( unsigned int,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::*default_ComputeNonlinearSourceTerm_function_type)( unsigned int,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "ComputeNonlinearSourceTerm"
                , ComputeNonlinearSourceTerm_function_type(&::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTerm)
                , default_ComputeNonlinearSourceTerm_function_type(&MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::default_ComputeNonlinearSourceTerm)
                , ( bp::arg("gridIndex"), bp::arg("u") ) );
        
        }
        { //::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTermPrime
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef double ( exported_class_t::*ComputeNonlinearSourceTermPrime_function_type)( ::ChastePoint< 2 > const &,double ) ;
            typedef double ( MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::*default_ComputeNonlinearSourceTermPrime_function_type)( ::ChastePoint< 2 > const &,double ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "ComputeNonlinearSourceTermPrime"
                , ComputeNonlinearSourceTermPrime_function_type(&::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTermPrime)
                , default_ComputeNonlinearSourceTermPrime_function_type(&MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::default_ComputeNonlinearSourceTermPrime)
                , ( bp::arg("rX"), bp::arg("u") ) );
        
        }
        { //::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTermPrime
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*ComputeNonlinearSourceTermPrime_function_type)( unsigned int,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::*default_ComputeNonlinearSourceTermPrime_function_type)( unsigned int,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "ComputeNonlinearSourceTermPrime"
                , ComputeNonlinearSourceTermPrime_function_type(&::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::ComputeNonlinearSourceTermPrime)
                , default_ComputeNonlinearSourceTermPrime_function_type(&MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::default_ComputeNonlinearSourceTermPrime)
                , ( bp::arg("gridIndex"), bp::arg("u") ) );
        
        }
        { //::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::Create
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef ::boost::shared_ptr< MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > > ( *Create_function_type )(  );
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "Create"
                , Create_function_type( &::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::Create ) );
        
        }
        { //::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::GetMichaelisMentenThreshold
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetMichaelisMentenThreshold_function_type)(  ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "GetMichaelisMentenThreshold"
                , GetMichaelisMentenThreshold_function_type( &::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::GetMichaelisMentenThreshold ) );
        
        }
        { //::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::SetMichaelisMentenThreshold
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetMichaelisMentenThreshold_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "SetMichaelisMentenThreshold"
                , SetMichaelisMentenThreshold_function_type( &::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::SetMichaelisMentenThreshold )
                , ( bp::arg("threshold") ) );
        
        }
        { //::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::SetRateConstant
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*SetRateConstant_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "SetRateConstant"
                , SetRateConstant_function_type( &::MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 >::SetRateConstant )
                , ( bp::arg("rateConstant") ) );
        
        }
        { //::AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeDiffusionTerm
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_matrix< double, 2, 2 > ( exported_class_t::*ComputeDiffusionTerm_function_type)( ::ChastePoint< 2 > const &,double ) ;
            typedef ::boost::numeric::ublas::c_matrix< double, 2, 2 > ( MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::*default_ComputeDiffusionTerm_function_type)( ::ChastePoint< 2 > const &,double ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "ComputeDiffusionTerm"
                , ComputeDiffusionTerm_function_type(&::AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeDiffusionTerm)
                , default_ComputeDiffusionTerm_function_type(&MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::default_ComputeDiffusionTerm)
                , ( bp::arg("rX"), bp::arg("u") ) );
        
        }
        { //::AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeDiffusionTermPrime
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef ::boost::numeric::ublas::c_matrix< double, 2, 2 > ( exported_class_t::*ComputeDiffusionTermPrime_function_type)( ::ChastePoint< 2 > const &,double ) ;
            typedef ::boost::numeric::ublas::c_matrix< double, 2, 2 > ( MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::*default_ComputeDiffusionTermPrime_function_type)( ::ChastePoint< 2 > const &,double ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "ComputeDiffusionTermPrime"
                , ComputeDiffusionTermPrime_function_type(&::AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeDiffusionTermPrime)
                , default_ComputeDiffusionTermPrime_function_type(&MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::default_ComputeDiffusionTermPrime)
                , ( bp::arg("rX"), bp::arg("u") ) );
        
        }
        { //::AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeLinearSourceTerm
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*ComputeLinearSourceTerm_function_type)( unsigned int ) ;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::*default_ComputeLinearSourceTerm_function_type)( unsigned int ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "ComputeLinearSourceTerm"
                , ComputeLinearSourceTerm_function_type(&::AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::ComputeLinearSourceTerm)
                , default_ComputeLinearSourceTerm_function_type(&MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::default_ComputeLinearSourceTerm)
                , ( bp::arg("gridIndex")=(unsigned int)(0) ) );
        
        }
        { //::AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::UpdateDiscreteSourceStrengths
        
            typedef MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateDiscreteSourceStrengths_function_type)(  ) ;
            typedef void ( MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::*default_UpdateDiscreteSourceStrengths_function_type)(  ) ;
            
            MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.def( 
                "UpdateDiscreteSourceStrengths"
                , UpdateDiscreteSourceStrengths_function_type(&::AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 >::UpdateDiscreteSourceStrengths)
                , default_UpdateDiscreteSourceStrengths_function_type(&MichaelisMentenSteadyStateDiffusionReactionPde_less__2_comma__2__greater__wrapper::default_UpdateDiscreteSourceStrengths) );
        
        }
        MichaelisMentenSteadyStateDiffusionReactionPde2_2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< MichaelisMentenSteadyStateDiffusionReactionPde<2, 2> > >();
        bp::implicitly_convertible< boost::shared_ptr< MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > >, boost::shared_ptr< AbstractDiscreteContinuumNonLinearEllipticPde< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > >, boost::shared_ptr< AbstractDiscreteContinuumPde< 2, 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< MichaelisMentenSteadyStateDiffusionReactionPde< 2, 2 > >, boost::shared_ptr< AbstractNonlinearEllipticPde< 2 > > >();
    }

}
