// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "wrapper_header_collection.hpp"
#include "SimpleNonLinearEllipticFiniteDifferenceSolver2.pypp.hpp"

namespace bp = boost::python;

struct SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper : SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >, bp::wrapper< SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > > {

    SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper(SimpleNonLinearEllipticFiniteDifferenceSolver<2> const & arg )
    : SimpleNonLinearEllipticFiniteDifferenceSolver<2>( arg )
      , bp::wrapper< SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > >(){
        // copy constructor
        
    }

    SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper( )
    : SimpleNonLinearEllipticFiniteDifferenceSolver<2>( )
      , bp::wrapper< SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > >(){
        // null constructor
    
    }

    virtual void AssembleMatrix(  ) {
        if( bp::override func_AssembleMatrix = this->get_override( "AssembleMatrix" ) )
            func_AssembleMatrix(  );
        else{
            this->SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::AssembleMatrix(  );
        }
    }
    
    void default_AssembleMatrix(  ) {
        SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::AssembleMatrix( );
    }

    virtual void AssembleVector(  ) {
        if( bp::override func_AssembleVector = this->get_override( "AssembleVector" ) )
            func_AssembleVector(  );
        else{
            this->SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::AssembleVector(  );
        }
    }
    
    void default_AssembleVector(  ) {
        SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::AssembleVector( );
    }

    virtual void Solve(  ) {
        if( bp::override func_Solve = this->get_override( "Solve" ) )
            func_Solve(  );
        else{
            this->SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::Solve(  );
        }
    }
    
    void default_Solve(  ) {
        SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::Solve( );
    }

    virtual void AddDiscreteTermsToMatrix(  ) {
        if( bp::override func_AddDiscreteTermsToMatrix = this->get_override( "AddDiscreteTermsToMatrix" ) )
            func_AddDiscreteTermsToMatrix(  );
        else{
            this->AbstractFiniteDifferenceSolverBase< 2 >::AddDiscreteTermsToMatrix(  );
        }
    }
    
    void default_AddDiscreteTermsToMatrix(  ) {
        AbstractFiniteDifferenceSolverBase< 2 >::AddDiscreteTermsToMatrix( );
    }

    virtual void AddDiscreteTermsToRhs(  ) {
        if( bp::override func_AddDiscreteTermsToRhs = this->get_override( "AddDiscreteTermsToRhs" ) )
            func_AddDiscreteTermsToRhs(  );
        else{
            this->AbstractFiniteDifferenceSolverBase< 2 >::AddDiscreteTermsToRhs(  );
        }
    }
    
    void default_AddDiscreteTermsToRhs(  ) {
        AbstractFiniteDifferenceSolverBase< 2 >::AddDiscreteTermsToRhs( );
    }

    virtual ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > GetConcentrations(  ) {
        if( bp::override func_GetConcentrations = this->get_override( "GetConcentrations" ) )
            return func_GetConcentrations(  );
        else{
            return this->AbstractDiscreteContinuumSolver< 2 >::GetConcentrations(  );
        }
    }
    
    ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > default_GetConcentrations(  ) {
        return AbstractDiscreteContinuumSolver< 2 >::GetConcentrations( );
    }

    virtual ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > GetConcentrations( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 2, 2 > > pGrid ) {
        if( bp::override func_GetConcentrations = this->get_override( "GetConcentrations" ) )
            return func_GetConcentrations( pGrid );
        else{
            return this->AbstractDiscreteContinuumSolver< 2 >::GetConcentrations( pGrid );
        }
    }
    
    ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > default_GetConcentrations( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 2, 2 > > pGrid ) {
        return AbstractDiscreteContinuumSolver< 2 >::GetConcentrations( pGrid );
    }

    virtual ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > GetConcentrations( ::vtkSmartPointer< vtkPoints > pSamplePoints ) {
        if( bp::override func_GetConcentrations = this->get_override( "GetConcentrations" ) )
            return func_GetConcentrations( pSamplePoints );
        else{
            return this->AbstractDiscreteContinuumSolver< 2 >::GetConcentrations( pSamplePoints );
        }
    }
    
    ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > default_GetConcentrations( ::vtkSmartPointer< vtkPoints > pSamplePoints ) {
        return AbstractDiscreteContinuumSolver< 2 >::GetConcentrations( pSamplePoints );
    }

    virtual ::std::vector< double > GetSolution(  ) {
        if( bp::override func_GetSolution = this->get_override( "GetSolution" ) )
            return func_GetSolution(  );
        else{
            return this->AbstractDiscreteContinuumSolver< 2 >::GetSolution(  );
        }
    }
    
    ::std::vector< double > default_GetSolution(  ) {
        return AbstractDiscreteContinuumSolver< 2 >::GetSolution( );
    }

    virtual ::std::vector< double > GetSolution( ::vtkSmartPointer< vtkPoints > pSamplePoints ) {
        if( bp::override func_GetSolution = this->get_override( "GetSolution" ) )
            return func_GetSolution( pSamplePoints );
        else{
            return this->AbstractDiscreteContinuumSolver< 2 >::GetSolution( pSamplePoints );
        }
    }
    
    ::std::vector< double > default_GetSolution( ::vtkSmartPointer< vtkPoints > pSamplePoints ) {
        return AbstractDiscreteContinuumSolver< 2 >::GetSolution( pSamplePoints );
    }

    virtual ::std::vector< double > GetSolution( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 2, 2 > > pGrid ) {
        if( bp::override func_GetSolution = this->get_override( "GetSolution" ) )
            return func_GetSolution( pGrid );
        else{
            return this->AbstractDiscreteContinuumSolver< 2 >::GetSolution( pGrid );
        }
    }
    
    ::std::vector< double > default_GetSolution( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 2, 2 > > pGrid ) {
        return AbstractDiscreteContinuumSolver< 2 >::GetSolution( pGrid );
    }

    virtual ::std::vector< double > GetSolutionP( ::vtkPoints * pSamplePoints ) {
        if( bp::override func_GetSolutionP = this->get_override( "GetSolutionP" ) )
            return func_GetSolutionP( boost::python::ptr(pSamplePoints) );
        else{
            return this->AbstractDiscreteContinuumSolver< 2 >::GetSolutionP( boost::python::ptr(pSamplePoints) );
        }
    }
    
    ::std::vector< double > default_GetSolutionP( ::vtkPoints * pSamplePoints ) {
        return AbstractDiscreteContinuumSolver< 2 >::GetSolutionP( boost::python::ptr(pSamplePoints) );
    }

    virtual ::vtkSmartPointer< vtkDataSet > GetVtkSolution(  ) {
        if( bp::override func_GetVtkSolution = this->get_override( "GetVtkSolution" ) )
            return func_GetVtkSolution(  );
        else{
            return this->AbstractDiscreteContinuumSolver< 2 >::GetVtkSolution(  );
        }
    }
    
    ::vtkSmartPointer< vtkDataSet > default_GetVtkSolution(  ) {
        return AbstractDiscreteContinuumSolver< 2 >::GetVtkSolution( );
    }

    virtual void Setup(  ) {
        if( bp::override func_Setup = this->get_override( "Setup" ) )
            func_Setup(  );
        else{
            this->AbstractFiniteDifferenceSolverBase< 2 >::Setup(  );
        }
    }
    
    void default_Setup(  ) {
        AbstractFiniteDifferenceSolverBase< 2 >::Setup( );
    }

    virtual void Update(  ) {
        if( bp::override func_Update = this->get_override( "Update" ) )
            func_Update(  );
        else{
            this->AbstractFiniteDifferenceSolverBase< 2 >::Update(  );
        }
    }
    
    void default_Update(  ) {
        AbstractFiniteDifferenceSolverBase< 2 >::Update( );
    }

    virtual void UpdateCellData(  ) {
        if( bp::override func_UpdateCellData = this->get_override( "UpdateCellData" ) )
            func_UpdateCellData(  );
        else{
            this->AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateCellData(  );
        }
    }
    
    void default_UpdateCellData(  ) {
        AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateCellData( );
    }

    virtual void UpdateSolution( ::std::vector< double > const & rData ) {
        if( bp::override func_UpdateSolution = this->get_override( "UpdateSolution" ) )
            func_UpdateSolution( boost::ref(rData) );
        else{
            this->AbstractDiscreteContinuumSolver< 2 >::UpdateSolution( boost::ref(rData) );
        }
    }
    
    void default_UpdateSolution( ::std::vector< double > const & rData ) {
        AbstractDiscreteContinuumSolver< 2 >::UpdateSolution( boost::ref(rData) );
    }

    virtual void UpdateSolution( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > const & rData ) {
        if( bp::override func_UpdateSolution = this->get_override( "UpdateSolution" ) )
            func_UpdateSolution( boost::ref(rData) );
        else{
            this->AbstractDiscreteContinuumSolver< 2 >::UpdateSolution( boost::ref(rData) );
        }
    }
    
    void default_UpdateSolution( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > const & rData ) {
        AbstractDiscreteContinuumSolver< 2 >::UpdateSolution( boost::ref(rData) );
    }

    virtual void UpdateSolution( ::std::vector< double > & rData ) {
        if( bp::override func_UpdateSolution = this->get_override( "UpdateSolution" ) )
            func_UpdateSolution( boost::ref(rData) );
        else{
            this->AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateSolution( boost::ref(rData) );
        }
    }
    
    void default_UpdateSolution( ::std::vector< double > & rData ) {
        AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateSolution( boost::ref(rData) );
    }

    virtual void UpdateSolution( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > & rData ) {
        if( bp::override func_UpdateSolution = this->get_override( "UpdateSolution" ) )
            func_UpdateSolution( boost::ref(rData) );
        else{
            this->AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateSolution( boost::ref(rData) );
        }
    }
    
    void default_UpdateSolution( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > & rData ) {
        AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateSolution( boost::ref(rData) );
    }

    virtual void Write(  ) {
        if( bp::override func_Write = this->get_override( "Write" ) )
            func_Write(  );
        else{
            this->AbstractRegularGridDiscreteContinuumSolver< 2 >::Write(  );
        }
    }
    
    void default_Write(  ) {
        AbstractRegularGridDiscreteContinuumSolver< 2 >::Write( );
    }

};

BOOST_PYTHON_OPAQUE_SPECIALIZED_TYPE_ID( _p_Vec )

BOOST_PYTHON_OPAQUE_SPECIALIZED_TYPE_ID( _p_Mat )

void register_SimpleNonLinearEllipticFiniteDifferenceSolver2_class(){

    { //::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >
        typedef bp::class_< SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper, bp::bases< AbstractFiniteDifferenceSolverBase< 2 > > > SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer_t;
        SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer_t SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer = SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer_t( "SimpleNonLinearEllipticFiniteDifferenceSolver2", bp::init< >() );
        bp::scope SimpleNonLinearEllipticFiniteDifferenceSolver2_scope( SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer );
        { //::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::AssembleMatrix
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*AssembleMatrix_function_type)(  ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_AssembleMatrix_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "AssembleMatrix"
                , AssembleMatrix_function_type(&::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::AssembleMatrix)
                , default_AssembleMatrix_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_AssembleMatrix) );
        
        }
        { //::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::AssembleVector
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*AssembleVector_function_type)(  ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_AssembleVector_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "AssembleVector"
                , AssembleVector_function_type(&::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::AssembleVector)
                , default_AssembleVector_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_AssembleVector) );
        
        }
        { //::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::ComputeJacobian
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*ComputeJacobian_function_type)( ::Vec const,::Mat * ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "ComputeJacobian"
                , ComputeJacobian_function_type( &::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::ComputeJacobian )
                , ( bp::arg("currentGuess"), bp::arg("pJacobian") ) );
        
        }
        { //::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::ComputeResidual
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*ComputeResidual_function_type)( ::Vec const,::Vec ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "ComputeResidual"
                , ComputeResidual_function_type( &::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::ComputeResidual )
                , ( bp::arg("currentGuess"), bp::arg("residualVector") ) );
        
        }
        { //::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::Create
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef ::boost::shared_ptr< SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > > ( *Create_function_type )(  );
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "Create"
                , Create_function_type( &::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::Create ) );
        
        }
        { //::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::Solve
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Solve_function_type)(  ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_Solve_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "Solve"
                , Solve_function_type(&::SimpleNonLinearEllipticFiniteDifferenceSolver< 2 >::Solve)
                , default_Solve_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_Solve) );
        
        }
        { //::AbstractFiniteDifferenceSolverBase< 2 >::AddDiscreteTermsToMatrix
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddDiscreteTermsToMatrix_function_type)(  ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_AddDiscreteTermsToMatrix_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "AddDiscreteTermsToMatrix"
                , AddDiscreteTermsToMatrix_function_type(&::AbstractFiniteDifferenceSolverBase< 2 >::AddDiscreteTermsToMatrix)
                , default_AddDiscreteTermsToMatrix_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_AddDiscreteTermsToMatrix) );
        
        }
        { //::AbstractFiniteDifferenceSolverBase< 2 >::AddDiscreteTermsToRhs
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*AddDiscreteTermsToRhs_function_type)(  ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_AddDiscreteTermsToRhs_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "AddDiscreteTermsToRhs"
                , AddDiscreteTermsToRhs_function_type(&::AbstractFiniteDifferenceSolverBase< 2 >::AddDiscreteTermsToRhs)
                , default_AddDiscreteTermsToRhs_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_AddDiscreteTermsToRhs) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 2 >::GetConcentrations
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( exported_class_t::*GetConcentrations_function_type)(  ) ;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_GetConcentrations_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "GetConcentrations"
                , GetConcentrations_function_type(&::AbstractDiscreteContinuumSolver< 2 >::GetConcentrations)
                , default_GetConcentrations_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_GetConcentrations) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 2 >::GetConcentrations
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( exported_class_t::*GetConcentrations_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 2, 2 > > ) ;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_GetConcentrations_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 2, 2 > > ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "GetConcentrations"
                , GetConcentrations_function_type(&::AbstractDiscreteContinuumSolver< 2 >::GetConcentrations)
                , default_GetConcentrations_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_GetConcentrations)
                , ( bp::arg("pGrid") ) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 2 >::GetConcentrations
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( exported_class_t::*GetConcentrations_function_type)( ::vtkSmartPointer< vtkPoints > ) ;
            typedef ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_GetConcentrations_function_type)( ::vtkSmartPointer< vtkPoints > ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "GetConcentrations"
                , GetConcentrations_function_type(&::AbstractDiscreteContinuumSolver< 2 >::GetConcentrations)
                , default_GetConcentrations_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_GetConcentrations)
                , ( bp::arg("pSamplePoints") ) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 2 >::GetSolution
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef ::std::vector< double > ( exported_class_t::*GetSolution_function_type)(  ) ;
            typedef ::std::vector< double > ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_GetSolution_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "GetSolution"
                , GetSolution_function_type(&::AbstractDiscreteContinuumSolver< 2 >::GetSolution)
                , default_GetSolution_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_GetSolution) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 2 >::GetSolution
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef ::std::vector< double > ( exported_class_t::*GetSolution_function_type)( ::vtkSmartPointer< vtkPoints > ) ;
            typedef ::std::vector< double > ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_GetSolution_function_type)( ::vtkSmartPointer< vtkPoints > ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "GetSolution"
                , GetSolution_function_type(&::AbstractDiscreteContinuumSolver< 2 >::GetSolution)
                , default_GetSolution_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_GetSolution)
                , ( bp::arg("pSamplePoints") ) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 2 >::GetSolution
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef ::std::vector< double > ( exported_class_t::*GetSolution_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 2, 2 > > ) ;
            typedef ::std::vector< double > ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_GetSolution_function_type)( ::boost::shared_ptr< AbstractDiscreteContinuumGrid< 2, 2 > > ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "GetSolution"
                , GetSolution_function_type(&::AbstractDiscreteContinuumSolver< 2 >::GetSolution)
                , default_GetSolution_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_GetSolution)
                , ( bp::arg("pGrid") ) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 2 >::GetSolutionP
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef ::std::vector< double > ( exported_class_t::*GetSolutionP_function_type)( ::vtkPoints * ) ;
            typedef ::std::vector< double > ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_GetSolutionP_function_type)( ::vtkPoints * ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "GetSolutionP"
                , GetSolutionP_function_type(&::AbstractDiscreteContinuumSolver< 2 >::GetSolutionP)
                , default_GetSolutionP_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_GetSolutionP)
                , ( bp::arg("pSamplePoints") ) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 2 >::GetVtkSolution
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef ::vtkSmartPointer< vtkDataSet > ( exported_class_t::*GetVtkSolution_function_type)(  ) ;
            typedef ::vtkSmartPointer< vtkDataSet > ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_GetVtkSolution_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "GetVtkSolution"
                , GetVtkSolution_function_type(&::AbstractDiscreteContinuumSolver< 2 >::GetVtkSolution)
                , default_GetVtkSolution_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_GetVtkSolution) );
        
        }
        { //::AbstractFiniteDifferenceSolverBase< 2 >::Setup
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Setup_function_type)(  ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_Setup_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "Setup"
                , Setup_function_type(&::AbstractFiniteDifferenceSolverBase< 2 >::Setup)
                , default_Setup_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_Setup) );
        
        }
        { //::AbstractFiniteDifferenceSolverBase< 2 >::Update
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Update_function_type)(  ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_Update_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "Update"
                , Update_function_type(&::AbstractFiniteDifferenceSolverBase< 2 >::Update)
                , default_Update_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_Update) );
        
        }
        { //::AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateCellData
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateCellData_function_type)(  ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_UpdateCellData_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "UpdateCellData"
                , UpdateCellData_function_type(&::AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateCellData)
                , default_UpdateCellData_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_UpdateCellData) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 2 >::UpdateSolution
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateSolution_function_type)( ::std::vector< double > const & ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_UpdateSolution_function_type)( ::std::vector< double > const & ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "UpdateSolution"
                , UpdateSolution_function_type(&::AbstractDiscreteContinuumSolver< 2 >::UpdateSolution)
                , default_UpdateSolution_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_UpdateSolution)
                , ( bp::arg("rData") ) );
        
        }
        { //::AbstractDiscreteContinuumSolver< 2 >::UpdateSolution
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateSolution_function_type)( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > const & ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_UpdateSolution_function_type)( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > const & ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "UpdateSolution"
                , UpdateSolution_function_type(&::AbstractDiscreteContinuumSolver< 2 >::UpdateSolution)
                , default_UpdateSolution_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_UpdateSolution)
                , ( bp::arg("rData") ) );
        
        }
        { //::AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateSolution
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateSolution_function_type)( ::std::vector< double > & ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_UpdateSolution_function_type)( ::std::vector< double > & ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "UpdateSolution"
                , UpdateSolution_function_type(&::AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateSolution)
                , default_UpdateSolution_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_UpdateSolution)
                , ( bp::arg("rData") ) );
        
        }
        { //::AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateSolution
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateSolution_function_type)( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > & ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_UpdateSolution_function_type)( ::std::vector< boost::units::quantity<boost::units::unit<boost::units::list<boost::units::dim<boost::units::length_base_dimension, boost::units::static_rational<-3, 1> >, boost::units::list<boost::units::dim<boost::units::amount_base_dimension, boost::units::static_rational<1, 1> >, boost::units::dimensionless_type> >, boost::units::homogeneous_system<boost::units::list<boost::units::si::meter_base_unit, boost::units::list<boost::units::scaled_base_unit<boost::units::cgs::gram_base_unit, boost::units::scale<10, boost::units::static_rational<3> > >, boost::units::list<boost::units::si::second_base_unit, boost::units::list<boost::units::si::ampere_base_unit, boost::units::list<boost::units::si::kelvin_base_unit, boost::units::list<boost::units::si::mole_base_unit, boost::units::list<boost::units::si::candela_base_unit, boost::units::list<boost::units::angle::radian_base_unit, boost::units::list<boost::units::angle::steradian_base_unit, boost::units::dimensionless_type> > > > > > > > > >, void>, double> > & ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "UpdateSolution"
                , UpdateSolution_function_type(&::AbstractRegularGridDiscreteContinuumSolver< 2 >::UpdateSolution)
                , default_UpdateSolution_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_UpdateSolution)
                , ( bp::arg("rData") ) );
        
        }
        { //::AbstractRegularGridDiscreteContinuumSolver< 2 >::Write
        
            typedef SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > exported_class_t;
            typedef void ( exported_class_t::*Write_function_type)(  ) ;
            typedef void ( SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::*default_Write_function_type)(  ) ;
            
            SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.def( 
                "Write"
                , Write_function_type(&::AbstractRegularGridDiscreteContinuumSolver< 2 >::Write)
                , default_Write_function_type(&SimpleNonLinearEllipticFiniteDifferenceSolver_less__2__greater__wrapper::default_Write) );
        
        }
        SimpleNonLinearEllipticFiniteDifferenceSolver2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< SimpleNonLinearEllipticFiniteDifferenceSolver<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > >, boost::shared_ptr< AbstractFiniteDifferenceSolverBase< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > >, boost::shared_ptr< AbstractRegularGridDiscreteContinuumSolver< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< SimpleNonLinearEllipticFiniteDifferenceSolver< 2 > >, boost::shared_ptr< AbstractDiscreteContinuumSolver< 2 > > >();
    }

}
