// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "wrapper_header_collection.hpp"
#include "VesselFlowProperties2.pypp.hpp"

namespace bp = boost::python;

struct VesselFlowProperties_less__2__greater__wrapper : VesselFlowProperties< 2 >, bp::wrapper< VesselFlowProperties< 2 > > {

    VesselFlowProperties_less__2__greater__wrapper(VesselFlowProperties<2> const & arg )
    : VesselFlowProperties<2>( arg )
      , bp::wrapper< VesselFlowProperties< 2 > >(){
        // copy constructor
        
    }

    VesselFlowProperties_less__2__greater__wrapper( )
    : VesselFlowProperties<2>( )
      , bp::wrapper< VesselFlowProperties< 2 > >(){
        // null constructor
    
    }

    virtual ::std::map< std::string, double > GetOutputData(  ) const  {
        if( bp::override func_GetOutputData = this->get_override( "GetOutputData" ) )
            return func_GetOutputData(  );
        else{
            return this->VesselFlowProperties< 2 >::GetOutputData(  );
        }
    }
    
    ::std::map< std::string, double > default_GetOutputData(  ) const  {
        return VesselFlowProperties< 2 >::GetOutputData( );
    }

    virtual void SetPressure( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > pressure ) {
        if( bp::override func_SetPressure = this->get_override( "SetPressure" ) )
            func_SetPressure( pressure );
        else{
            this->AbstractVesselNetworkComponentFlowProperties< 2 >::SetPressure( pressure );
        }
    }
    
    void default_SetPressure( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > pressure ) {
        AbstractVesselNetworkComponentFlowProperties< 2 >::SetPressure( pressure );
    }

};

void register_VesselFlowProperties2_class(){

    { //::VesselFlowProperties< 2 >
        typedef bp::class_< VesselFlowProperties_less__2__greater__wrapper, bp::bases< AbstractVesselNetworkComponentFlowProperties< 2 > > > VesselFlowProperties2_exposer_t;
        VesselFlowProperties2_exposer_t VesselFlowProperties2_exposer = VesselFlowProperties2_exposer_t( "VesselFlowProperties2", bp::init< >() );
        bp::scope VesselFlowProperties2_scope( VesselFlowProperties2_exposer );
        { //::VesselFlowProperties< 2 >::CheckSegments
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*CheckSegments_function_type)(  ) const;
            
            VesselFlowProperties2_exposer.def( 
                "CheckSegments"
                , CheckSegments_function_type( &::VesselFlowProperties< 2 >::CheckSegments ) );
        
        }
        { //::VesselFlowProperties< 2 >::GetAntiAngiogenicDrugConcentration
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -3, 1 > >, boost::units::list< boost::units::dim< boost::units::amount_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetAntiAngiogenicDrugConcentration_function_type)(  ) const;
            
            VesselFlowProperties2_exposer.def( 
                "GetAntiAngiogenicDrugConcentration"
                , GetAntiAngiogenicDrugConcentration_function_type( &::VesselFlowProperties< 2 >::GetAntiAngiogenicDrugConcentration ) );
        
        }
        { //::VesselFlowProperties< 2 >::GetFlowRate
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetFlowRate_function_type)(  ) const;
            
            VesselFlowProperties2_exposer.def( 
                "GetFlowRate"
                , GetFlowRate_function_type( &::VesselFlowProperties< 2 >::GetFlowRate ) );
        
        }
        { //::VesselFlowProperties< 2 >::GetGrowthStimulus
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetGrowthStimulus_function_type)(  ) const;
            
            VesselFlowProperties2_exposer.def( 
                "GetGrowthStimulus"
                , GetGrowthStimulus_function_type( &::VesselFlowProperties< 2 >::GetGrowthStimulus ) );
        
        }
        { //::VesselFlowProperties< 2 >::GetHaematocrit
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetHaematocrit_function_type)(  ) const;
            
            VesselFlowProperties2_exposer.def( 
                "GetHaematocrit"
                , GetHaematocrit_function_type( &::VesselFlowProperties< 2 >::GetHaematocrit ) );
        
        }
        { //::VesselFlowProperties< 2 >::GetImpedance
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -4, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetImpedance_function_type)(  ) const;
            
            VesselFlowProperties2_exposer.def( 
                "GetImpedance"
                , GetImpedance_function_type( &::VesselFlowProperties< 2 >::GetImpedance ) );
        
        }
        { //::VesselFlowProperties< 2 >::GetOutputData
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef ::std::map< std::string, double > ( exported_class_t::*GetOutputData_function_type)(  ) const;
            typedef ::std::map< std::string, double > ( VesselFlowProperties_less__2__greater__wrapper::*default_GetOutputData_function_type)(  ) const;
            
            VesselFlowProperties2_exposer.def( 
                "GetOutputData"
                , GetOutputData_function_type(&::VesselFlowProperties< 2 >::GetOutputData)
                , default_GetOutputData_function_type(&VesselFlowProperties_less__2__greater__wrapper::default_GetOutputData) );
        
        }
        { //::VesselFlowProperties< 2 >::GetRegressionTime
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetRegressionTime_function_type)(  ) const;
            
            VesselFlowProperties2_exposer.def( 
                "GetRegressionTime"
                , GetRegressionTime_function_type( &::VesselFlowProperties< 2 >::GetRegressionTime ) );
        
        }
        { //::VesselFlowProperties< 2 >::GetViscosity
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetViscosity_function_type)(  ) const;
            
            VesselFlowProperties2_exposer.def( 
                "GetViscosity"
                , GetViscosity_function_type( &::VesselFlowProperties< 2 >::GetViscosity ) );
        
        }
        { //::VesselFlowProperties< 2 >::GetWallShearStress
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetWallShearStress_function_type)(  ) const;
            
            VesselFlowProperties2_exposer.def( 
                "GetWallShearStress"
                , GetWallShearStress_function_type( &::VesselFlowProperties< 2 >::GetWallShearStress ) );
        
        }
        { //::VesselFlowProperties< 2 >::HasRegressionTimerStarted
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef bool ( exported_class_t::*HasRegressionTimerStarted_function_type)(  ) ;
            
            VesselFlowProperties2_exposer.def( 
                "HasRegressionTimerStarted"
                , HasRegressionTimerStarted_function_type( &::VesselFlowProperties< 2 >::HasRegressionTimerStarted ) );
        
        }
        { //::VesselFlowProperties< 2 >::HasVesselRegressed
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef bool ( exported_class_t::*HasVesselRegressed_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "HasVesselRegressed"
                , HasVesselRegressed_function_type( &::VesselFlowProperties< 2 >::HasVesselRegressed )
                , ( bp::arg("simulationReferenceTime") ) );
        
        }
        { //::VesselFlowProperties< 2 >::ResetRegressionTimer
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*ResetRegressionTimer_function_type)(  ) ;
            
            VesselFlowProperties2_exposer.def( 
                "ResetRegressionTimer"
                , ResetRegressionTimer_function_type( &::VesselFlowProperties< 2 >::ResetRegressionTimer ) );
        
        }
        { //::VesselFlowProperties< 2 >::SetFlowRate
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetFlowRate_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 3, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "SetFlowRate"
                , SetFlowRate_function_type( &::VesselFlowProperties< 2 >::SetFlowRate )
                , ( bp::arg("flowRate") ) );
        
        }
        { //::VesselFlowProperties< 2 >::SetGrowthStimulus
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetGrowthStimulus_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "SetGrowthStimulus"
                , SetGrowthStimulus_function_type( &::VesselFlowProperties< 2 >::SetGrowthStimulus )
                , ( bp::arg("stimulus") ) );
        
        }
        { //::VesselFlowProperties< 2 >::SetHaematocrit
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetHaematocrit_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::dimensionless_type, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "SetHaematocrit"
                , SetHaematocrit_function_type( &::VesselFlowProperties< 2 >::SetHaematocrit )
                , ( bp::arg("haematocrit") ) );
        
        }
        { //::VesselFlowProperties< 2 >::SetImpedance
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetImpedance_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -4, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "SetImpedance"
                , SetImpedance_function_type( &::VesselFlowProperties< 2 >::SetImpedance )
                , ( bp::arg("impedance") ) );
        
        }
        { //::VesselFlowProperties< 2 >::SetRegressionTime
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetRegressionTime_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "SetRegressionTime"
                , SetRegressionTime_function_type( &::VesselFlowProperties< 2 >::SetRegressionTime )
                , ( bp::arg("time") ) );
        
        }
        { //::VesselFlowProperties< 2 >::SetTimeUntilRegression
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetTimeUntilRegression_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "SetTimeUntilRegression"
                , SetTimeUntilRegression_function_type( &::VesselFlowProperties< 2 >::SetTimeUntilRegression )
                , ( bp::arg("time"), bp::arg("simulationReferenceTime") ) );
        
        }
        { //::VesselFlowProperties< 2 >::SetViscosity
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetViscosity_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "SetViscosity"
                , SetViscosity_function_type( &::VesselFlowProperties< 2 >::SetViscosity )
                , ( bp::arg("viscosity") ) );
        
        }
        { //::VesselFlowProperties< 2 >::SetWallShearStress
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetWallShearStress_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "SetWallShearStress"
                , SetWallShearStress_function_type( &::VesselFlowProperties< 2 >::SetWallShearStress )
                , ( bp::arg("wallShear") ) );
        
        }
        { //::VesselFlowProperties< 2 >::UpdateSegments
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*UpdateSegments_function_type)( ::std::vector< boost::shared_ptr<VesselSegment<2> > > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "UpdateSegments"
                , UpdateSegments_function_type( &::VesselFlowProperties< 2 >::UpdateSegments )
                , ( bp::arg("segments") ) );
        
        }
        { //::AbstractVesselNetworkComponentFlowProperties< 2 >::SetPressure
        
            typedef VesselFlowProperties< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetPressure_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            typedef void ( VesselFlowProperties_less__2__greater__wrapper::*default_SetPressure_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< -1, 1 > >, boost::units::list< boost::units::dim< boost::units::mass_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::list< boost::units::dim< boost::units::time_base_dimension, boost::units::static_rational< -2, 1 > >, boost::units::dimensionless_type > > >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselFlowProperties2_exposer.def( 
                "SetPressure"
                , SetPressure_function_type(&::AbstractVesselNetworkComponentFlowProperties< 2 >::SetPressure)
                , default_SetPressure_function_type(&VesselFlowProperties_less__2__greater__wrapper::default_SetPressure)
                , ( bp::arg("pressure") ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< VesselFlowProperties<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselFlowProperties< 2 > >, boost::shared_ptr< AbstractVesselNetworkComponentFlowProperties< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselFlowProperties< 2 > >, boost::shared_ptr< AbstractVesselNetworkComponentProperties< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselFlowProperties< 2 > >, boost::shared_ptr< boost::enable_shared_from_this< AbstractVesselNetworkComponentProperties< 2 > > > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselFlowProperties< 2 > >, boost::shared_ptr< boost::enable_shared_from_this< AbstractVesselNetworkComponentFlowProperties< 2 > > > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselFlowProperties< 2 > >, boost::shared_ptr< boost::enable_shared_from_this< VesselFlowProperties< 2 > > > >();
    }

}
