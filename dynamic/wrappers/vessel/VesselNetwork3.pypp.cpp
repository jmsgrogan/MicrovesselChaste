// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "wrapper_header_collection.hpp"
#include "VesselNetwork3.pypp.hpp"

namespace bp = boost::python;

struct VesselNetwork_less__3__greater__wrapper : VesselNetwork< 3 >, bp::wrapper< VesselNetwork< 3 > > {

    VesselNetwork_less__3__greater__wrapper(VesselNetwork<3> const & arg )
    : VesselNetwork<3>( arg )
      , bp::wrapper< VesselNetwork< 3 > >(){
        // copy constructor
        
    }

    VesselNetwork_less__3__greater__wrapper( )
    : VesselNetwork<3>( )
      , bp::wrapper< VesselNetwork< 3 > >(){
        // null constructor
    
    }

    virtual ::boost::shared_ptr< VesselNode< 3 > > DivideVessel( ::boost::shared_ptr< Vessel< 3 > > pVessel, ::DimensionalChastePoint< 3 > const & rLocation ) {
        if( bp::override func_DivideVessel = this->get_override( "DivideVessel" ) )
            return func_DivideVessel( pVessel, boost::ref(rLocation) );
        else{
            return this->VesselNetwork< 3 >::DivideVessel( pVessel, boost::ref(rLocation) );
        }
    }
    
    ::boost::shared_ptr< VesselNode< 3 > > default_DivideVessel( ::boost::shared_ptr< Vessel< 3 > > pVessel, ::DimensionalChastePoint< 3 > const & rLocation ) {
        return VesselNetwork< 3 >::DivideVessel( pVessel, boost::ref(rLocation) );
    }

    virtual void ExtendVessel( ::boost::shared_ptr< Vessel< 3 > > pVessel, ::boost::shared_ptr< VesselNode< 3 > > pEndNode, ::boost::shared_ptr< VesselNode< 3 > > pNewNode ) {
        if( bp::override func_ExtendVessel = this->get_override( "ExtendVessel" ) )
            func_ExtendVessel( pVessel, pEndNode, pNewNode );
        else{
            this->VesselNetwork< 3 >::ExtendVessel( pVessel, pEndNode, pNewNode );
        }
    }
    
    void default_ExtendVessel( ::boost::shared_ptr< Vessel< 3 > > pVessel, ::boost::shared_ptr< VesselNode< 3 > > pEndNode, ::boost::shared_ptr< VesselNode< 3 > > pNewNode ) {
        VesselNetwork< 3 >::ExtendVessel( pVessel, pEndNode, pNewNode );
    }

    virtual ::boost::shared_ptr< Vessel< 3 > > FormSprout( ::boost::shared_ptr< VesselNode< 3 > > pSproutBase, ::DimensionalChastePoint< 3 > const & sproutTipLocation ) {
        if( bp::override func_FormSprout = this->get_override( "FormSprout" ) )
            return func_FormSprout( pSproutBase, boost::ref(sproutTipLocation) );
        else{
            return this->VesselNetwork< 3 >::FormSprout( pSproutBase, boost::ref(sproutTipLocation) );
        }
    }
    
    ::boost::shared_ptr< Vessel< 3 > > default_FormSprout( ::boost::shared_ptr< VesselNode< 3 > > pSproutBase, ::DimensionalChastePoint< 3 > const & sproutTipLocation ) {
        return VesselNetwork< 3 >::FormSprout( pSproutBase, boost::ref(sproutTipLocation) );
    }

    virtual ::std::map< std::string, double > GetOutputData(  ) {
        if( bp::override func_GetOutputData = this->get_override( "GetOutputData" ) )
            return func_GetOutputData(  );
        else{
            return this->VesselNetwork< 3 >::GetOutputData(  );
        }
    }
    
    ::std::map< std::string, double > default_GetOutputData(  ) {
        return VesselNetwork< 3 >::GetOutputData( );
    }

    virtual unsigned int GetId(  ) const  {
        if( bp::override func_GetId = this->get_override( "GetId" ) )
            return func_GetId(  );
        else{
            return this->AbstractVesselNetworkComponent< 3 >::GetId(  );
        }
    }
    
    unsigned int default_GetId(  ) const  {
        return AbstractVesselNetworkComponent< 3 >::GetId( );
    }

    virtual ::std::vector< std::string > GetOutputDataKeys(  ) {
        if( bp::override func_GetOutputDataKeys = this->get_override( "GetOutputDataKeys" ) )
            return func_GetOutputDataKeys(  );
        else{
            return this->AbstractVesselNetworkComponent< 3 >::GetOutputDataKeys(  );
        }
    }
    
    ::std::vector< std::string > default_GetOutputDataKeys(  ) {
        return AbstractVesselNetworkComponent< 3 >::GetOutputDataKeys( );
    }

    virtual double GetOutputDataValue( ::std::string const & rKey ) {
        if( bp::override func_GetOutputDataValue = this->get_override( "GetOutputDataValue" ) )
            return func_GetOutputDataValue( rKey );
        else{
            return this->AbstractVesselNetworkComponent< 3 >::GetOutputDataValue( rKey );
        }
    }
    
    double default_GetOutputDataValue( ::std::string const & rKey ) {
        return AbstractVesselNetworkComponent< 3 >::GetOutputDataValue( rKey );
    }

    virtual ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > GetRadius(  ) const  {
        if( bp::override func_GetRadius = this->get_override( "GetRadius" ) )
            return func_GetRadius(  );
        else{
            return this->AbstractVesselNetworkComponent< 3 >::GetRadius(  );
        }
    }
    
    ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > default_GetRadius(  ) const  {
        return AbstractVesselNetworkComponent< 3 >::GetRadius( );
    }

    virtual void SetId( unsigned int id ) {
        if( bp::override func_SetId = this->get_override( "SetId" ) )
            func_SetId( id );
        else{
            this->AbstractVesselNetworkComponent< 3 >::SetId( id );
        }
    }
    
    void default_SetId( unsigned int id ) {
        AbstractVesselNetworkComponent< 3 >::SetId( id );
    }

    virtual void SetOutputData( ::std::string const & rKey, double value ) {
        if( bp::override func_SetOutputData = this->get_override( "SetOutputData" ) )
            func_SetOutputData( rKey, value );
        else{
            this->AbstractVesselNetworkComponent< 3 >::SetOutputData( rKey, value );
        }
    }
    
    void default_SetOutputData( ::std::string const & rKey, double value ) {
        AbstractVesselNetworkComponent< 3 >::SetOutputData( rKey, value );
    }

    virtual void SetRadius( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > radius ) {
        if( bp::override func_SetRadius = this->get_override( "SetRadius" ) )
            func_SetRadius( radius );
        else{
            this->AbstractVesselNetworkComponent< 3 >::SetRadius( radius );
        }
    }
    
    void default_SetRadius( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > radius ) {
        AbstractVesselNetworkComponent< 3 >::SetRadius( radius );
    }

};

void register_VesselNetwork3_class(){

    { //::VesselNetwork< 3 >
        typedef bp::class_< VesselNetwork_less__3__greater__wrapper, bp::bases< AbstractVesselNetworkComponent< 3 > > > VesselNetwork3_exposer_t;
        VesselNetwork3_exposer_t VesselNetwork3_exposer = VesselNetwork3_exposer_t( "VesselNetwork3", bp::init< >() );
        bp::scope VesselNetwork3_scope( VesselNetwork3_exposer );
        { //::VesselNetwork< 3 >::AddVessel
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddVessel_function_type)( ::boost::shared_ptr< Vessel< 3 > > ) ;
            
            VesselNetwork3_exposer.def( 
                "AddVessel"
                , AddVessel_function_type( &::VesselNetwork< 3 >::AddVessel )
                , ( bp::arg("pVessel") ) );
        
        }
        { //::VesselNetwork< 3 >::AddVessels
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*AddVessels_function_type)( ::std::vector< boost::shared_ptr<Vessel<3> > > ) ;
            
            VesselNetwork3_exposer.def( 
                "AddVessels"
                , AddVessels_function_type( &::VesselNetwork< 3 >::AddVessels )
                , ( bp::arg("vessels") ) );
        
        }
        { //::VesselNetwork< 3 >::ClearVessels
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*ClearVessels_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "ClearVessels"
                , ClearVessels_function_type( &::VesselNetwork< 3 >::ClearVessels ) );
        
        }
        { //::VesselNetwork< 3 >::CopyVessels
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<Vessel<3> > > ( exported_class_t::*CopyVessels_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "CopyVessels"
                , CopyVessels_function_type( &::VesselNetwork< 3 >::CopyVessels ) );
        
        }
        { //::VesselNetwork< 3 >::CopyVessels
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<Vessel<3> > > ( exported_class_t::*CopyVessels_function_type)( ::std::vector< boost::shared_ptr<Vessel<3> > > ) ;
            
            VesselNetwork3_exposer.def( 
                "CopyVessels"
                , CopyVessels_function_type( &::VesselNetwork< 3 >::CopyVessels )
                , ( bp::arg("vessels") ) );
        
        }
        { //::VesselNetwork< 3 >::Create
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VesselNetwork< 3 > > ( *Create_function_type )(  );
            
            VesselNetwork3_exposer.def( 
                "Create"
                , Create_function_type( &::VesselNetwork< 3 >::Create ) );
        
        }
        { //::VesselNetwork< 3 >::DivideVessel
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VesselNode< 3 > > ( exported_class_t::*DivideVessel_function_type)( ::boost::shared_ptr< Vessel< 3 > >,::DimensionalChastePoint< 3 > const & ) ;
            typedef ::boost::shared_ptr< VesselNode< 3 > > ( VesselNetwork_less__3__greater__wrapper::*default_DivideVessel_function_type)( ::boost::shared_ptr< Vessel< 3 > >,::DimensionalChastePoint< 3 > const & ) ;
            
            VesselNetwork3_exposer.def( 
                "DivideVessel"
                , DivideVessel_function_type(&::VesselNetwork< 3 >::DivideVessel)
                , default_DivideVessel_function_type(&VesselNetwork_less__3__greater__wrapper::default_DivideVessel)
                , ( bp::arg("pVessel"), bp::arg("rLocation") ) );
        
        }
        { //::VesselNetwork< 3 >::ExtendVessel
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*ExtendVessel_function_type)( ::boost::shared_ptr< Vessel< 3 > >,::boost::shared_ptr< VesselNode< 3 > >,::boost::shared_ptr< VesselNode< 3 > > ) ;
            typedef void ( VesselNetwork_less__3__greater__wrapper::*default_ExtendVessel_function_type)( ::boost::shared_ptr< Vessel< 3 > >,::boost::shared_ptr< VesselNode< 3 > >,::boost::shared_ptr< VesselNode< 3 > > ) ;
            
            VesselNetwork3_exposer.def( 
                "ExtendVessel"
                , ExtendVessel_function_type(&::VesselNetwork< 3 >::ExtendVessel)
                , default_ExtendVessel_function_type(&VesselNetwork_less__3__greater__wrapper::default_ExtendVessel)
                , ( bp::arg("pVessel"), bp::arg("pEndNode"), bp::arg("pNewNode") ) );
        
        }
        { //::VesselNetwork< 3 >::FormSprout
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::boost::shared_ptr< Vessel< 3 > > ( exported_class_t::*FormSprout_function_type)( ::boost::shared_ptr< VesselNode< 3 > >,::DimensionalChastePoint< 3 > const & ) ;
            typedef ::boost::shared_ptr< Vessel< 3 > > ( VesselNetwork_less__3__greater__wrapper::*default_FormSprout_function_type)( ::boost::shared_ptr< VesselNode< 3 > >,::DimensionalChastePoint< 3 > const & ) ;
            
            VesselNetwork3_exposer.def( 
                "FormSprout"
                , FormSprout_function_type(&::VesselNetwork< 3 >::FormSprout)
                , default_FormSprout_function_type(&VesselNetwork_less__3__greater__wrapper::default_FormSprout)
                , ( bp::arg("pSproutBase"), bp::arg("sproutTipLocation") ) );
        
        }
        { //::VesselNetwork< 3 >::GetDistributedVectorFactory
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::boost::shared_ptr< DistributedVectorFactory > ( exported_class_t::*GetDistributedVectorFactory_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetDistributedVectorFactory"
                , GetDistributedVectorFactory_function_type( &::VesselNetwork< 3 >::GetDistributedVectorFactory ) );
        
        }
        { //::VesselNetwork< 3 >::GetMaxBranchesOnNode
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetMaxBranchesOnNode_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetMaxBranchesOnNode"
                , GetMaxBranchesOnNode_function_type( &::VesselNetwork< 3 >::GetMaxBranchesOnNode ) );
        
        }
        { //::VesselNetwork< 3 >::GetNode
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VesselNode< 3 > > ( exported_class_t::*GetNode_function_type)( unsigned int ) ;
            
            VesselNetwork3_exposer.def( 
                "GetNode"
                , GetNode_function_type( &::VesselNetwork< 3 >::GetNode )
                , ( bp::arg("index") ) );
        
        }
        { //::VesselNetwork< 3 >::GetNodeIndex
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNodeIndex_function_type)( ::boost::shared_ptr< VesselNode< 3 > > ) ;
            
            VesselNetwork3_exposer.def( 
                "GetNodeIndex"
                , GetNodeIndex_function_type( &::VesselNetwork< 3 >::GetNodeIndex )
                , ( bp::arg("pNode") ) );
        
        }
        { //::VesselNetwork< 3 >::GetNodes
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<VesselNode<3> > > ( exported_class_t::*GetNodes_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetNodes"
                , GetNodes_function_type( &::VesselNetwork< 3 >::GetNodes ) );
        
        }
        { //::VesselNetwork< 3 >::GetNumberOfNodes
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumberOfNodes_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetNumberOfNodes"
                , GetNumberOfNodes_function_type( &::VesselNetwork< 3 >::GetNumberOfNodes ) );
        
        }
        { //::VesselNetwork< 3 >::GetNumberOfNodesPerProcess
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::std::vector< unsigned int > ( exported_class_t::*GetNumberOfNodesPerProcess_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetNumberOfNodesPerProcess"
                , GetNumberOfNodesPerProcess_function_type( &::VesselNetwork< 3 >::GetNumberOfNodesPerProcess ) );
        
        }
        { //::VesselNetwork< 3 >::GetNumberOfVesselNodes
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumberOfVesselNodes_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetNumberOfVesselNodes"
                , GetNumberOfVesselNodes_function_type( &::VesselNetwork< 3 >::GetNumberOfVesselNodes ) );
        
        }
        { //::VesselNetwork< 3 >::GetNumberOfVessels
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumberOfVessels_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetNumberOfVessels"
                , GetNumberOfVessels_function_type( &::VesselNetwork< 3 >::GetNumberOfVessels ) );
        
        }
        { //::VesselNetwork< 3 >::GetOutputData
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::std::map< std::string, double > ( exported_class_t::*GetOutputData_function_type)(  ) ;
            typedef ::std::map< std::string, double > ( VesselNetwork_less__3__greater__wrapper::*default_GetOutputData_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetOutputData"
                , GetOutputData_function_type(&::VesselNetwork< 3 >::GetOutputData)
                , default_GetOutputData_function_type(&VesselNetwork_less__3__greater__wrapper::default_GetOutputData) );
        
        }
        { //::VesselNetwork< 3 >::GetVessel
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::boost::shared_ptr< Vessel< 3 > > ( exported_class_t::*GetVessel_function_type)( unsigned int ) ;
            
            VesselNetwork3_exposer.def( 
                "GetVessel"
                , GetVessel_function_type( &::VesselNetwork< 3 >::GetVessel )
                , ( bp::arg("index") ) );
        
        }
        { //::VesselNetwork< 3 >::GetVesselEndNodes
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<VesselNode<3> > > ( exported_class_t::*GetVesselEndNodes_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetVesselEndNodes"
                , GetVesselEndNodes_function_type( &::VesselNetwork< 3 >::GetVesselEndNodes ) );
        
        }
        { //::VesselNetwork< 3 >::GetVesselIndex
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetVesselIndex_function_type)( ::boost::shared_ptr< Vessel< 3 > > ) ;
            
            VesselNetwork3_exposer.def( 
                "GetVesselIndex"
                , GetVesselIndex_function_type( &::VesselNetwork< 3 >::GetVesselIndex )
                , ( bp::arg("pVessel") ) );
        
        }
        { //::VesselNetwork< 3 >::GetVesselSegment
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VesselSegment< 3 > > ( exported_class_t::*GetVesselSegment_function_type)( unsigned int ) ;
            
            VesselNetwork3_exposer.def( 
                "GetVesselSegment"
                , GetVesselSegment_function_type( &::VesselNetwork< 3 >::GetVesselSegment )
                , ( bp::arg("index") ) );
        
        }
        { //::VesselNetwork< 3 >::GetVesselSegmentIndex
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetVesselSegmentIndex_function_type)( ::boost::shared_ptr< VesselSegment< 3 > > ) ;
            
            VesselNetwork3_exposer.def( 
                "GetVesselSegmentIndex"
                , GetVesselSegmentIndex_function_type( &::VesselNetwork< 3 >::GetVesselSegmentIndex )
                , ( bp::arg("pVesselSegment") ) );
        
        }
        { //::VesselNetwork< 3 >::GetVesselSegments
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<VesselSegment<3> > > ( exported_class_t::*GetVesselSegments_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetVesselSegments"
                , GetVesselSegments_function_type( &::VesselNetwork< 3 >::GetVesselSegments ) );
        
        }
        { //::VesselNetwork< 3 >::GetVessels
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<Vessel<3> > > ( exported_class_t::*GetVessels_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetVessels"
                , GetVessels_function_type( &::VesselNetwork< 3 >::GetVessels ) );
        
        }
        { //::VesselNetwork< 3 >::GetVtk
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkPolyData > ( exported_class_t::*GetVtk_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetVtk"
                , GetVtk_function_type( &::VesselNetwork< 3 >::GetVtk ) );
        
        }
        { //::VesselNetwork< 3 >::GetVtkCellLocator
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::vtkSmartPointer< vtkCellLocator > ( exported_class_t::*GetVtkCellLocator_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetVtkCellLocator"
                , GetVtkCellLocator_function_type( &::VesselNetwork< 3 >::GetVtkCellLocator ) );
        
        }
        { //::VesselNetwork< 3 >::MergeCoincidentNodes
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*MergeCoincidentNodes_function_type)( double ) ;
            
            VesselNetwork3_exposer.def( 
                "MergeCoincidentNodes"
                , MergeCoincidentNodes_function_type( &::VesselNetwork< 3 >::MergeCoincidentNodes )
                , ( bp::arg("tolerance")=0. ) );
        
        }
        { //::VesselNetwork< 3 >::MergeCoincidentNodes
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*MergeCoincidentNodes_function_type)( ::std::vector< boost::shared_ptr<Vessel<3> > >,double ) ;
            
            VesselNetwork3_exposer.def( 
                "MergeCoincidentNodes"
                , MergeCoincidentNodes_function_type( &::VesselNetwork< 3 >::MergeCoincidentNodes )
                , ( bp::arg("pVessels"), bp::arg("tolerance")=0. ) );
        
        }
        { //::VesselNetwork< 3 >::MergeCoincidentNodes
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*MergeCoincidentNodes_function_type)( ::std::vector< boost::shared_ptr<VesselNode<3> > >,double ) ;
            
            VesselNetwork3_exposer.def( 
                "MergeCoincidentNodes"
                , MergeCoincidentNodes_function_type( &::VesselNetwork< 3 >::MergeCoincidentNodes )
                , ( bp::arg("nodes"), bp::arg("tolerance")=0. ) );
        
        }
        { //::VesselNetwork< 3 >::MergeShortVessels
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*MergeShortVessels_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselNetwork3_exposer.def( 
                "MergeShortVessels"
                , MergeShortVessels_function_type( &::VesselNetwork< 3 >::MergeShortVessels )
                , ( bp::arg("cutoff")=10. * 9.9999999999999995E-7 * unit::metres ) );
        
        }
        { //::VesselNetwork< 3 >::Modified
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*Modified_function_type)( bool,bool,bool ) ;
            
            VesselNetwork3_exposer.def( 
                "Modified"
                , Modified_function_type( &::VesselNetwork< 3 >::Modified )
                , ( bp::arg("nodesOutOfDate")=(bool)(true), bp::arg("segmentsOutOfDate")=(bool)(true), bp::arg("vesselsOutOfDate")=(bool)(true) ) );
        
        }
        { //::VesselNetwork< 3 >::NodeIsInNetwork
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef bool ( exported_class_t::*NodeIsInNetwork_function_type)( ::boost::shared_ptr< VesselNode< 3 > > ) ;
            
            VesselNetwork3_exposer.def( 
                "NodeIsInNetwork"
                , NodeIsInNetwork_function_type( &::VesselNetwork< 3 >::NodeIsInNetwork )
                , ( bp::arg("pSourceNode") ) );
        
        }
        { //::VesselNetwork< 3 >::RemoveShortVessels
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveShortVessels_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double >,bool ) ;
            
            VesselNetwork3_exposer.def( 
                "RemoveShortVessels"
                , RemoveShortVessels_function_type( &::VesselNetwork< 3 >::RemoveShortVessels )
                , ( bp::arg("cutoff")=10. * 9.9999999999999995E-7 * unit::metres, bp::arg("endsOnly")=(bool)(true) ) );
        
        }
        { //::VesselNetwork< 3 >::RemoveVessel
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*RemoveVessel_function_type)( ::boost::shared_ptr< Vessel< 3 > >,bool ) ;
            
            VesselNetwork3_exposer.def( 
                "RemoveVessel"
                , RemoveVessel_function_type( &::VesselNetwork< 3 >::RemoveVessel )
                , ( bp::arg("pVessel"), bp::arg("deleteVessel")=(bool)(false) ) );
        
        }
        { //::VesselNetwork< 3 >::SetDistributedVectorFactory
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetDistributedVectorFactory_function_type)( ::boost::shared_ptr< DistributedVectorFactory > ) ;
            
            VesselNetwork3_exposer.def( 
                "SetDistributedVectorFactory"
                , SetDistributedVectorFactory_function_type( &::VesselNetwork< 3 >::SetDistributedVectorFactory )
                , ( bp::arg("vectorFactory") ) );
        
        }
        { //::VesselNetwork< 3 >::Translate
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*Translate_function_type)( ::DimensionalChastePoint< 3 > ) ;
            
            VesselNetwork3_exposer.def( 
                "Translate"
                , Translate_function_type( &::VesselNetwork< 3 >::Translate )
                , ( bp::arg("rTranslationVector") ) );
        
        }
        { //::VesselNetwork< 3 >::Translate
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*Translate_function_type)( ::DimensionalChastePoint< 3 >,::std::vector< boost::shared_ptr<Vessel<3> > > ) ;
            
            VesselNetwork3_exposer.def( 
                "Translate"
                , Translate_function_type( &::VesselNetwork< 3 >::Translate )
                , ( bp::arg("rTranslationVector"), bp::arg("vessels") ) );
        
        }
        { //::VesselNetwork< 3 >::UpdateAll
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateAll_function_type)( bool ) ;
            
            VesselNetwork3_exposer.def( 
                "UpdateAll"
                , UpdateAll_function_type( &::VesselNetwork< 3 >::UpdateAll )
                , ( bp::arg("merge")=(bool)(false) ) );
        
        }
        { //::VesselNetwork< 3 >::UpdateInternalVtkGeometry
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateInternalVtkGeometry_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "UpdateInternalVtkGeometry"
                , UpdateInternalVtkGeometry_function_type( &::VesselNetwork< 3 >::UpdateInternalVtkGeometry ) );
        
        }
        { //::VesselNetwork< 3 >::UpdateNodes
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateNodes_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "UpdateNodes"
                , UpdateNodes_function_type( &::VesselNetwork< 3 >::UpdateNodes ) );
        
        }
        { //::VesselNetwork< 3 >::UpdateSegments
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateSegments_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "UpdateSegments"
                , UpdateSegments_function_type( &::VesselNetwork< 3 >::UpdateSegments ) );
        
        }
        { //::VesselNetwork< 3 >::UpdateVesselIds
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateVesselIds_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "UpdateVesselIds"
                , UpdateVesselIds_function_type( &::VesselNetwork< 3 >::UpdateVesselIds ) );
        
        }
        { //::VesselNetwork< 3 >::UpdateVesselNodes
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*UpdateVesselNodes_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "UpdateVesselNodes"
                , UpdateVesselNodes_function_type( &::VesselNetwork< 3 >::UpdateVesselNodes ) );
        
        }
        { //::VesselNetwork< 3 >::Write
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*Write_function_type)( ::std::string const &,bool ) ;
            
            VesselNetwork3_exposer.def( 
                "Write"
                , Write_function_type( &::VesselNetwork< 3 >::Write )
                , ( bp::arg("rFileName"), bp::arg("masterOnly")=(bool)(true) ) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::GetId
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetId_function_type)(  ) const;
            typedef unsigned int ( VesselNetwork_less__3__greater__wrapper::*default_GetId_function_type)(  ) const;
            
            VesselNetwork3_exposer.def( 
                "GetId"
                , GetId_function_type(&::AbstractVesselNetworkComponent< 3 >::GetId)
                , default_GetId_function_type(&VesselNetwork_less__3__greater__wrapper::default_GetId) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::GetOutputDataKeys
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::std::vector< std::string > ( exported_class_t::*GetOutputDataKeys_function_type)(  ) ;
            typedef ::std::vector< std::string > ( VesselNetwork_less__3__greater__wrapper::*default_GetOutputDataKeys_function_type)(  ) ;
            
            VesselNetwork3_exposer.def( 
                "GetOutputDataKeys"
                , GetOutputDataKeys_function_type(&::AbstractVesselNetworkComponent< 3 >::GetOutputDataKeys)
                , default_GetOutputDataKeys_function_type(&VesselNetwork_less__3__greater__wrapper::default_GetOutputDataKeys) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::GetOutputDataValue
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetOutputDataValue_function_type)( ::std::string const & ) ;
            typedef double ( VesselNetwork_less__3__greater__wrapper::*default_GetOutputDataValue_function_type)( ::std::string const & ) ;
            
            VesselNetwork3_exposer.def( 
                "GetOutputDataValue"
                , GetOutputDataValue_function_type(&::AbstractVesselNetworkComponent< 3 >::GetOutputDataValue)
                , default_GetOutputDataValue_function_type(&VesselNetwork_less__3__greater__wrapper::default_GetOutputDataValue)
                , ( bp::arg("rKey") ) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::GetRadius
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetRadius_function_type)(  ) const;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( VesselNetwork_less__3__greater__wrapper::*default_GetRadius_function_type)(  ) const;
            
            VesselNetwork3_exposer.def( 
                "GetRadius"
                , GetRadius_function_type(&::AbstractVesselNetworkComponent< 3 >::GetRadius)
                , default_GetRadius_function_type(&VesselNetwork_less__3__greater__wrapper::default_GetRadius) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::SetId
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetId_function_type)( unsigned int ) ;
            typedef void ( VesselNetwork_less__3__greater__wrapper::*default_SetId_function_type)( unsigned int ) ;
            
            VesselNetwork3_exposer.def( 
                "SetId"
                , SetId_function_type(&::AbstractVesselNetworkComponent< 3 >::SetId)
                , default_SetId_function_type(&VesselNetwork_less__3__greater__wrapper::default_SetId)
                , ( bp::arg("id") ) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::SetOutputData
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputData_function_type)( ::std::string const &,double ) ;
            typedef void ( VesselNetwork_less__3__greater__wrapper::*default_SetOutputData_function_type)( ::std::string const &,double ) ;
            
            VesselNetwork3_exposer.def( 
                "SetOutputData"
                , SetOutputData_function_type(&::AbstractVesselNetworkComponent< 3 >::SetOutputData)
                , default_SetOutputData_function_type(&VesselNetwork_less__3__greater__wrapper::default_SetOutputData)
                , ( bp::arg("rKey"), bp::arg("value") ) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::SetRadius
        
            typedef VesselNetwork< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRadius_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            typedef void ( VesselNetwork_less__3__greater__wrapper::*default_SetRadius_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselNetwork3_exposer.def( 
                "SetRadius"
                , SetRadius_function_type(&::AbstractVesselNetworkComponent< 3 >::SetRadius)
                , default_SetRadius_function_type(&VesselNetwork_less__3__greater__wrapper::default_SetRadius)
                , ( bp::arg("radius") ) );
        
        }
        VesselNetwork3_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< VesselNetwork<3> > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselNetwork< 3 > >, boost::shared_ptr< AbstractVesselNetworkComponent< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselNetwork< 3 > >, boost::shared_ptr< boost::enable_shared_from_this< VesselNetwork< 3 > > > >();
    }

}
