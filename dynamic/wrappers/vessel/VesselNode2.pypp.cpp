// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "wrapper_header_collection.hpp"
#include "VesselNode2.pypp.hpp"

namespace bp = boost::python;

struct VesselNode_less__2__greater__wrapper : VesselNode< 2 >, bp::wrapper< VesselNode< 2 > > {

    VesselNode_less__2__greater__wrapper(double v1, double v2, double v3, ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > referenceLength )
    : VesselNode<2>( v1, v2, v3, referenceLength )
      , bp::wrapper< VesselNode< 2 > >(){
        // constructor
    
    }

    VesselNode_less__2__greater__wrapper(double v1=0., double v2=0., double v3=0. )
    : VesselNode<2>( v1, v2, v3 )
      , bp::wrapper< VesselNode< 2 > >(){
        // constructor
    
    }

    VesselNode_less__2__greater__wrapper(::DimensionalChastePoint< 2 > const & location )
    : VesselNode<2>( boost::ref(location) )
      , bp::wrapper< VesselNode< 2 > >(){
        // constructor
    
    }

    VesselNode_less__2__greater__wrapper(::VesselNode< 2 > const & rExistingNode )
    : VesselNode<2>( boost::ref(rExistingNode) )
      , bp::wrapper< VesselNode< 2 > >(){
        // copy constructor
    
    }

    virtual ::std::map< std::string, double > GetOutputData(  ) {
        if( bp::override func_GetOutputData = this->get_override( "GetOutputData" ) )
            return func_GetOutputData(  );
        else{
            return this->VesselNode< 2 >::GetOutputData(  );
        }
    }
    
    ::std::map< std::string, double > default_GetOutputData(  ) {
        return VesselNode< 2 >::GetOutputData( );
    }

    virtual unsigned int GetId(  ) const  {
        if( bp::override func_GetId = this->get_override( "GetId" ) )
            return func_GetId(  );
        else{
            return this->AbstractVesselNetworkComponent< 2 >::GetId(  );
        }
    }
    
    unsigned int default_GetId(  ) const  {
        return AbstractVesselNetworkComponent< 2 >::GetId( );
    }

    virtual ::std::vector< std::string > GetOutputDataKeys(  ) {
        if( bp::override func_GetOutputDataKeys = this->get_override( "GetOutputDataKeys" ) )
            return func_GetOutputDataKeys(  );
        else{
            return this->AbstractVesselNetworkComponent< 2 >::GetOutputDataKeys(  );
        }
    }
    
    ::std::vector< std::string > default_GetOutputDataKeys(  ) {
        return AbstractVesselNetworkComponent< 2 >::GetOutputDataKeys( );
    }

    virtual double GetOutputDataValue( ::std::string const & rKey ) {
        if( bp::override func_GetOutputDataValue = this->get_override( "GetOutputDataValue" ) )
            return func_GetOutputDataValue( rKey );
        else{
            return this->AbstractVesselNetworkComponent< 2 >::GetOutputDataValue( rKey );
        }
    }
    
    double default_GetOutputDataValue( ::std::string const & rKey ) {
        return AbstractVesselNetworkComponent< 2 >::GetOutputDataValue( rKey );
    }

    virtual ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > GetRadius(  ) const  {
        if( bp::override func_GetRadius = this->get_override( "GetRadius" ) )
            return func_GetRadius(  );
        else{
            return this->AbstractVesselNetworkComponent< 2 >::GetRadius(  );
        }
    }
    
    ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > default_GetRadius(  ) const  {
        return AbstractVesselNetworkComponent< 2 >::GetRadius( );
    }

    virtual void SetId( unsigned int id ) {
        if( bp::override func_SetId = this->get_override( "SetId" ) )
            func_SetId( id );
        else{
            this->AbstractVesselNetworkComponent< 2 >::SetId( id );
        }
    }
    
    void default_SetId( unsigned int id ) {
        AbstractVesselNetworkComponent< 2 >::SetId( id );
    }

    virtual void SetOutputData( ::std::string const & rKey, double value ) {
        if( bp::override func_SetOutputData = this->get_override( "SetOutputData" ) )
            func_SetOutputData( rKey, value );
        else{
            this->AbstractVesselNetworkComponent< 2 >::SetOutputData( rKey, value );
        }
    }
    
    void default_SetOutputData( ::std::string const & rKey, double value ) {
        AbstractVesselNetworkComponent< 2 >::SetOutputData( rKey, value );
    }

    virtual void SetRadius( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > radius ) {
        if( bp::override func_SetRadius = this->get_override( "SetRadius" ) )
            func_SetRadius( radius );
        else{
            this->AbstractVesselNetworkComponent< 2 >::SetRadius( radius );
        }
    }
    
    void default_SetRadius( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > radius ) {
        AbstractVesselNetworkComponent< 2 >::SetRadius( radius );
    }

};

void register_VesselNode2_class(){

    { //::VesselNode< 2 >
        typedef bp::class_< VesselNode_less__2__greater__wrapper, bp::bases< AbstractVesselNetworkComponent< 2 > > > VesselNode2_exposer_t;
        VesselNode2_exposer_t VesselNode2_exposer = VesselNode2_exposer_t( "VesselNode2", bp::init< double, double, double, boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > >(( bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("referenceLength") )) );
        bp::scope VesselNode2_scope( VesselNode2_exposer );
        VesselNode2_exposer.def( bp::init< bp::optional< double, double, double > >(( bp::arg("v1")=0., bp::arg("v2")=0., bp::arg("v3")=0. )) );
        bp::implicitly_convertible< double, VesselNode< 2 > >();
        VesselNode2_exposer.def( bp::init< DimensionalChastePoint< 2 > const & >(( bp::arg("location") )) );
        bp::implicitly_convertible< DimensionalChastePoint< 2 > const &, VesselNode< 2 > >();
        VesselNode2_exposer.def( bp::init< VesselNode< 2 > const & >(( bp::arg("rExistingNode") )) );
        { //::VesselNode< 2 >::Create
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::boost::shared_ptr< VesselNode< 2 > > ( *Create_function_type )( double,double,double );
            
            VesselNode2_exposer.def( 
                "Create"
                , Create_function_type( &::VesselNode< 2 >::Create )
                , ( bp::arg("v1")=0., bp::arg("v2")=0., bp::arg("v3")=0. ) );
        
        }
        { //::VesselNode< 2 >::Create
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::boost::shared_ptr< VesselNode< 2 > > ( *Create_function_type )( double,double,double,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > );
            
            VesselNode2_exposer.def( 
                "Create"
                , Create_function_type( &::VesselNode< 2 >::Create )
                , ( bp::arg("v1"), bp::arg("v2"), bp::arg("v3"), bp::arg("referenceLength") ) );
        
        }
        { //::VesselNode< 2 >::Create
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::boost::shared_ptr< VesselNode< 2 > > ( *Create_function_type )( ::DimensionalChastePoint< 2 > const & );
            
            VesselNode2_exposer.def( 
                "Create"
                , Create_function_type( &::VesselNode< 2 >::Create )
                , ( bp::arg("location") ) );
        
        }
        { //::VesselNode< 2 >::Create
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::boost::shared_ptr< VesselNode< 2 > > ( *Create_function_type )( ::VesselNode< 2 > const & );
            
            VesselNode2_exposer.def( 
                "Create"
                , Create_function_type( &::VesselNode< 2 >::Create )
                , ( bp::arg("rExistingNode") ) );
        
        }
        { //::VesselNode< 2 >::Create
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::boost::shared_ptr< VesselNode< 2 > > ( *Create_function_type )( ::boost::shared_ptr< VesselNode< 2 > > );
            
            VesselNode2_exposer.def( 
                "Create"
                , Create_function_type( &::VesselNode< 2 >::Create )
                , ( bp::arg("pExistingNode") ) );
        
        }
        { //::VesselNode< 2 >::GetComparisonId
        
            typedef VesselNode< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetComparisonId_function_type)(  ) ;
            
            VesselNode2_exposer.def( 
                "GetComparisonId"
                , GetComparisonId_function_type( &::VesselNode< 2 >::GetComparisonId ) );
        
        }
        { //::VesselNode< 2 >::GetDistance
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetDistance_function_type)( ::DimensionalChastePoint< 2 > const & ) const;
            
            VesselNode2_exposer.def( 
                "GetDistance"
                , GetDistance_function_type( &::VesselNode< 2 >::GetDistance )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::VesselNode< 2 >::GetFlowProperties
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::boost::shared_ptr< NodeFlowProperties< 2 > > ( exported_class_t::*GetFlowProperties_function_type)(  ) const;
            
            VesselNode2_exposer.def( 
                "GetFlowProperties"
                , GetFlowProperties_function_type( &::VesselNode< 2 >::GetFlowProperties ) );
        
        }
        { //::VesselNode< 2 >::GetNumberOfSegments
        
            typedef VesselNode< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetNumberOfSegments_function_type)(  ) const;
            
            VesselNode2_exposer.def( 
                "GetNumberOfSegments"
                , GetNumberOfSegments_function_type( &::VesselNode< 2 >::GetNumberOfSegments ) );
        
        }
        { //::VesselNode< 2 >::GetOutputData
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::std::map< std::string, double > ( exported_class_t::*GetOutputData_function_type)(  ) ;
            typedef ::std::map< std::string, double > ( VesselNode_less__2__greater__wrapper::*default_GetOutputData_function_type)(  ) ;
            
            VesselNode2_exposer.def( 
                "GetOutputData"
                , GetOutputData_function_type(&::VesselNode< 2 >::GetOutputData)
                , default_GetOutputData_function_type(&VesselNode_less__2__greater__wrapper::default_GetOutputData) );
        
        }
        { //::VesselNode< 2 >::GetReferenceLengthScale
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetReferenceLengthScale_function_type)(  ) const;
            
            VesselNode2_exposer.def( 
                "GetReferenceLengthScale"
                , GetReferenceLengthScale_function_type( &::VesselNode< 2 >::GetReferenceLengthScale ) );
        
        }
        { //::VesselNode< 2 >::GetSegment
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::boost::shared_ptr< VesselSegment< 2 > > ( exported_class_t::*GetSegment_function_type)( unsigned int ) const;
            
            VesselNode2_exposer.def( 
                "GetSegment"
                , GetSegment_function_type( &::VesselNode< 2 >::GetSegment )
                , ( bp::arg("index") ) );
        
        }
        { //::VesselNode< 2 >::GetSegments
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::std::vector< boost::shared_ptr<VesselSegment<2> > > ( exported_class_t::*GetSegments_function_type)(  ) const;
            
            VesselNode2_exposer.def( 
                "GetSegments"
                , GetSegments_function_type( &::VesselNode< 2 >::GetSegments ) );
        
        }
        { //::VesselNode< 2 >::IsAttachedTo
        
            typedef VesselNode< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsAttachedTo_function_type)( ::boost::shared_ptr< VesselSegment< 2 > > const ) const;
            
            VesselNode2_exposer.def( 
                "IsAttachedTo"
                , IsAttachedTo_function_type( &::VesselNode< 2 >::IsAttachedTo )
                , ( bp::arg("pSegment") ) );
        
        }
        { //::VesselNode< 2 >::IsCoincident
        
            typedef VesselNode< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsCoincident_function_type)( ::DimensionalChastePoint< 2 > const & ) const;
            
            VesselNode2_exposer.def( 
                "IsCoincident"
                , IsCoincident_function_type( &::VesselNode< 2 >::IsCoincident )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::VesselNode< 2 >::IsMigrating
        
            typedef VesselNode< 2 > exported_class_t;
            typedef bool ( exported_class_t::*IsMigrating_function_type)(  ) const;
            
            VesselNode2_exposer.def( 
                "IsMigrating"
                , IsMigrating_function_type( &::VesselNode< 2 >::IsMigrating ) );
        
        }
        { //::VesselNode< 2 >::SetComparisonId
        
            typedef VesselNode< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetComparisonId_function_type)( unsigned int ) ;
            
            VesselNode2_exposer.def( 
                "SetComparisonId"
                , SetComparisonId_function_type( &::VesselNode< 2 >::SetComparisonId )
                , ( bp::arg("id") ) );
        
        }
        { //::VesselNode< 2 >::SetFlowProperties
        
            typedef VesselNode< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetFlowProperties_function_type)( ::NodeFlowProperties< 2 > const & ) ;
            
            VesselNode2_exposer.def( 
                "SetFlowProperties"
                , SetFlowProperties_function_type( &::VesselNode< 2 >::SetFlowProperties )
                , ( bp::arg("rFlowProperties") ) );
        
        }
        { //::VesselNode< 2 >::SetIsMigrating
        
            typedef VesselNode< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetIsMigrating_function_type)( bool ) ;
            
            VesselNode2_exposer.def( 
                "SetIsMigrating"
                , SetIsMigrating_function_type( &::VesselNode< 2 >::SetIsMigrating )
                , ( bp::arg("isMigrating") ) );
        
        }
        { //::VesselNode< 2 >::SetLocation
        
            typedef VesselNode< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetLocation_function_type)( ::DimensionalChastePoint< 2 > const & ) ;
            
            VesselNode2_exposer.def( 
                "SetLocation"
                , SetLocation_function_type( &::VesselNode< 2 >::SetLocation )
                , ( bp::arg("rLocation") ) );
        
        }
        { //::VesselNode< 2 >::SetLocation
        
            typedef VesselNode< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetLocation_function_type)( double,double,double,::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselNode2_exposer.def( 
                "SetLocation"
                , SetLocation_function_type( &::VesselNode< 2 >::SetLocation )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("z")=0., bp::arg("referenceLength")=9.9999999999999995E-7 * unit::metres ) );
        
        }
        { //::VesselNode< 2 >::SetReferenceLengthScale
        
            typedef VesselNode< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetReferenceLengthScale_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselNode2_exposer.def( 
                "SetReferenceLengthScale"
                , SetReferenceLengthScale_function_type( &::VesselNode< 2 >::SetReferenceLengthScale )
                , ( bp::arg("lenthScale") ) );
        
        }
        { //::VesselNode< 2 >::rGetLocation
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::DimensionalChastePoint< 2 > const & ( exported_class_t::*rGetLocation_function_type)(  ) const;
            
            VesselNode2_exposer.def( 
                "rGetLocation"
                , rGetLocation_function_type( &::VesselNode< 2 >::rGetLocation )
                , bp::return_internal_reference< >() );
        
        }
        { //::AbstractVesselNetworkComponent< 2 >::GetId
        
            typedef VesselNode< 2 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetId_function_type)(  ) const;
            typedef unsigned int ( VesselNode_less__2__greater__wrapper::*default_GetId_function_type)(  ) const;
            
            VesselNode2_exposer.def( 
                "GetId"
                , GetId_function_type(&::AbstractVesselNetworkComponent< 2 >::GetId)
                , default_GetId_function_type(&VesselNode_less__2__greater__wrapper::default_GetId) );
        
        }
        { //::AbstractVesselNetworkComponent< 2 >::GetOutputDataKeys
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::std::vector< std::string > ( exported_class_t::*GetOutputDataKeys_function_type)(  ) ;
            typedef ::std::vector< std::string > ( VesselNode_less__2__greater__wrapper::*default_GetOutputDataKeys_function_type)(  ) ;
            
            VesselNode2_exposer.def( 
                "GetOutputDataKeys"
                , GetOutputDataKeys_function_type(&::AbstractVesselNetworkComponent< 2 >::GetOutputDataKeys)
                , default_GetOutputDataKeys_function_type(&VesselNode_less__2__greater__wrapper::default_GetOutputDataKeys) );
        
        }
        { //::AbstractVesselNetworkComponent< 2 >::GetOutputDataValue
        
            typedef VesselNode< 2 > exported_class_t;
            typedef double ( exported_class_t::*GetOutputDataValue_function_type)( ::std::string const & ) ;
            typedef double ( VesselNode_less__2__greater__wrapper::*default_GetOutputDataValue_function_type)( ::std::string const & ) ;
            
            VesselNode2_exposer.def( 
                "GetOutputDataValue"
                , GetOutputDataValue_function_type(&::AbstractVesselNetworkComponent< 2 >::GetOutputDataValue)
                , default_GetOutputDataValue_function_type(&VesselNode_less__2__greater__wrapper::default_GetOutputDataValue)
                , ( bp::arg("rKey") ) );
        
        }
        { //::AbstractVesselNetworkComponent< 2 >::GetRadius
        
            typedef VesselNode< 2 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetRadius_function_type)(  ) const;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( VesselNode_less__2__greater__wrapper::*default_GetRadius_function_type)(  ) const;
            
            VesselNode2_exposer.def( 
                "GetRadius"
                , GetRadius_function_type(&::AbstractVesselNetworkComponent< 2 >::GetRadius)
                , default_GetRadius_function_type(&VesselNode_less__2__greater__wrapper::default_GetRadius) );
        
        }
        { //::AbstractVesselNetworkComponent< 2 >::SetId
        
            typedef VesselNode< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetId_function_type)( unsigned int ) ;
            typedef void ( VesselNode_less__2__greater__wrapper::*default_SetId_function_type)( unsigned int ) ;
            
            VesselNode2_exposer.def( 
                "SetId"
                , SetId_function_type(&::AbstractVesselNetworkComponent< 2 >::SetId)
                , default_SetId_function_type(&VesselNode_less__2__greater__wrapper::default_SetId)
                , ( bp::arg("id") ) );
        
        }
        { //::AbstractVesselNetworkComponent< 2 >::SetOutputData
        
            typedef VesselNode< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputData_function_type)( ::std::string const &,double ) ;
            typedef void ( VesselNode_less__2__greater__wrapper::*default_SetOutputData_function_type)( ::std::string const &,double ) ;
            
            VesselNode2_exposer.def( 
                "SetOutputData"
                , SetOutputData_function_type(&::AbstractVesselNetworkComponent< 2 >::SetOutputData)
                , default_SetOutputData_function_type(&VesselNode_less__2__greater__wrapper::default_SetOutputData)
                , ( bp::arg("rKey"), bp::arg("value") ) );
        
        }
        { //::AbstractVesselNetworkComponent< 2 >::SetRadius
        
            typedef VesselNode< 2 > exported_class_t;
            typedef void ( exported_class_t::*SetRadius_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            typedef void ( VesselNode_less__2__greater__wrapper::*default_SetRadius_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselNode2_exposer.def( 
                "SetRadius"
                , SetRadius_function_type(&::AbstractVesselNetworkComponent< 2 >::SetRadius)
                , default_SetRadius_function_type(&VesselNode_less__2__greater__wrapper::default_SetRadius)
                , ( bp::arg("radius") ) );
        
        }
        VesselNode2_exposer.staticmethod( "Create" );
        bp::register_ptr_to_python< boost::shared_ptr< VesselNode<2> > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselNode< 2 > >, boost::shared_ptr< AbstractVesselNetworkComponent< 2 > > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselNode< 2 > >, boost::shared_ptr< boost::enable_shared_from_this< VesselNode< 2 > > > >();
    }

}
