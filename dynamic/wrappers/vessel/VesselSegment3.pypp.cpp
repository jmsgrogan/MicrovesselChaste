// This file has been generated by Py++.


/*

Copyright (c) 2005-2017, University of Oxford.
All rights reserved.

University of Oxford means the Chancellor, Masters and Scholars of the
University of Oxford, having an administrative office at Wellington
Square, Oxford OX1 2JD, UK.

This file is part of Chaste.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
 * Neither the name of the University of Oxford nor the names of its
   contributors may be used to endorse or promote products derived from this
   software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include "boost/python.hpp"
#include "wrapper_header_collection.hpp"
#include "VesselSegment3.pypp.hpp"

namespace bp = boost::python;

struct VesselSegment_less__3__greater__wrapper : VesselSegment< 3 >, bp::wrapper< VesselSegment< 3 > > {

    VesselSegment_less__3__greater__wrapper(::VesselSegment< 3 > const & rSegment )
    : VesselSegment<3>( boost::ref(rSegment) )
      , bp::wrapper< VesselSegment< 3 > >(){
        // copy constructor
    
    }

    virtual ::std::map< std::string, double > GetOutputData(  ) {
        if( bp::override func_GetOutputData = this->get_override( "GetOutputData" ) )
            return func_GetOutputData(  );
        else{
            return this->VesselSegment< 3 >::GetOutputData(  );
        }
    }
    
    ::std::map< std::string, double > default_GetOutputData(  ) {
        return VesselSegment< 3 >::GetOutputData( );
    }

    virtual unsigned int GetId(  ) const  {
        if( bp::override func_GetId = this->get_override( "GetId" ) )
            return func_GetId(  );
        else{
            return this->AbstractVesselNetworkComponent< 3 >::GetId(  );
        }
    }
    
    unsigned int default_GetId(  ) const  {
        return AbstractVesselNetworkComponent< 3 >::GetId( );
    }

    virtual ::std::vector< std::string > GetOutputDataKeys(  ) {
        if( bp::override func_GetOutputDataKeys = this->get_override( "GetOutputDataKeys" ) )
            return func_GetOutputDataKeys(  );
        else{
            return this->AbstractVesselNetworkComponent< 3 >::GetOutputDataKeys(  );
        }
    }
    
    ::std::vector< std::string > default_GetOutputDataKeys(  ) {
        return AbstractVesselNetworkComponent< 3 >::GetOutputDataKeys( );
    }

    virtual double GetOutputDataValue( ::std::string const & rKey ) {
        if( bp::override func_GetOutputDataValue = this->get_override( "GetOutputDataValue" ) )
            return func_GetOutputDataValue( rKey );
        else{
            return this->AbstractVesselNetworkComponent< 3 >::GetOutputDataValue( rKey );
        }
    }
    
    double default_GetOutputDataValue( ::std::string const & rKey ) {
        return AbstractVesselNetworkComponent< 3 >::GetOutputDataValue( rKey );
    }

    virtual ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > GetRadius(  ) const  {
        if( bp::override func_GetRadius = this->get_override( "GetRadius" ) )
            return func_GetRadius(  );
        else{
            return this->AbstractVesselNetworkComponent< 3 >::GetRadius(  );
        }
    }
    
    ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > default_GetRadius(  ) const  {
        return AbstractVesselNetworkComponent< 3 >::GetRadius( );
    }

    virtual void SetId( unsigned int id ) {
        if( bp::override func_SetId = this->get_override( "SetId" ) )
            func_SetId( id );
        else{
            this->AbstractVesselNetworkComponent< 3 >::SetId( id );
        }
    }
    
    void default_SetId( unsigned int id ) {
        AbstractVesselNetworkComponent< 3 >::SetId( id );
    }

    virtual void SetOutputData( ::std::string const & rKey, double value ) {
        if( bp::override func_SetOutputData = this->get_override( "SetOutputData" ) )
            func_SetOutputData( rKey, value );
        else{
            this->AbstractVesselNetworkComponent< 3 >::SetOutputData( rKey, value );
        }
    }
    
    void default_SetOutputData( ::std::string const & rKey, double value ) {
        AbstractVesselNetworkComponent< 3 >::SetOutputData( rKey, value );
    }

    virtual void SetRadius( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > radius ) {
        if( bp::override func_SetRadius = this->get_override( "SetRadius" ) )
            func_SetRadius( radius );
        else{
            this->AbstractVesselNetworkComponent< 3 >::SetRadius( radius );
        }
    }
    
    void default_SetRadius( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > radius ) {
        AbstractVesselNetworkComponent< 3 >::SetRadius( radius );
    }

};

boost::shared_ptr<VesselSegment<3> > (*VS3_Nodes)(boost::shared_ptr<VesselNode<3> >, boost::shared_ptr<VesselNode<3> >) = &VesselSegment<3>::Create;

boost::shared_ptr<VesselSegment<3> > (*VS3_Copy)(boost::shared_ptr<VesselSegment<3> >) = &VesselSegment<3>::Create;

void register_VesselSegment3_class(){

    { //::VesselSegment< 3 >
        typedef bp::class_< VesselSegment_less__3__greater__wrapper, bp::bases< AbstractVesselNetworkComponent< 3 > >, boost::shared_ptr< VesselSegment<3> > > VesselSegment3_exposer_t;
        VesselSegment3_exposer_t VesselSegment3_exposer = VesselSegment3_exposer_t( "VesselSegment3", bp::no_init );
        bp::scope VesselSegment3_scope( VesselSegment3_exposer );
        VesselSegment3_exposer.def( bp::init< VesselSegment< 3 > const & >(( bp::arg("rSegment") )) );
        { //::VesselSegment< 3 >::CopyDataFromExistingSegment
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef void ( exported_class_t::*CopyDataFromExistingSegment_function_type)( ::boost::shared_ptr< VesselSegment< 3 > > const ) ;
            
            VesselSegment3_exposer.def( 
                "CopyDataFromExistingSegment"
                , CopyDataFromExistingSegment_function_type( &::VesselSegment< 3 >::CopyDataFromExistingSegment )
                , ( bp::arg("pTargetSegment") ) );
        
        }
        { //::VesselSegment< 3 >::Create
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VesselSegment< 3 > > ( *Create_function_type )( ::boost::shared_ptr< VesselNode< 3 > >,::boost::shared_ptr< VesselNode< 3 > > );
            
            VesselSegment3_exposer.def( 
                "Create"
                , Create_function_type( &::VesselSegment< 3 >::Create )
                , ( bp::arg("pNode1"), bp::arg("pNode2") ) );
        
        }
        { //::VesselSegment< 3 >::Create
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VesselSegment< 3 > > ( *Create_function_type )( ::boost::shared_ptr< VesselSegment< 3 > > );
            
            VesselSegment3_exposer.def( 
                "Create"
                , Create_function_type( &::VesselSegment< 3 >::Create )
                , ( bp::arg("pSegment") ) );
        
        }
        { //::VesselSegment< 3 >::GetDistance
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetDistance_function_type)( ::DimensionalChastePoint< 3 > const & ) const;
            
            VesselSegment3_exposer.def( 
                "GetDistance"
                , GetDistance_function_type( &::VesselSegment< 3 >::GetDistance )
                , ( bp::arg("location") ) );
        
        }
        { //::VesselSegment< 3 >::GetFlowProperties
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::boost::shared_ptr< SegmentFlowProperties< 3 > > ( exported_class_t::*GetFlowProperties_function_type)(  ) const;
            
            VesselSegment3_exposer.def( 
                "GetFlowProperties"
                , GetFlowProperties_function_type( &::VesselSegment< 3 >::GetFlowProperties ) );
        
        }
        { //::VesselSegment< 3 >::GetLength
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetLength_function_type)(  ) const;
            
            VesselSegment3_exposer.def( 
                "GetLength"
                , GetLength_function_type( &::VesselSegment< 3 >::GetLength ) );
        
        }
        { //::VesselSegment< 3 >::GetMaturity
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetMaturity_function_type)(  ) const;
            
            VesselSegment3_exposer.def( 
                "GetMaturity"
                , GetMaturity_function_type( &::VesselSegment< 3 >::GetMaturity ) );
        
        }
        { //::VesselSegment< 3 >::GetMidPoint
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::DimensionalChastePoint< 3 > ( exported_class_t::*GetMidPoint_function_type)(  ) const;
            
            VesselSegment3_exposer.def( 
                "GetMidPoint"
                , GetMidPoint_function_type( &::VesselSegment< 3 >::GetMidPoint ) );
        
        }
        { //::VesselSegment< 3 >::GetNode
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VesselNode< 3 > > ( exported_class_t::*GetNode_function_type)( unsigned int ) const;
            
            VesselSegment3_exposer.def( 
                "GetNode"
                , GetNode_function_type( &::VesselSegment< 3 >::GetNode )
                , ( bp::arg("index") ) );
        
        }
        { //::VesselSegment< 3 >::GetNodes
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::std::pair< boost::shared_ptr< VesselNode< 3 > >, boost::shared_ptr< VesselNode< 3 > > > ( exported_class_t::*GetNodes_function_type)(  ) const;
            
            VesselSegment3_exposer.def( 
                "GetNodes"
                , GetNodes_function_type( &::VesselSegment< 3 >::GetNodes ) );
        
        }
        { //::VesselSegment< 3 >::GetOppositeNode
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::boost::shared_ptr< VesselNode< 3 > > ( exported_class_t::*GetOppositeNode_function_type)( ::boost::shared_ptr< VesselNode< 3 > > ) const;
            
            VesselSegment3_exposer.def( 
                "GetOppositeNode"
                , GetOppositeNode_function_type( &::VesselSegment< 3 >::GetOppositeNode )
                , ( bp::arg("pInputNode") ) );
        
        }
        { //::VesselSegment< 3 >::GetOutputData
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::std::map< std::string, double > ( exported_class_t::*GetOutputData_function_type)(  ) ;
            typedef ::std::map< std::string, double > ( VesselSegment_less__3__greater__wrapper::*default_GetOutputData_function_type)(  ) ;
            
            VesselSegment3_exposer.def( 
                "GetOutputData"
                , GetOutputData_function_type(&::VesselSegment< 3 >::GetOutputData)
                , default_GetOutputData_function_type(&VesselSegment_less__3__greater__wrapper::default_GetOutputData) );
        
        }
        { //::VesselSegment< 3 >::GetPointProjection
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::DimensionalChastePoint< 3 > ( exported_class_t::*GetPointProjection_function_type)( ::DimensionalChastePoint< 3 > const &,bool ) const;
            
            VesselSegment3_exposer.def( 
                "GetPointProjection"
                , GetPointProjection_function_type( &::VesselSegment< 3 >::GetPointProjection )
                , ( bp::arg("location"), bp::arg("projectToEnds")=(bool)(false) ) );
        
        }
        { //::VesselSegment< 3 >::GetUnitTangent
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::boost::numeric::ublas::c_vector< double, 3 > ( exported_class_t::*GetUnitTangent_function_type)(  ) const;
            
            VesselSegment3_exposer.def( 
                "GetUnitTangent"
                , GetUnitTangent_function_type( &::VesselSegment< 3 >::GetUnitTangent ) );
        
        }
        { //::VesselSegment< 3 >::GetVessel
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::boost::shared_ptr< Vessel< 3 > > ( exported_class_t::*GetVessel_function_type)(  ) const;
            
            VesselSegment3_exposer.def( 
                "GetVessel"
                , GetVessel_function_type( &::VesselSegment< 3 >::GetVessel ) );
        
        }
        { //::VesselSegment< 3 >::HasNode
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef bool ( exported_class_t::*HasNode_function_type)( ::boost::shared_ptr< VesselNode< 3 > > ) const;
            
            VesselSegment3_exposer.def( 
                "HasNode"
                , HasNode_function_type( &::VesselSegment< 3 >::HasNode )
                , ( bp::arg("pNode") ) );
        
        }
        { //::VesselSegment< 3 >::IsConnectedTo
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef bool ( exported_class_t::*IsConnectedTo_function_type)( ::boost::shared_ptr< VesselSegment< 3 > > ) const;
            
            VesselSegment3_exposer.def( 
                "IsConnectedTo"
                , IsConnectedTo_function_type( &::VesselSegment< 3 >::IsConnectedTo )
                , ( bp::arg("pOtherSegment") ) );
        
        }
        { //::VesselSegment< 3 >::Remove
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef void ( exported_class_t::*Remove_function_type)(  ) ;
            
            VesselSegment3_exposer.def( 
                "Remove"
                , Remove_function_type( &::VesselSegment< 3 >::Remove ) );
        
        }
        { //::VesselSegment< 3 >::ReplaceNode
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef void ( exported_class_t::*ReplaceNode_function_type)( unsigned int,::boost::shared_ptr< VesselNode< 3 > > ) ;
            
            VesselSegment3_exposer.def( 
                "ReplaceNode"
                , ReplaceNode_function_type( &::VesselSegment< 3 >::ReplaceNode )
                , ( bp::arg("oldNodeIndex"), bp::arg("pNewNode") ) );
        
        }
        { //::VesselSegment< 3 >::SetFlowProperties
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetFlowProperties_function_type)( ::SegmentFlowProperties< 3 > const & ) ;
            
            VesselSegment3_exposer.def( 
                "SetFlowProperties"
                , SetFlowProperties_function_type( &::VesselSegment< 3 >::SetFlowProperties )
                , ( bp::arg("rFlowProperties") ) );
        
        }
        { //::VesselSegment< 3 >::SetMaturity
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetMaturity_function_type)( double ) ;
            
            VesselSegment3_exposer.def( 
                "SetMaturity"
                , SetMaturity_function_type( &::VesselSegment< 3 >::SetMaturity )
                , ( bp::arg("maturity") ) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::GetId
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef unsigned int ( exported_class_t::*GetId_function_type)(  ) const;
            typedef unsigned int ( VesselSegment_less__3__greater__wrapper::*default_GetId_function_type)(  ) const;
            
            VesselSegment3_exposer.def( 
                "GetId"
                , GetId_function_type(&::AbstractVesselNetworkComponent< 3 >::GetId)
                , default_GetId_function_type(&VesselSegment_less__3__greater__wrapper::default_GetId) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::GetOutputDataKeys
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::std::vector< std::string > ( exported_class_t::*GetOutputDataKeys_function_type)(  ) ;
            typedef ::std::vector< std::string > ( VesselSegment_less__3__greater__wrapper::*default_GetOutputDataKeys_function_type)(  ) ;
            
            VesselSegment3_exposer.def( 
                "GetOutputDataKeys"
                , GetOutputDataKeys_function_type(&::AbstractVesselNetworkComponent< 3 >::GetOutputDataKeys)
                , default_GetOutputDataKeys_function_type(&VesselSegment_less__3__greater__wrapper::default_GetOutputDataKeys) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::GetOutputDataValue
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef double ( exported_class_t::*GetOutputDataValue_function_type)( ::std::string const & ) ;
            typedef double ( VesselSegment_less__3__greater__wrapper::*default_GetOutputDataValue_function_type)( ::std::string const & ) ;
            
            VesselSegment3_exposer.def( 
                "GetOutputDataValue"
                , GetOutputDataValue_function_type(&::AbstractVesselNetworkComponent< 3 >::GetOutputDataValue)
                , default_GetOutputDataValue_function_type(&VesselSegment_less__3__greater__wrapper::default_GetOutputDataValue)
                , ( bp::arg("rKey") ) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::GetRadius
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( exported_class_t::*GetRadius_function_type)(  ) const;
            typedef ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ( VesselSegment_less__3__greater__wrapper::*default_GetRadius_function_type)(  ) const;
            
            VesselSegment3_exposer.def( 
                "GetRadius"
                , GetRadius_function_type(&::AbstractVesselNetworkComponent< 3 >::GetRadius)
                , default_GetRadius_function_type(&VesselSegment_less__3__greater__wrapper::default_GetRadius) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::SetId
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetId_function_type)( unsigned int ) ;
            typedef void ( VesselSegment_less__3__greater__wrapper::*default_SetId_function_type)( unsigned int ) ;
            
            VesselSegment3_exposer.def( 
                "SetId"
                , SetId_function_type(&::AbstractVesselNetworkComponent< 3 >::SetId)
                , default_SetId_function_type(&VesselSegment_less__3__greater__wrapper::default_SetId)
                , ( bp::arg("id") ) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::SetOutputData
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetOutputData_function_type)( ::std::string const &,double ) ;
            typedef void ( VesselSegment_less__3__greater__wrapper::*default_SetOutputData_function_type)( ::std::string const &,double ) ;
            
            VesselSegment3_exposer.def( 
                "SetOutputData"
                , SetOutputData_function_type(&::AbstractVesselNetworkComponent< 3 >::SetOutputData)
                , default_SetOutputData_function_type(&VesselSegment_less__3__greater__wrapper::default_SetOutputData)
                , ( bp::arg("rKey"), bp::arg("value") ) );
        
        }
        { //::AbstractVesselNetworkComponent< 3 >::SetRadius
        
            typedef VesselSegment< 3 > exported_class_t;
            typedef void ( exported_class_t::*SetRadius_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            typedef void ( VesselSegment_less__3__greater__wrapper::*default_SetRadius_function_type)( ::boost::units::quantity< boost::units::unit< boost::units::list< boost::units::dim< boost::units::length_base_dimension, boost::units::static_rational< 1, 1 > >, boost::units::dimensionless_type >, boost::units::homogeneous_system< boost::units::list< boost::units::si::meter_base_unit, boost::units::list< boost::units::scaled_base_unit< boost::units::cgs::gram_base_unit, boost::units::scale< 10, boost::units::static_rational< 3 > > >, boost::units::list< boost::units::si::second_base_unit, boost::units::list< boost::units::si::ampere_base_unit, boost::units::list< boost::units::si::kelvin_base_unit, boost::units::list< boost::units::si::mole_base_unit, boost::units::list< boost::units::si::candela_base_unit, boost::units::list< boost::units::angle::radian_base_unit, boost::units::list< boost::units::angle::steradian_base_unit, boost::units::dimensionless_type > > > > > > > > > >, void >, double > ) ;
            
            VesselSegment3_exposer.def( 
                "SetRadius"
                , SetRadius_function_type(&::AbstractVesselNetworkComponent< 3 >::SetRadius)
                , default_SetRadius_function_type(&VesselSegment_less__3__greater__wrapper::default_SetRadius)
                , ( bp::arg("radius") ) );
        
        }
        VesselSegment3_exposer.staticmethod( "Create" );
        bp::implicitly_convertible< boost::shared_ptr< VesselSegment< 3 > >, boost::shared_ptr< AbstractVesselNetworkComponent< 3 > > >();
        bp::implicitly_convertible< boost::shared_ptr< VesselSegment< 3 > >, boost::shared_ptr< boost::enable_shared_from_this< VesselSegment< 3 > > > >();
        VesselSegment3_exposer.def("__init__", bp::make_constructor(VS3_Nodes));
        VesselSegment3_exposer.def("__init__", bp::make_constructor(VS3_Copy));
    }

}
